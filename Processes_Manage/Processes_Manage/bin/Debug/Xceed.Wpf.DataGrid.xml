<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>Xceed.Wpf.DataGrid</name>
    </assembly>
    <members>
        <member name="N:Xceed.Wpf.DataGrid">
            <summary>The Xceed.Wpf.DataGrid namespace regroups all the classes that are required by the DataGridControl class to edit and display data.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.AutoFilterMode">
            <summary>Value indicating how automatic filtering is performed. </summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterMode.None">
            <summary>The data items will not be filtered.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterMode.And">
            <summary>The data items will be filtered according to all the filtering criteria defined by each column. If a data item matches all the criteria, it will be included.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterMode.Or">
            <summary>The data items will be filtered according to at least one of the filtering criteria defined by the columns. If a data item matches at least one criteria, it will be included.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.CellEditorDisplayConditions">
            <summary>Value representing under what conditions cell editors are displayed.</summary>
            <remarks>    Including Always when setting the     CellEditorDisplayConditions property will have     a significant negative impact on performance.     If MouseOverCell and/or     MouseOverRow are included, the "blinking"     effect that can occur if a cell editor's height is larger than     the cell or row height, can be prevented by setting the cell or     row's MinHeight property, via a style, to the     height of the largest cell editor.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.CellEditorDisplayConditions.None">
            <summary>A cell's editor is displayed only when the cell is being edited.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.CellEditorDisplayConditions.RowIsBeingEdited">
            <summary>All the cell editors in a row are displayed when one of the cells in a row is being edited.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.CellEditorDisplayConditions.MouseOverCell">
            <summary>A cell's editor is displayed when the mouse passes over a cell.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.CellEditorDisplayConditions.MouseOverRow">
            <summary>All the cell editors in a row are displayed when the mouse passes over a row.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.CellEditorDisplayConditions.RowIsCurrent">
            <summary>All the cell editors in a row are displayed when the row is current.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.CellEditorDisplayConditions.CellIsCurrent">
            <summary>A cell's editor is displayed when it is current.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.CellEditorDisplayConditions.Always">
            <summary>    Cell editors are always displayed.     Including this value when setting the     CellEditorDisplayConditions property will have a significant     negative impact on performance.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ColumnWidthUnitType">
            <summary>Value indicating the type of value a ColumnWidth objects contains.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ColumnWidthUnitType.Pixel">
            <summary>The value is expressed as a pixel.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ColumnWidthUnitType.Star">
            <summary>The value is expressed as a weighted proportion in regards to the available space</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ConnectionLineAlignment">
            <summary>Value representing the alignment of the lines that connect the elements in a StaircasePanel together.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ConnectionLineAlignment.RightToBottom">
            <summary>The lines are aligned right to bottom.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ConnectionLineAlignment.LeftToBottom">
            <summary>The lines are aligned left to bottom.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ConnectionLineAlignment.RightToTop">
            <summary>The lines are aligned right to top.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ConnectionLineAlignment.LeftToTop">
            <summary>The lines are aligned left to top.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ConnectionLineAlignment.CenterToCenter">
            <summary>The lines are aligned center to center.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridUpdateSourceTrigger">
            <summary>Value representing the moment when data is to be written to the underlying data source.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridUpdateSourceTrigger.RowEndingEdit">
            <summary>The source is updated when a row exits edit mode.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridUpdateSourceTrigger.CellEndingEdit">
            <summary>The source is updated when a cell exits edit mode.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridUpdateSourceTrigger.CellContentChanged">
            <summary>The source is updated when the content of a cell is changed. Using this value will cause the source to be updated at every key stroke.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DistinctValuesConstraint">
            <summary>Value representing the constraint applied to the distinct values when automatically filtering data items.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DistinctValuesConstraint.All">
            <summary>No constraint is applied to the data items.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DistinctValuesConstraint.Filtered">
            <summary>Distinct values are constrained to the currently filtered list of values.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.EditTriggers">
            <summary>Value indicating what triggers will cause cells to enter edit mode.  " --></summary>
            <remarks>    The conditions under which cell editors are     displayed are determined by the value of the          CellEditorDisplayConditions     Property, which can be defined for the entire grid     or per row. The EditTriggers and     CellEditorDisplayConditions properties work     independently of each other. For example, if the     EditTriggers property is set to     None and the     CellEditorDisplayConditions property is set to     CellIsCurrent, when a cell becomes current,     its editor will be displayed and the content of the cell can be     edited when focus is given to the cell editor.     A cell editor can be displayed without it being     in edit mode.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.EditTriggers.None">
            <summary>No special triggers will cause cells to enter edit mode.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.EditTriggers.BeginEditCommand">
            <summary>Cells will enter edit mode when the Edit Command (default F2) is sent to the containing DataRow.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.EditTriggers.ClickOnCurrentCell">
            <summary>The current cell will enter edit mode when it is clicked.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.EditTriggers.SingleClick">
            <summary>Cells will enter edit mode when it is clicked.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.EditTriggers.CellIsCurrent">
            <summary>A cell will enter edit mode when it becomes current.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.EditTriggers.ActivationGesture">
            <summary>Cells will enter edit mode when the user performs the appropriate activation gesture for the current cell's editor.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.EditTriggers.RowIsCurrent">
            <summary>All cells in a row will enter edit mode when the row becomes current.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ItemScrollingBehavior">
            <summary>Value indicating how the data items in a grid are scrolled.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ItemScrollingBehavior.Deferred">
            <summary>The data items are not scrolled until the scroll thumb is released.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ItemScrollingBehavior.Immediate">
            <summary>The data items are scrolled immediately as the thumb is dragged.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.NavigationBehavior">
            <summary>Value indicating how the focus navigates from one element to another in a grid.</summary>
            <remarks>    The      CurrentItem and      SelectedItem/SelectedItems     properties must be set to $$NULL$$ in order to reset them when     the NavigationBehavior property is set to     None.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.NavigationBehavior.None">
            <summary>    Navigation is not permitted in a grid. Elements cannot     receive the focus.     The      CurrentItem and      SelectedItem/SelectedItems     properties must be set to $$NULL$$ in order to reset them when     the NavigationBehavior property is set to     None.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.NavigationBehavior.RowOnly">
            <summary>Navigation is row based. Cells will never receive the focus.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.NavigationBehavior.CellOnly">
            <summary>Navigation is cell based.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.NavigationBehavior.RowOrCell">
            <summary>Navigation is row based unless a cell in a row is clicked. If a cell is clicked, then navigation from cell to cell within the row is permitted. Once the focus is moved out of the row, navigation returns to row based.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.PagingBehavior">
            <summary>Value representing the paging behavior of a grid when the page-up and page-down buttons are pressed.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.PagingBehavior.TopToBottom">
            <summary>The grid pages from top to bottom.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.PagingBehavior.LeftToRight">
            <summary>The grid pages from left to right.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.PrimaryAxis">
            <summary>Value representing which axis of a DataRow must be completely visible in order to determine which DataRow will receive the focus when the page-up or page-down buttons are pressed.</summary>
            <remarks>    The primary axis determines which DataRow     will receive the focus when the page-up or page-down buttons     are pressed.     For example, let's assume that the focus is currently in     the top-left DataRow (item 0). If the page-down button is     pressed while the      ItemsPrimaryAxis Property is set to     Vertical, the DataRow on the     bottom-right whose vertical axis is completely visible will     receive the focus (item 3). If set to     Horizontal, the DataRow on     the bottom-right whose horizontal axis is completely visible     will receive the focus (item 2), while setting the property to     Both will send the focus to the     DataRow whose vertical and horizontal axes are     completely visible (item 1). Setting the     ItemsPrimaryAxis property to     None indicates that neither the vertical nor     horizontal axes need to be completely visible and thus the     focus will be sent to the last DataRow on the     bottom-right that is at least partially visible (item     4).          The ItemsPrimaryAxis property applies only when a     pixel-scrolling panel template is assigned to a grid's     ItemsPanel property. The default      VirtualizingStackPanel and      VirtualizingCardPanel panels use item-scrolling rather than     pixel-scrolling.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.PrimaryAxis.Vertical">
            <summary>The vertical axis must be completely visible (see item 3 in the image below).</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.PrimaryAxis.Horizontal">
            <summary>The horizontal axis ust be completely visible (see item 2 in the image below).</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.PrimaryAxis.Both">
            <summary>Both the vertical and horizontal axes must be completely visible (see item 1 in the image below).</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.PrimaryAxis.None">
            <summary>Neither the vertical nor horizontal axes must be completely visible (see item 4 in the image below).</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ScrollOrientation">
            <summary>Value representing the scroll bar orientation for the Scroll event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ScrollOrientation.None">
            <summary>No scroll bars.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ScrollOrientation.Horizontal">
            <summary>The horizontal scroll bar.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ScrollOrientation.Vertical">
            <summary>The vertical scroll bar.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.SortDirection">
            <summary>Value representing the direction in which a column's values are sorted.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.SortDirection.None">
            <summary>The column is not sorted.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.SortDirection.Ascending">
            <summary>The column's values are sorted in an ascending direction.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.SortDirection.Descending">
            <summary>The column's values are sorted in a descending direction.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ColumnWidth">
            <summary>Structure that represents the width of a column.</summary>
            <remarks>The ColumnWidth structure can be used with double values. Non-absolute values (ColumnWidthUnitType.Star) will return $$NULL$$.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnWidth.#ctor">
            <summary>Initializes a new instance of the ColumnWidth structure.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnWidth.#ctor(System.Double)">
            <summary>Initializes a new instance of the ColumnWidth structure using the specified absolute value in pixels.</summary>
            <param name="pixels">A double representing the number of device-independant pixels (96 pixels-per-inch) to use.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnWidth.#ctor(System.Double,Xceed.Wpf.DataGrid.ColumnWidthUnitType)">
            <summary>Initializes a new instance of the ColumnWidth structure using the specified absolute value in the provided ColumnWidthUnitType.</summary>
            <param name="value">The initial value contained by this instance.</param>
            <param name="type">A ColumnWidthUnitType representing the type of value.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnWidth.Equals">
            <summary>Determines if two (2) ColumnWidth structures are equal.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnWidth.Equals(System.Object)">
            <summary>Determines if the specified object is equal to the current ColumnWidth instance.</summary>
            <returns>true if the specified object has the same value and ColumnWidthUnitType as the current instance; false otherwise.</returns>
            <param name="obj">The object to compare with the current ColumnWidth instance.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnWidth.Equals(Xceed.Wpf.DataGrid.ColumnWidth)">
            <summary>Determines if the specified ColumnWidth is equal to the current ColumnWidth instance.</summary>
            <returns>true if the specified ColumnWidth has the same value and ColumnWidthUnitType as the current instance; false otherwise.</returns>
            <param name="columnWidth">The ColumnWidth to compare with the current ColumnWidth instance.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnWidth.GetHashCode">
            <summary>Retrieves the hash code for the ColumnWidth structure.</summary>
            <returns>A value representing the hash code for the current ColumnWidth instance.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnWidth.ToString">
            <summary>Returns a string representation of the ColumnWidth structure.</summary>
            <returns>The string representation of the current ColumnWidth instance.</returns>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnWidth.op_Equality">
            <summary>Compares two (2) ColumnWidth structures for equality.</summary>
            <returns>true if the instances have the same value and ColumnWidthUnitType; false otherwise.</returns>
            <param name="columnWidth1">The first ColumnWidth instance to compare.</param>
            <param name="columnWidth2">The second ColumnWidth instance ot compare.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnWidth.op_Implicit">
            <summary>Converts the specified value to a ColumnWidth structure or a double.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnWidth.op_Implicit">
            <summary>Converts the specified double value to a ColumnWidth structure.</summary>
            <returns>A ColumnWidth structure containing the provided absolute value in pixels.</returns>
            <param name="columnWidth">The double to convert.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnWidth.op_Implicit">
            <summary>Converts the specified ColumnWidth structure value to a double structure.</summary>
            <returns>A double representing the absolute value in pixels of the provided ColumnWidth structure.</returns>
            <param name="columnWidth">The ColumnWidth to convert.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnWidth.op_Inequality">
            <summary>Compares two (2) ColumnWidth structures for inequality.</summary>
            <returns>true if the instances do not have the same value and ColumnWidthUnitType; false otherwise.</returns>
            <param name="columnWidth1">The first ColumnWidth instance to compare.</param>
            <param name="columnWidth2">The second ColumnWidth instance ot compare.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnWidth.UnitType">
            <summary>Gets the ColumnWidthUnitType used by the ColumnWidth structure.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnWidth.Value">
            <summary>Gets a double that represents the value of the ColumnWidth structure.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupHeaderFooterItem">
            <summary>Structure that represents a container created from a template in the header or footer sections of a group.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.#ctor(System.Windows.Data.CollectionViewGroup,System.Object)">
            <summary>Initializes a new instance of the GroupHeaderFooterItem structure specifying the group to which the item belongs as well as the template that was used to create it.</summary>
            <param name="collectionViewGroup">A CollectionViewGroup representing the group to which the item belongs.</param>
            <param name="template">An object representing the template the was used to create the item. Normally, a DataTemplate or a  GroupHeaderFooterItemTemplate.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.Equals">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <returns>true if the instances are of the same type and represent the same value; false otherwise.</returns>
            <param name="obj">The object to compare to.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.Equals(Xceed.Wpf.DataGrid.GroupHeaderFooterItem)">
            <summary>Indicates whether this instance and a specified GroupHeaderFooterItem are equal.</summary>
            <returns>true if the instances are of the same type and represent the same value; false otherwise.</returns>
            <param name="item">The GroupHeaderFooterItem to compare to.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.Equals(Xceed.Wpf.DataGrid.GroupHeaderFooterItem,Xceed.Wpf.DataGrid.GroupHeaderFooterItem)">
            <summary>Indicates whether the GroupHeaderFooterItem instances are equal.</summary>
            <returns>true if the instances are of the same type and represent the same value; false otherwise.</returns>
            <param name="item1">The first GroupHeaderFooterItem to compare.</param>
            <param name="item2">The second GroupHeaderFooterItem to compare.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.GetHashCode">
            <summary>Returns the hash code for the current instance.</summary>
            <returns>A value representing the hash code for the current instance.</returns>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.op_Equality">
            <summary>Tests if the two GroupHeaderFooterItem instances are equivalent.</summary>
            <returns>true if both items are equal; false otherwise.</returns>
            <param name="item1">The first GroupHeaderFooterItem to test for equality.</param>
            <param name="item2">The second GroupHeaderFooterItem to test for equality.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.op_Inequality">
            <summary>Tests if the two GroupHeaderFooterItem instances are different.</summary>
            <returns>true it the items are different; false otherwise.</returns>
            <param name="item1">The first GroupHeaderFooterItem to test for inequality.</param>
            <param name="item2">The second GroupHeaderFooterItem to test for inequality.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.Group">
            <summary>Retrieves the group to which the item belongs.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.Template">
            <summary>Retrieves the template that was used to create the item.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupHeaderFooterItem.Empty">
            <summary>Retrieves an empty GroupHeaderFooterItem structure.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ActivationGesture">
            <summary>Represents a key or text gesture that causes an element to enter edit mode.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ActivationGestureCollection">
            <summary>Represents a dynamic ActivationGesture collection that provides notifications when items are added, removed, or when the collection is refreshed. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ActivationGestureCollection.#ctor">
            <summary>Initializes a new instance of the  ActivationGestureCollection class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.AutoFilterControl">
            <summary>Control that is displayed in a column-manager cell when automatic filtering is enabled. </summary>
            <remarks>If a column does not need to support automatic filtering, it is recommended to set its corresponding DataGridItemProperty's  CalculateDistinctValues to false or set the DataGridCollectionViewSource or DataGridDetailDescription's  DefaultCalculateDistinctValues properties to false and only set CalculateDistinctValues to true for the item properties that will support auto-filtering</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.AutoFilterControl.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.AutoFilterControl.OnReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <param name="e"/>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.AutoFilterControl.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the AutoFilterControl class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or  theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.AutoFilterColumn">
            <summary>Gets or sets the column whose  auto-filter values will be managed by the auto-filter control.</summary>
            <remarks>    Auto-filtering controls that have the same target column     should also have the same selection mode.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.AutoFilterContext">
            <summary>Gets or sets the auto-filter control's data-grid context.</summary>
            <remarks>This property only needs to be set when the auto-filter control is used outside of a grid.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.AutoFilterFieldName">
            <summary>    Gets or sets a value representing the field name of the     column whose auto-filter values will be managed by the     auto-filter control.</summary>
            <remarks>Although the AutoFilterFieldName and  AutoFilterColumn properties can both identify the column whose auto-filter values will be managed by the auto-filter control, it is recommended to use the AutoFilterFieldName property rather than the AutoFilterColumn property to specify the target column when the columns are not automatically created by a grid.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.AutoFilterIndex">
            <summary>Gets or sets a value indicating the order in which the auto-filter control's column is filtered.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.ClearAutoFilterText">
            <summary>Gets or sets the text that is displayed in the auto-filter control's "Clear" button.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.DistinctValueItemContainerStyle">
            <summary>Gets or sets the style that is applied to the container element for each distinct value in the auto-filter control.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.DistinctValueItemContainerStyleSelector">
            <summary>    Gets or sets the style selector that selects the     appropriate style to apply to each container element.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.DistinctValueItemTemplate">
            <summary>Gets or sets the data template used to display each distinct value.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.DistinctValueItemTemplateSelector">
            <summary>Gets or sets the data-template selector that selects the appropriate template for a distinct value.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.DistinctValuesHost">
            <summary>Gets the Selector that contains the distinct values displayed by the auto-filter control.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.HasAutoFilterValues">
            <summary>Gets a value indicating whether the auto-filter control is currently filtering the contents of the  AutoFilterColumn.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.AutoFilterControl.HasDistinctValues">
            <summary>    Gets a value indicating whether the auto-filter control     contains the distinct values of the      AutoFilterColumn, indicating that it can be automatically     filtered.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.AutoFilterColumnProperty">
            <summary>Identifies the  AutoFilterColumn dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.AutoFilterContextProperty">
            <summary>Identifies the  AutoFilterContext dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.AutoFilterFieldNameProperty">
            <summary>Identifies the  AutoFilterFieldName dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.AutoFilterIndexProperty">
            <summary>Identifies the  AutoFilterIndex dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.ClearAutoFilterTextProperty">
            <summary>Identifies the  ClearAutoFilterText dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.ClearAutoFilterValues">
            <summary>Represents the ClearAutoFilterValues command, which requests that the auto-filter column's  AutoFilterValues property be cleared. </summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.DistinctValueItemContainerStyleProperty">
            <summary>Identifies the  DistinctValueItemContainerStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.DistinctValueItemContainerStyleSelectorProperty">
            <summary>Identifies the  DistinctValueItemContainerStyleSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.DistinctValueItemTemplateProperty">
            <summary>Identifies the  DistinctValueItemTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.DistinctValueItemTemplateSelectorProperty">
            <summary>Identifies the  DistinctValueItemTemplateSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.HasAutoFilterValuesProperty">
            <summary>Identifies the  HasAutoFilterValues dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.AutoFilterControl.HasDistinctValuesProperty">
            <summary>Identifies the  HasDistinctValues dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.AutoFilterPopup">
            <summary>The AutoFilterPopup class represents the popup that contains the AutoFilterControl, which is displayed in a column-manager cell to allow its associated column to be automatically filtered. </summary>
            <remarks>The AutoFilterPopup will not close when a click is detected inside its child items but will close when a click occurs outside the popup or a grid.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.AutoFilterPopup.#ctor">
            <summary>Initializes a new instance of the AutoFilterPopup class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.AutoFilterPopup.OnClosed(System.EventArgs)">
            <summary>Responds to the condition in which the value of the IsOpen property is changed from true to false.</summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.AutoFilterPopup.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled Mouse.MouseDown attached event reaches an element in its route that is derived from this class.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.CancelRoutedEventArgs">
            <summary>Provides information and event data on a cancelable routed event.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CancelRoutedEventArgs.#ctor">
            <summary>Initializes a new instance of the CancelRoutedEventArgs class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CancelRoutedEventArgs.#ctor">
            <summary>Initializes a new instance of the CancelRoutedEventArgs class</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CancelRoutedEventArgs.#ctor(System.Windows.RoutedEvent)">
            <summary>Initializes a new instance of the CancelRoutedEventArgs class, using the supplied routed event identifier.</summary>
            <param name="routedEvent">The identifier for the routed event.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CancelRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object)">
            <summary>Initializes a new instance of the CancelRoutedEventArgs class, using the supplied routed event identifier and providing the opportunity to declare a different source for the event.</summary>
            <param name="routedEvent">The identifier for the routed event.</param>
            <param name="source">An alternate source that will be reported when the event is handled. This pre-populates the Source property</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CancelRoutedEventArgs.Cancel">
            <summary>Gets or sets a value that allows the routed event to be canceled.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Cell">
            <summary>Represents a cell in a grid, which is a ContentControl used to display the value of a property in a data item.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.BeginEdit">
            <summary>Signals the beginning of the edit process and places the cell in edit mode.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.CancelEdit">
            <summary>Cancels the edit process. Any modifications made to the cell's content will be lost.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.ClearContainer">
            <summary>Clears the content of the cell.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.EndEdit">
            <summary>Signals the end of the edit process.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.GetCellEditor">
            <summary>Retrieves the cell editor that is used, or that will be used, to edit the content of the cell.</summary>
            <returns>The CellEditor that is used, or that will be used, to edit the content of the cell. If the parent column's CellEditor property is $$NULL$$, a new instance of the appropriate cell editor will be created.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.GetFittedWidth">
            <summary>Retrieves the fitted width of the cell, in device-independent units (1/96th inch per unit).</summary>
            <returns>A value representing the fitted width of the cell, in device-independent units (1/96th inch per unit).</returns>
            <remarks>The fitted width of the cell represents the width necessary to display its content, on one line.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.GetIsCellFocusScope(System.Windows.DependencyObject)">
            <summary>Gets the value of the IsCellFocusScope attached property for the specified dependency object.</summary>
            <returns>The IsCellFocusScope property value for the dependency object. By default, false.</returns>
            <remarks>This property is used when a CellEditor is activated. It can be set on a input control (in the  CellEditor.EditTemplate) that will receive the initial focus when the cell enters edit mode. Its usage is optional. If omitted, the focus will be set on the first focusable control found.</remarks>
            <param name="obj">The dependency object form which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.Initialize(Xceed.Wpf.DataGrid.DataGridContext,Xceed.Wpf.DataGrid.Row,Xceed.Wpf.DataGrid.Column)">
            <summary>Initializes the cell specifying its parent DataGridControl, Row, and Column.</summary>
            <param name="dataGridContext">A reference to the cell's DataGridContext.</param>
            <param name="parentRow">A reference to the cell's parent Row.</param>
            <param name="parentColumn">A reference to the cell's parent Column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.InitializeCore(Xceed.Wpf.DataGrid.DataGridContext,Xceed.Wpf.DataGrid.Row,Xceed.Wpf.DataGrid.Column)">
            <summary>Called after the Initialize method to allow custom initialization.</summary>
            <param name="dataGridContext">A reference to the cell's DataGridContext.</param>
            <param name="parentRow">A reference to the cell's parent Row.</param>
            <param name="parentColumn">A reference to the cell's parent Row.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnEditBeginning(Xceed.Wpf.DataGrid.CancelRoutedEventArgs)">
            <summary>Raises the EditBeginning event, which signals that the edit process is about to begin.</summary>
            <param name="e">A CancelRoutedEventArgs that contains the event data and that can prevent the edit process from beginning.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnEditBegun">
            <summary>Raises the EditBegun event, which signals that the edit process has begun.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnEditCanceled">
            <summary>Raises the EditCanceled event, which signals that the edit process has been canceled.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnEditCanceling">
            <summary>Raises the EditCanceling event, which signals that the edit process is being canceled.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnEditEnded">
            <summary>Raises the EditEnded event, which signals that the edit process has ended.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnEditEnding(Xceed.Wpf.DataGrid.CancelRoutedEventArgs)">
            <summary>Raises the EditEnding event, which signals that the edit process is about to end.</summary>
            <param name="e">A CancelRoutedEventArgs that contains the event data and that can prevent the edit process from ending.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>Invoked when an unhandled GotFocus attached event reaches this element in its route.</summary>
            <param name="e">An RoutedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled MouseEnter attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled MouseLeave attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>Invoked when an unhandled PreviewGotKeyboardFocus attached event reaches this element in its route.</summary>
            <param name="e">A KeyboardFocusChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>Invoked when an unhandled PreviewKeyDown attached event reaches this element in its route.</summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled PreviewMouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>Invoked when an unhandled PreviewTextInput attached event reaches this element in its route.</summary>
            <param name="e">A TextCompositionEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.PostInitialize">
            <summary>Concludes the initialization of the cell.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the Cell class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or  theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Cell.SetIsCellFocusScope(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets the value of the IsCellFocusScope attached property to the specified dependency object.</summary>
            <remarks>This property is used when a CellEditor is activated. It can be set on a input control (in the  CellEditor.EditTemplate) that will receive the initial focus when the cell enters edit mode. Its usage is optional. If omitted, the focus will be set on the first focusable control found.</remarks>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">The needed boolean value.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.CellErrorStyle">
            <summary>Gets or sets the style that will be used by the cell when its content fails the validation process.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.CellValidationRules">
            <summary>Gets the list of  CellValidationRules against which a cell's content is validated before the cell exists edit mode.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.CoercedContentTemplate">
            <summary>Gets the template that is currently being used.</summary>
            <remarks>The coerced template can correspond to the  CellContentTemplate, the  EditTemplate defined by a cell editor, or any other DataTemplate that was coerced to display/edit a cell's content.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.CurrentBackground">
            <summary>Gets or sets the brush that will be used to paint the cell's background when the cell becomes current.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.CurrentForeground">
            <summary>Gets or sets the brush that will be used to paint the cell's foreground when the cell becomes current.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.FieldName">
            <summary>Gets or sets the field name of the parent column.</summary>
            <remarks>    Under normal circumstances, the cell's     FieldName property would have been readonly;     however, in the case where the cell is not contained in a row,     the FieldName property must be set to the     field name of the desired parent column.     If the cell is contained in a row and has a ParentColumn,     then it is not recommended to modify the value of this     property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.HasValidationError">
            <summary>Gets a value indicating whether the cell's content failed the validation process.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.IsBeingEdited">
            <summary>Gets a value indicating whether the cell is being edited.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.IsCellEditorDisplayed">
            <summary>Gets a value indicating whether the cell's editor is displayed.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.IsCurrent">
            <summary>Gets a value indicating whether the cell is the current cell.</summary>
            <remarks>    The background and foreground of the cell will be painted     according to the values of the      CurrentBackground and      CurrentForeground properties when the cell is     current.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.IsDirty">
            <summary>Gets a value indicating whether the content of the cell has been modified since it entered edit mode.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.IsValidationErrorRestrictive">
            <summary>Gets a value indicating whether the validation rule that failed prevents the focus from moving to another row until the error is fixed.</summary>
            <remarks>Currently, only errors reported through IDataErrorInfo are considered non-restrictive.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.OverrideColumnCellContentTemplate">
            <summary>Gets a value indicating whether the cell inherits the template provided by the parent column's  CellContentTemplate property.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.ParentColumn">
            <summary>Gets the cell's parent column.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.ParentRow">
            <summary>Gets the cell's parent row.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.ReadOnly">
            <summary>Gets or sets a value indicating whether the cell is readonly.</summary>
            <remarks>A cell will be readonly if its parent row's ReadOnly or parent grid's  ReadOnly properties have been set to true.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Cell.ValidationError">
            <summary>Gets or sets information about the validation rule that failed the validation process.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.CellErrorStyleProperty">
            <summary>Identifies the CellErrorStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.CoercedContentTemplateProperty">
            <summary>Identifies the  CoercedContentTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.CurrentBackgroundProperty">
            <summary>Identifies the  CurrentBackground dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.CurrentForegroundProperty">
            <summary>Identifies the  CurrentForeground dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.EditBeginningEvent">
            <summary>Identifies the EditBeginning routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.EditBegunEvent">
            <summary>Identifies the EditBegun routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.EditCanceledEvent">
            <summary>Identifies the EditCanceled routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.EditCancelingEvent">
            <summary>Identifies the EditCanceling routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.EditEndedEvent">
            <summary>Identifies the EditEnded routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.EditEndingEvent">
            <summary>Identifies the EditEnding routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.HasValidationErrorProperty">
            <summary>Identifies the  HasValidationError dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.IsBeingEditedProperty">
            <summary>Identifies the IsBeingEdited dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.IsCellFocusScopeProperty">
            <summary>Identifies the IsCellFocusScope attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.IsCurrentProperty">
            <summary>Identifies the IsCurrent dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.IsDirtyProperty">
            <summary>Identifies the IsDirty dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.IsValidationErrorRestrictiveProperty">
            <summary>Identifies the  IsValidationErrorRestrictive dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.ParentColumnProperty">
            <summary>Identifies the ParentColumn dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.ParentRowProperty">
            <summary>Identifies the ParentRow dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.ReadOnlyProperty">
            <summary>Identifies the ReadOnly dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Cell.ValidationErrorProperty">
            <summary>Identifies the ValidationError dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Cell.EditBeginning">
            <summary>Raised when the BeginEdit method has been called to signal that the edit process is about to begin.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Cell.EditBegun">
            <summary>Raised after the EditBeginning event to signal that the edit process has begun.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Cell.EditCanceled">
            <summary>Raised after the EditCanceling event to signal that the edit process has been canceled.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Cell.EditCanceling">
            <summary>Raised when the CancelEdit method has been called to signal that the edit process is being canceled.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Cell.EditEnded">
            <summary>Raised after the EditEnding event to signal that the edit process has ended.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Cell.EditEnding">
            <summary>Raised when the EndEdit method has been called to signal that the edit process is about to end.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Cell.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.CellCollection">
            <summary>Represents a dynamic cell collection that provides notifications when items are added, removed, or when the collection is refreshed.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellCollection.#ctor">
            <summary>Initializes a new instance of the CellCollection class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellCollection.ClearItems">
            <summary>Removes all cells from the collection.</summary>
            <remarks>This method will raise the CollectionChanged event.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellCollection.InsertItem(System.Int32,Xceed.Wpf.DataGrid.Cell)">
            <summary>Inserts a cell at the specified index.</summary>
            <remarks>This method will raise the CollectionChanged event.</remarks>
            <param name="index">The zero-based index at which to insert item.</param>
            <param name="item">The cell to insert. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellCollection.RemoveItem(System.Int32)">
            <summary>Removes the cell at the specified index.</summary>
            <remarks>This method will raise the CollectionChanged event.</remarks>
            <param name="index">The zero-based index of the cell to remove.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellCollection.SetItem(System.Int32,Xceed.Wpf.DataGrid.Cell)">
            <summary>Replaces an existing cell with the specified item.</summary>
            <remarks>This method will raise the CollectionChanged event.</remarks>
            <param name="index">The zero-based index of the cell to replace.</param>
            <param name="item">The new cell that will replace the existing cell at the specified index.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellCollection.Item">
            <summary>Retrieves a Cell from the collection.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellCollection.Item(Xceed.Wpf.DataGrid.Column)">
            <summary>Retrieves the cell with the specified parent column from the collection.</summary>
            <param name="column">A Column representing the current column of the cell.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellCollection.Item(System.String)">
            <summary>Retrieves the cell with the specified field name from the collection.</summary>
            <param name="fieldName">A string representing the field name of the cell to retrieve from the collection.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.CellContentPresenter">
            <summary>Displays the content of a cell.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellContentPresenter.#ctor">
            <summary>Initializes a new instance of the CellContentPresenter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellContentPresenter.EndInit">
            <summary>    Signals the object that initialization is     complete.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.CellEditor">
            <summary>Contains the information required to display the template that will be used to edit the content of a cell as well as the activation gestures that activation the template.</summary>
            <remarks>    The data template that will     be used to edit the content of a cell is specified through the          EditTemplate property while the activation gestures that     are supported by the CellEditor are contained     in the      ActivationGestures collection.     Custom cell editors can be provided per column by setting     a column's      CellEditor property, or per data type through the     DataGridControl.DefaultCellEditors     property.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellEditor.#ctor">
            <summary>Initializes a new instance of the CellEditor class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellEditor.GetHasError(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether the value being edited by the cell editor is in error.</summary>
            <returns>true if the value being edited by the cell editor is in error; false otherwise.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellEditor.SetHasError(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether the value being edited by the cell editor is in error.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">true if the value being edited by the cell editor is in error; false otherwise.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellEditor.ActivationGestures">
            <summary>Retrieves a collection of the activation gestures supported by the cell editor.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellEditor.CheckBoxEditor">
            <summary>Gets a static instance of a CheckBox control that will be used by default for cells that have boolean content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellEditor.DatePickerEditor">
            <summary>Gets a static instance of a DatePicker control that will be used by default for cells that have date-time content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellEditor.EditTemplate">
            <summary>Gets or sets the data template that will be used to edit the content of a cell.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellEditor.TextBoxEditor">
            <summary>Gets a static instance of a AutoSelectorTextBox control that will be used by default for cells that have text content.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.CellEditor.EditTemplateProperty">
            <summary>Identifies the  EditTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.CellEditor.HasErrorProperty">
            <summary>Identifies the HasError attached property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.CellValidatingEventArgs">
            <summary>Provides information on the value to be validated.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellValidatingEventArgs.#ctor(System.Object,System.Globalization.CultureInfo,Xceed.Wpf.DataGrid.CellValidationContext)">
            <summary>Initializes a new instance of the  CellValidatingEventArgs class specifying the value to validate as well as the validation context.</summary>
            <param name="value">The value to validate.</param>
            <param name="culture">The CultureInfo for the value.</param>
            <param name="context">The validation context of the value to validate. The validation context includes both the associated cell and data item.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidatingEventArgs.Context">
            <summary>Gets the validation context of the value to validate. The validation context includes both the associated cell and data item.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidatingEventArgs.Culture">
            <summary>Gets the CultureInfo for the value.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidatingEventArgs.Result">
            <summary>Represents the result returned by a validation rule's Validate method that indicates whether the value passed the validation process.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidatingEventArgs.Value">
            <summary>Gets the value to validated.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.CellValidationContext">
            <summary>The validation context in which the cell content is validated. The validation context contains the  cell and  data item relative to the content being validated.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellValidationContext.#ctor(System.Object,Xceed.Wpf.DataGrid.Cell)">
            <summary>Initializes a new instance of the CellValidationContext class specifying the cell and data item.</summary>
            <param name="dataItem">The data item from which the value to be validated has been retrieved.</param>
            <param name="cell">The cell in which the value to be validated is contained.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidationContext.Cell">
            <summary>Gets the cell in which the value to be validated is contained.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidationContext.DataItem">
            <summary>Gets the data item from which the value to be validated has been retrieved.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.CellValidationError">
            <summary>Represents the error that is provided when the value of a cell fails the UI-level validation process.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.CellValidationError.#ctor(Xceed.Wpf.DataGrid.ValidationRules.CellValidationRule,Xceed.Wpf.DataGrid.Cell,System.Object,System.Exception)">
            <summary>Initializes a new instance of the CellValidationError class specifying various information on the validation rule that caused the caused the value to fail the validation process.</summary>
            <param name="ruleInError">    The      CellValidationRule that     contains the validation rule that failed.</param>
            <param name="cellInError">The cell whose value failed the validation process.</param>
            <param name="errorContent">An object containing the content to display when an error occurs.</param>
            <param name="exception">The exception that was raised when the value failed the validation process. Can be $$NULL$$.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidationError.CellInError">
            <summary>Gets the cell whose value failed the UI-level validation process.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidationError.ErrorContent">
            <summary>Gets an object containing the error content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidationError.Exception">
            <summary>Gets the exception that was raised when the value failed the UI-level validation process.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.CellValidationError.RuleInError">
            <summary>Gets the  CellValidationRule that caused the value to fail the UI-level validation process.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Column">
            <summary>Represents a column, which defines information on how the Cells it contains are displayed and their content edited.</summary>
            <remarks>    The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Column.#ctor">
            <summary>Initializes a new instance of the Column class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Column.#ctor">
            <summary>    Initializes a new instance of the Column     class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Column.#ctor(System.String,System.Object,System.Windows.Data.BindingBase)">
            <summary>Initializes a new instance of the Column class specifying its field name, title, and  binding.</summary>
            <param name="fieldName">A string representing the field name of the column.</param>
            <param name="title">The data displayed in a column's corresponding ColumnManagerCell and/or GroupByItem.</param>
            <param name="displayMemberBinding">The binding to apply to the data item.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Column.GetFittedWidth">
            <summary>Retrieves the fitted width of the column, in device-independent units (1/96th inch per unit).</summary>
            <returns>The fitted width of the column, in device-independent units (1/96th inch per unit).</returns>
            <remarks>The fitted width of a column represents the width necessary to display the entire content of the column's cells on one line. Only the items that are displayed in a grid's viewport—the "realized" items—will be used when calculating the fitted width of a column.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Column.OnPropertyChanged">
            <summary>Raises the  PropertyChanged event.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Column.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the  PropertyChanged event using the specified PropertyChangedEventArgs.</summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.ActualWidth">
            <summary>    Gets the actual width of the column considering the     Width,     MinWidth,     and MaxWidth     properties.</summary>
            <remarks>    Along with the Width     property, the MinWidth     and MaxWidth     properties can be used to specify width information. If there     is a conflict between these values, the order of application     for actual width determination is first     MinWidth must be honored, then     MaxWidth, and finally if each of these are     within bounds, Width.     In order for a column to have a fixed size, the     MinWidth and MaxWidth     properties must be set to the same value.     If Width is set to a value greater than     MaxWidth, ActualWidth will be     equal to MaxWidth. If Width is set to a value     lesser than MinWidth or, if     MaxWidth is inferior to     MinWidth, ActualWidth will     become equal to MinWidth.     The return value of this property is always the same as     any value that was set to it. In contrast, the value of the     ActualWidth property may vary if the suggested     width has been rejected by the layout.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.AutoFilterControlStyle">
            <summary>Gets or sets the style that will be used by the column's associated AutoFilterControl. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.AutoFilterIndex">
            <summary>Gets a value representing the order in which the column's values were automatically filtered. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.AutoFilterValues">
            <summary>Gets a list of values by which the data items in a grid are automatically filtered. This property cannot be used in XAML. </summary>
            <remarks>    The auto-filter values that are used to automatically     filter a column's values can be cleared by calling the     Clear method of any     AutoFilterValues collection, using the "Clear"     button in the default auto-filter drop down, or by handling the     auto-filter control's ClearAutoFilterValues     command.     The ClearAutoFilterValues command can be     used to clear auto-filter values by assigning it to the     Command property of the desired control     (usually a Button) and setting the     CommandParameter property to the column whose     auto-filter values are to be cleared and the     CommandTarget property to the target the     auto-filter control.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.CellContentTemplate">
            <summary>Gets or sets the DataTemplate used to display the cells' content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.CellContentTemplateSelector">
            <summary>Gets or sets a DataTemplateSelector that provides a way to apply a different  CellContentTemplate based on custom logic.</summary>
            <remarks>    To provide a custom     DataTemplateSelector, a class that derives     from the DataTemplateSelector and override the     SelectTemplate method that will return the     appropriate DataTemplates.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.CellEditor">
            <summary>Gets or sets the CellEditor that contains the information required to display the template that will be used to edit the content of the cells contained in the column as well as the activation gestures that activate the template.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.CellEditorDisplayConditions">
            <summary>Gets or sets a value indicating under what conditions the editors for the cells contained in the column are displayed.</summary>
            <remarks>    Including Always when setting the     CellEditorDisplayConditions property will have     a significant negative impact on performance.     If MouseOverCell and/or     MouseOverRow are included, the "blinking"     effect that can occur if a cell editor's height is larger than     the cell or row height, can be prevented by setting the cell or     row's MinHeight property, via a style, to the     height of the largest cell editor.     Setting the CellEditorDisplayConditions     property at the column level will override the value of the     DataGridControl.CellEditorDisplayConditions     property for the specific column only.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.CellErrorStyle">
            <summary>Gets or sets the style that will be used by the cells contained in the column when their content fails the validation process.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.CellValidationRules">
            <summary>Gets the list of  CellValidationRules against which the content of the cells contained in the column are validated before they exist edit mode.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.DisplayMemberBinding">
            <summary>Gets or sets the binding to apply to the data item.</summary>
            <remarks>    By default, a grid will automatically create a column for     each property in the data item. In this case, columns that are     manually added to a grid's      Columns will be linked to any auto-generated columns which     have the same field     name. Any other column properties that have been explicitly     set (e.g., Width)     will override the values of the auto-generated columns.     If the grid's      AutoCreateColumns property. is set to     false (by default, true), the     grid will not automatically create a column for each property     in the data item. In this case, columns must be added manually     to the grid's column collection and the     DisplayMemberBinding property set to the     BindingBase object that represents the binding     to apply to the data item. The FieldName     property must also be set in order to provide the column with a     unique identifier and an     ExceptionValidationRule added to the binding's     ValidationRules property to properly handle     any exceptions that might be raised.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.DisplayMemberBindingInfo">
            <summary>Gets or sets the binding information between a column and its corresponding field in the underlying data source.</summary>
            <remarks>Unless the ValidationRules collection is cleared, it will always contain an ExceptionValidationRule and DataErrorValidationRule. If the DataErrorValidationRule is excluded from the collection of validation rules, validation errors reported by IDataErrorInfo will be ignored.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.DistinctValues">
            <summary>Gets a list of the column's distinct values, which will be used to automatically filter its values. </summary>
            <remarks>    When using an auto-filter control outside of a grid, a     ListBox or Selector-based     control identified as the PART_DistinctValuesHost     template part must be specified in its     template and the      AutoFilterColumn property set to the column in a grid whose     values are to be filtered. The ItemsSource     property of the control specified in the template must also be     bound to the      DistinctValues collection of the auto-filter column.     The values that are selected in the auto-filter control     reflect the content of the target column's      AutoFilterValues property. Both the auto-filter control and     the AutoFilterValues property will be     synchronized when either changes. Auto-filtering controls that     have the same target column should also have the same selection     mode.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.FieldName">
            <summary>Gets or sets the case-sensitive field name that uniquely identifies the column in a grid's  column collection.</summary>
            <remarks>When sorting and/or grouping data items, the name of the property in the data item and the value of the FieldName property must be identical otherwise neither sorting nor grouping will work.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.GroupConfiguration">
            <summary>Gets or sets the group configuration that will be applied to the groups that are created from the values of this column.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.GroupDescription">
            <summary>Gets or sets the group description that is used whenever groups are created according to the values of this column.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.GroupValueTemplate">
            <summary>Gets or sets the template that will be used by a group to display its value when the group is created according the values of the column.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.GroupValueTemplateSelector">
            <summary>Gets or sets a DataTemplateSelector that provides a way to apply a different  GroupValueTemplates based on custom logic.</summary>
            <remarks>To provide a custom DataTemplateSelector, a class that derives from the DataTemplateSelector class and overrides the SelectTemplate method to return the appropriate DataTemplate, must be created.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.HasFixedWidth">
            <summary>Gets a value indicating whether the column has a fixed width.</summary>
            <remarks>    In order for a column to have a fixed size, the     MinWidth and MaxWidth     properties must be set to the same value.     Along with the Width     property, the MinWidth     and MaxWidth     properties can be used to specify width information. If there     is a conflict between these values, the order of application     for actual width determination is first     MinWidth must be honored, then     MaxWidth, and finally if each of these are     within bounds, Width.     If Width is set to a value greater than     MaxWidth,      ActualWidth will be equal to MaxWidth. If     Width is set to a value lesser than MinWidth     or, if MaxWidth is inferior to     MinWidth, ActualWidth will     become equal to MinWidth.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.HasValidationError">
            <summary>Gets a value indicating whether the content of one of the cells contained in the column failed the validation process.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.Index">
            <summary>Gets the index of the column in a grid's Column collection.</summary>
            <remarks>    The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.IsFirstVisible">
            <summary>Gets a value indicating whether the column is the first visible column in a grid's.</summary>
            <remarks>The first and last visible columns may or may not be visible in a grid's viewport.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.IsLastVisible">
            <summary>Gets a value indicating whether the column is the last visible column in a grid.</summary>
            <remarks>The first and last visible columns may or may not be visible in a grid's viewport.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.IsMainColumn">
            <summary>Gets or sets a value indicating whether the column is a grid's main (primary) column.</summary>
            <remarks>    By default, when a grid is in     a card-view layout, the data displayed in a card's title is     determined by a grid's main (primary) column. The content of     the cell whose field name matches the field name of the main     column will be displayed in the corresponding card's     title. If left unmodified,     the main column will be the first column that is added to a     grid's      Columns collection; however,     the main column can be changed by setting a column's      IsMainColumn property to     true.     The      CellContentTemplate of the main column is also used to     display the default content of the scrolltip.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.MaxWidth">
            <summary>Gets or sets the maximum width of the column, in device-independent units (1/96th inch per unit).</summary>
            <remarks>    Along with the Width     property, the MinWidth     and MaxWidth     properties can be used to specify width information. If there     is a conflict between these values, the order of application     for actual width determination is first     MinWidth must be honored, then     MaxWidth, and finally if each of these are     within bounds, Width.     In order for a column to have a fixed size, the     MinWidth and MaxWidth     properties must be set to the same value.     If Width is set to a value greater than     MaxWidth,      ActualWidth will be equal to MaxWidth. If     Width is set to a value lesser than     MinWidth or, if MaxWidth is     inferior to MinWidth,     ActualWidth will become equal to     MinWidth.     The return value of this property is always the same as     any value that was set to it. In contrast, the value of the     ActualWidth may vary if the suggested width     has been rejected by the layout.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.MinWidth">
            <summary>Gets or sets the minimum width of the column, in device-independent units (1/96th inch per unit).</summary>
            <remarks>    Along with the Width     property, the MinWidth and MaxWidth     properties can be used to specify width information. If there     is a conflict between these values, the order of application     for actual width determination is first     MinWidth must be honored, then     MaxWidth, and finally if each of these are     within bounds, Width.     In order for a column to have a fixed size, the     MinWidth and MaxWidth     properties must be set to the same value.     If Width is set to a value greater than     MaxWidth,      ActualWidth will be equal to MaxWidth. If     Width is set to a value lesser than     MinWidth or, if MaxWidth is     inferior to MinWidth,     ActualWidth will become equal to     MinWidth.     The return value of this property is always the same as     any value that was set to it. In contrast, the value of the     ActualWidth property may vary if the suggested     width has been rejected by the layout.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.ReadOnly">
            <summary>Gets or sets a value indicating whether the content of the cells in the column can be edited.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.SortDirection">
            <summary>Gets a value indicating the direction in which the values contained in the column are sorted.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.SortIndex">
            <summary>Gets the sort index of the column.</summary>
            <remarks>The sort index represents the order in which the column was sorted. For example, if 2 columns are sorted, the first one that was sorted will have its SortIndex property set to 0 while the second will have its SortIndex property set to 1. Columns which are not sorted will have their SortIndex property set to -1.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.TextTrimming">
            <summary>    Gets or sets a value that indicates the text trimming     behavior to employ when textual content     overflows the content area.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.TextWrapping">
            <summary>Gets or sets a value indicating how textual content should be wrapped.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.Title">
            <summary>Gets or sets the data displayed in a column's corresponding ColumnManagerCell and/or GroupByItem.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.TitleTemplate">
            <summary>Gets or sets the DataTemplate used to display the Title's content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.TitleTemplateSelector">
            <summary>Gets or sets a DataTemplateSelector that provides a way to apply a different TitleTemplates based on custom logic.</summary>
            <remarks>To provide a custom DataTemplateSelector, a class that derives from the DataTemplateSelector class and overrides the SelectTemplate method to return the appropriate DataTemplate, must be created.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.Visible">
            <summary>Gets or sets a value indicating whether the column is visible.</summary>
            <remarks>    The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.VisiblePosition">
            <summary>Gets or sets the visible position of the column.</summary>
            <remarks>    The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Column.Width">
            <summary>Gets or sets the width of the column, in device-independent units (1/96th inch per unit).</summary>
            <remarks>    Along with the Width property, the     MinWidth     and MaxWidth     properties can be used to specify width information. If there     is a conflict between these values, the order of application     for actual width determination is first     MinWidth must be honored, then     MaxWidth, and finally if each of these are     within bounds, Width.     In order for a column to have a fixed size, the     MinWidth and MaxWidth     properties must be set to the same value.     If Width is set to a value greater than     MaxWidth, will be equal to     MaxWidth. If Width is set to     a value lesser than MinWidth or, if     MaxWidth is inferior to     MinWidth, ActualWidth will     become equal to MinWidth.     The return value of this property is always the same as     any value that was set to it. In contrast, the value of the     ActualWidth property may vary if the suggested     width has been rejected by the layout.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.ActualWidthProperty">
            <summary>Identifies the ActualWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.AutoFilterControlStyleProperty">
            <summary>Identifies the  AutoFilterControlStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.CellContentTemplateProperty">
            <summary>Identifies the  CellContentTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.CellContentTemplateSelectorProperty">
            <summary>Identifies the  CellContentTemplateSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.CellEditorDisplayConditionsProperty">
            <summary>Identifies the  CellEditorDisplayConditions dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.CellEditorProperty">
            <summary>Identifies the CellEditor dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.CellErrorStyleProperty">
            <summary>Identifies the CellErrorStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.FieldNameProperty">
            <summary>Identifies the FieldName dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.GroupConfigurationProperty">
            <summary>Identifies the  GroupConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.GroupDescriptionProperty">
            <summary>Identifies the  GroupDescription dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.GroupValueTemplateProperty">
            <summary>Identifies the  GroupValueTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.GroupValueTemplateSelectorProperty">
            <summary>Identifies the  GroupValueTemplateSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.HasFixedWidthProperty">
            <summary>Identifies the HasFixedWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.HasValidationErrorProperty">
            <summary>Identifies the  HasValidationError dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.IsFirstVisibleProperty">
            <summary>Identifies the IsFirstVisible dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.IsLastVisibleProperty">
            <summary>    Identifier the      IsLastVisible dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.MaxWidthProperty">
            <summary>Identifies the MaxWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.MinWidthProperty">
            <summary>Identifies the MinWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.ReadOnlyProperty">
            <summary>Identifies the ReadOnly dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.SortDirectionProperty">
            <summary>Identifies the SortDirection dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.SortIndexProperty">
            <summary>Identifies the SortIndex dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.TextTrimmingProperty">
            <summary>Identifies the TextTrimming dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.TextWrappingProperty">
            <summary>Identifies the TextWrapping dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.TitleProperty">
            <summary>Identifies the Title dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.TitleTemplateProperty">
            <summary>Identifies the TitleTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.TitleTemplateSelectorProperty">
            <summary>Identifies the  TitleTemplateSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.VisiblePositionProperty">
            <summary>Identifies the  VisiblePosition dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.VisibleProperty">
            <summary>Identifies the Visible dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Column.WidthProperty">
            <summary>Identifies the Width dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Column.PropertyChanged">
            <summary>Raised when the value of a property changes.</summary>
            <remarks>The PropertyChanged event can indicate all properties on the object have changed by using either $$NULL$$ or String.Empty as the property name in the PropertyChangedEventArgs.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ColumnCollection">
            <summary>Represents a dynamic column collection that provides notifications when items are added, removed, or when the whole collection is refreshed.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnCollection.ClearItems">
            <summary>Removes all items from the collection.</summary>
            <remarks>This method will raise the CollectionChanged event.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnCollection.InsertItem(System.Int32,Xceed.Wpf.DataGrid.Column)">
            <summary>Inserts a column at the specified index.</summary>
            <remarks>This method will raise the CollectionChanged event.</remarks>
            <param name="index">The zero-based index at which to add the item.</param>
            <param name="item">The column to add.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the CollectionChanged event.</summary>
            <param name="e">A NotifyCollectionChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnCollection.RemoveItem(System.Int32)">
            <summary>Removes the column at the specified index.</summary>
            <remarks>This method will raise the CollectionChanged event.</remarks>
            <param name="index">The zero-based index of the column to remove.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnCollection.SetItem(System.Int32,Xceed.Wpf.DataGrid.Column)">
            <summary>Replaces an existing column with the specified column.</summary>
            <param name="index">The zero-based index of the column to replace.</param>
            <param name="item">The new column that will replace the existing column at the specified index.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnCollection.Item">
            <summary>Retrieves a Column from the collection.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnCollection.Item(System.String)">
            <summary>Retrieves the column with the specified field name from the collection.</summary>
            <param name="fieldName">A string representing the field name of the column to retrieve from the collection.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnCollection.MainColumn">
            <summary>Gets or sets a grid's main (primary) column.</summary>
            <remarks>    The last column whose      IsMainColumn property has been set to true     will be considered as a grid's main column.     The title     of the column that is identified as being a grid's main column     will be displayed in the card titles when a grid is in a     card-view layout.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ColumnManagerCell">
            <summary>Specialization of the Cell class that can be used to rearrange, sort, and group the columns in a grid.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerCell.InitializeCore(Xceed.Wpf.DataGrid.DataGridContext,Xceed.Wpf.DataGrid.Row,Xceed.Wpf.DataGrid.Column)">
            <summary>    Called after the Initialize     method to allow custom initialization.</summary>
            <param name="dataGridContext">    A reference to the cell's DataGridContext.</param>
            <param name="parentRow">    A reference to the cell's parent Row.</param>
            <param name="parentColumn">    A reference to the cell's parent Row.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerCell.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerCell.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled LostMouseCature attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerCell.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerCell.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonUp attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerCell.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled MouseMove attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerCell.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled PreviewMouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerCell.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the ColumnManagerCell class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnManagerCell.IsBeingDragged">
            <summary>Gets a value if the ColumnManagerCell is currently being dragged.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnManagerCell.IsPressed">
            <summary>Gets a value indicating whether the ColumnManagerCell is currently pressed.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ColumnManagerCell.IsBeingDraggedProperty">
            <summary>Identifies the IsBeingDragged dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ColumnManagerCell.IsPressedProperty">
            <summary>Identifies the IsPressed dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ColumnManagerRow">
            <summary>Specialization of the Row class that contains a collection of ColumnManagerCells that can be used to manipulate the columns in a grid.</summary>
            <remarks>    Because rows are virtualized, meaning that they only     exist when they are in a grid's viewport, references to them,     or one of their cells, should not be kept.     Fixed Columns vs. Templates     In order to support fixed columns when creating a new row     template for a table-view layout, the following criteria must     be met:                       The PART_CellsHost template part         must be a         FixedCellPanel.         The          FixedCellCount property of the         FixedCellPanel must be bound to the table         view's          FixedColumnCount property using a         TwoWay          ViewBinding.          The fixed-cell-panel properties listed below are also     usually bound when provided a new row template for a table-view     layout:                                SplitterStyle         (TemplateBinding         xcdg:TableView.FixedColumnSplitterStyle)                  SplitterWidth (xcdg:ViewBinding         FixedColumnSplitterWidth)                  ShowSplitter         (xcdg:ViewBinding ShowFixedColumnSplitter)                  FixedColumnDropMarkPen         (xcdg:ViewBinding FixedColumnDropMarkPen)          If a new template is provided for a DataGridControl     and fixed columns are to be supported, it is essential that a          TableViewScrollViewer be used. This scroll viewer is     responsible for preserving the     TranslateTransforms that fix and scroll     elements, as well as executing the PageLeft and PageRight     actions according to the reduced viewport. It is also     recommended that an AdornerDecorator be     located above the TableViewScrollViewer of the     templated DataGridControl to support drag and     dropping of the fixed-column splitter correctly.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerRow.CreateCell(Xceed.Wpf.DataGrid.Column)">
            <summary>Create a new Cell in the row.</summary>
            <returns>A reference to the newly created Cell.</returns>
            <param name="column">A reference to a Column object representing the cell's parent column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerRow.IsValidCellType(Xceed.Wpf.DataGrid.Cell)">
            <summary>Retrieves a value indicating whether the type of the specified cell is supported by the row.</summary>
            <returns>true if the type of the cell is supported by the row; false otherwise. By default, all ColumnManagerCells will return true.</returns>
            <param name="cell">A reference to the Cell whose type to verify.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerRow.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled PreviewMouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ColumnManagerRow.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the ColumnManagerRow class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnManagerRow.AllowAutoFilter">
            <summary>Gets or sets a value indicating whether the end user can modify the values used to automatically filter the data items through the column-manager row. </summary>
            <remarks>    If set to false, column-manager cells     will not display the glyph that allows the drop-down     ListBox to be opened.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnManagerRow.AllowColumnReorder">
            <summary>Gets or sets a value indicating whether the end user can reorder the columns' visible positions.</summary>
            <remarks>The AllowColumnReorder property only affects end-user interaction and does not prevent the position of columns from being modified programmatically.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnManagerRow.AllowColumnResize">
            <summary>Gets or sets a value indicating whether the end user can resize the width of the columns in a grid.</summary>
            <remarks>The AllowColumnResize property only affects end-user interaction and does not prevent the width of columns from being modified programmatically.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ColumnManagerRow.AllowSort">
            <summary>Gets or sets a value indicating whether the end user can sort columns.</summary>
            <remarks>The AllowSort property only affects end-user interaction and does not prevent columns from being sorted programmatically.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ColumnManagerRow.AllowAutoFilterProperty">
            <summary>Identifies the  AllowAutoFilter dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ColumnManagerRow.AllowColumnReorderProperty">
            <summary>Identifies the  AllowColumnReorder dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ColumnManagerRow.AllowColumnResizeProperty">
            <summary>Identifies the  AllowColumnResize dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.ColumnManagerRow.AllowSortProperty">
            <summary>Identifies the  AllowSort dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataCell">
            <summary>Specialization of the Cell class that represents a cell contained in a DataRow.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataCell.#ctor">
            <summary>Initializes a new instance of the DataCell class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataCell.#ctor">
            <summary>Initializes a new instance of the DataCell class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataCell.#ctor(System.String,System.Object)">
            <summary>Initializes a new instance of the DataCell class specifying the parent column's field name and the cell's content.</summary>
            <param name="fieldName">A string representing the parent column's field name.</param>
            <param name="content">The content of the cell.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataCell.InitializeCore(Xceed.Wpf.DataGrid.DataGridContext,Xceed.Wpf.DataGrid.Row,Xceed.Wpf.DataGrid.Column)">
            <summary>    Called after the Initialize     method to allow custom initialization.</summary>
            <param name="dataGridContext">    A reference to the cell's DataGridContext.</param>
            <param name="parentRow">    A reference to the cell's parent Row.</param>
            <param name="parentColumn">    A reference to the cell's parent Row.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataCell.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the DataCell class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataCell.SetupDisplayMemberBinding(Xceed.Wpf.DataGrid.DataGridContext)">
            <summary>This method is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataCell.OverrideColumnCellContentTemplate">
            <summary>    Gets a value indicating whether the cell inherits the     template provided by the parent column's      CellContentTemplate property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridBindingInfo">
            <summary>Class that creates and wraps a binding that is used by a column to retrieve and validate its values.</summary>
            <remarks>    The following table provides a list of the underlying     binding's properties and their immutable values.                           Property             Value                               Mode Property             BindingMode.TwoWay (see                          ReadOnly property)                               UpdateSourceTrigger             Property                          UpdateSourceTriggerExplicit (see                          UpdateSourceTrigger property)                               ValidatesOnDataErrors             Property             true                               ValidatesOnExceptions             Property             true                               NotifyOnTargetUpdated             Property             true                               NotifyOnValidationError             Property             true              </remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridBindingInfo.#ctor">
            <summary>Initializes a new instance of the DataGridBindingInfo class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.BindsDirectlyToSource">
            <summary>Gets or sets a value indicating whether the  Path is evaluated relative to the data item or the data source.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.Converter">
            <summary>Gets or sets the convert that will be used to convert the value returned by the binding.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.ConverterCulture">
            <summary>Gets or sets the CultureInfo in which the values returned by the  Converter will be evaluated.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.ConverterParameter">
            <summary>Gets or sets the parameter that will be passed to the  Converter.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.ElementName">
            <summary>Gets or sets the name of the element that will be used as the binding source object.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.FallbackValue">
            <summary>Gets or sets the value that will be used when the binding is unable to return a value.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.NotifyOnSourceUpdated">
            <summary>Gets or sets a value indicating whether to provide notification when a value is transferred from the binding target to the binding source.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.Path">
            <summary>Gets or sets the path to the binding source property.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.ReadOnly">
            <summary>Gets or sets a value indicate whether the binding is read-only.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.UpdateSourceExceptionFilter">
            <summary>Gets or sets a callback that can be handled to provide custom logic for when an exception is thrown by the binding engine during the update of the binding source value.</summary>
            <remarks>This callback will only be used if an ExceptionValidationRule is associated with the binding.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.ValidationRules">
            <summary>Gets a collection of rules that will be used to validate user input.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridBindingInfo.XPath">
            <summary>Gets or sets the XPath query that returns the value to use on the XML binding source.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridCollectionView">
            <summary>The DataGridCollectionView class allows any collection that implements the IEnumerable interface to be grouped, sorted, and filtered.</summary>
            <remarks>    Contrary to the     BindingListCollectionView class, the     DataGridCollectionView class will     never touch the underlying data source,     meaning that the original sorting and filtering present in the     data source will not be modified. When sorting, the     DataGridCollectionView class also provides an     estimated 20 increase in performance. In addition to the     sorting speed, a limited number of "resets" make the     DataGridCollectionView class a better choice     when performance is of the utmost importance.     A      DataGridItemProperty will be created for each property in     the underlying data source and can be retrieved through the          ItemProperties property of the      DataGridCollectionView.     In addition to the native CollectionView     filtering, the DataGridCollectionView and     DataGridCollectionViewSource classes also     support automatic filtering, which provides Excel-like end-user     filtering according to the distinct values of each column.     Automatic filtering can be enabled by setting the      AutoFilterMode property to And or     Or (by default, None),     indicating whether data items will be filtered according to     all or at least one of the     filtering criteria defined by each column respectively.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.#ctor">
            <summary>Initializes a new instance of the  DataGridCollectionView class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.#ctor(System.Collections.IEnumerable)">
            <summary>Initializes a new instance of the DataGridCollectionView class specifying the collection—which must implement the IEnumerable interface—around which the DataGridCollectionView will be created.</summary>
            <remarks>    A      DataGridItemProperty will be created for each property in     the underlying data source and can be retrieved through the          ItemProperties property of the      DataGridCollectionView.</remarks>
            <param name="collection">A reference to a collection which implements the IEnumerable interface.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.#ctor(System.Collections.IEnumerable,System.Type)">
            <summary>Initializes a new instance of the DataGridCollectionView class specifying the collection—which must implement the IEnumerable interface—around which the DataGridCollectionView will be created, including the type of the items contained in the collection or added through the  SourceItems property.</summary>
            <remarks>    A      DataGridItemProperty will be created for each property in     the underlying data source and can be retrieved through the          ItemProperties property of the      DataGridCollectionView.</remarks>
            <param name="collection">A reference to a collection which implements the IEnumerable interface.</param>
            <param name="itemType">The type of the items contained in the collection or added through the  SourceItems property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.#ctor(System.Collections.IEnumerable,System.Type,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the DataGridCollectionView class specifying the collection—which must implement the IEnumerable interface—around which the DataGridCollectionView will be created, including the type of the items contained in the collection or added through the  SourceItems property, as well as indicating whether item properties and detail descriptions are to be automatically created.</summary>
            <param name="collection">A reference to a collection which implements the IEnumerable interface.</param>
            <param name="itemType">The type of the items contained in the collection or added through the  SourceItems property.</param>
            <param name="autoCreateItemProperties">true if item properties are to be automatically created; false otherwise.</param>
            <param name="autoCreateDetailDescriptions">true if detail descriptions are to be automatically created; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.#ctor(System.Type)">
            <summary>Initializes a new instance of the DataGridCollectionView class specifying the type of the items that will be added through the  SourceItems property.</summary>
            <remarks>    A      DataGridItemProperty will be created for each property     extrapolated from the specified type.</remarks>
            <param name="itemType">The type of the items contained in the collection or added through the  SourceItems property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.AddNew">
            <summary>Adds a new item to the underlying data source.</summary>
            <returns>A reference to the item that was added to the list.</returns>
            <remarks>    The new item will be committed to the underlying data     source only when one of the following conditions is met:                       The          EndNew method is called.         An operation that changes the contents of the         underlying data source, such as insertion or removal, is         executed.          If the      CancelNew method is called, the item will not be     committed.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.CancelEdit">
            <summary>Cancels the edit process.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.CancelNew">
            <summary>Discards the new item added through a call to the  AddNew method before it is committed.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.CommitEdit">
            <summary>Commits the modifications made to the item in the underlying data source that is being edited.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.CommitNew">
            <summary>Commits the new item to the underlying data source.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.Contains(System.Object)">
            <summary>Returns a value indicating whether the specified item exists in the collection.</summary>
            <returns>true if the item exists in the collection; false otherwise.</returns>
            <param name="item">The item to verify.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.DeferRefresh">
            <summary>Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.</summary>
            <returns>An IDisposable object that you can use to dispose of the calling object.</returns>
            <remarks>    The typical usage is to create a using scope with     this method and then place multiple view-changing calls within     the scope. This delays automatic refresh until the defer cycle     is exited.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.EditItem(System.Object)">
            <summary>Edits the specified item in the underlying data source.</summary>
            <param name="item">The item to edit.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.GetDistinctValues(System.String)">
            <summary>Retrieves the distinct values for the column that has the specified field name. </summary>
            <param name="fieldName">A string representing the field name of the column whose distinct values are to be retrieved.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.GetEnumerator">
            <summary>Retrieves an object that can be used to enumerate the items in the view.</summary>
            <returns>An IEnumerator that can be used to enumerate the items in the view.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.GetItemAt(System.Int32)">
            <summary>Retrieves the item at the specified index in the view.</summary>
            <returns>The item at the specified index.</returns>
            <remarks>This method evaluates the index according to any and all sorting and filtering criteria that are applied to the view.</remarks>
            <param name="index">The zero-based index at which to retrieve the item.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.IndexOf(System.Object)">
            <summary>Returns the zero-based index of the specified item.</summary>
            <returns>The zero-based index of item. If the item is not found, -1 is returned.</returns>
            <param name="item">The item whose index to retrieve.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.OnCollectionChanged">
            <summary>Raises the CollectionChanged event.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Raises the CollectionChanged event.</summary>
            <param name="e">A NotifyCollectionChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.PassesFilter(System.Object)">
            <summary>Returns a value indicating whether the specified item in the underlying data source passes the filtering criteria, and is therefore included in the view.</summary>
            <returns>true if the item is to be included in the view; false otherwise.</returns>
            <param name="item">The item that is to be included in the view—if it passes the filtering criteria.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.Refresh">
            <summary>Recreates the view.</summary>
            <remarks>    When Refresh is called, the view will be cleared and     reconstructed from the items in the underlying source. If the     items were provided directly through the Items     collection, they will not be touched nor will the view be     cleared.     Once the view has been refreshed, any sorting, grouping,     or filtering criteria that were applied to the view will be     reapplied.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.Remove(System.Object)">
            <summary>Removes the specified item from the underlying data source.</summary>
            <param name="item">The item to remove from the underlying data source.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionView.RemoveAt(System.Int32)">
            <summary>Removes the item at the specified index from the underlying data source.</summary>
            <param name="index">The zero-based index at which to remove the item from the underlying data source.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.AllowNew">
            <summary>Gets a value indicating whether new items can be added to the collection through the  AddNew method.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.AutoCreateDetailDescriptions">
            <summary>Gets a value indicating whether the  detail descriptions are automatically created.</summary>
            <remarks>    Automatic creation of detail descriptions can be disabled     by setting the      AutoCreateDetailDescriptions property of the     DataGridCollectionViewSource to     false (by default, true) or     by specifying so when      creating an instance of the DataGridCollectionView.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.AutoCreateItemProperties">
            <summary>Gets a value indicating whether the item properties are automatically created.</summary>
            <remarks>    Automatic creation of item properties can be disabled by     setting the      AutoCreateItemProperties property of the     DataGridCollectionViewSource to     false (by default, true) or     by specifying so when      creating an instance of the DataGridCollectionView.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.AutoFilterMode">
            <summary>Gets or sets a value indicating how automatic filtering of the data items will be performed. </summary>
            <remarks>    If a column does not need to support automatic filtering,     it is recommended to set its corresponding     DataGridItemProperty's      CalculateDistinctValues or the     DataGridCollectionViewSource's      DefaultCalculateDistinctValues properties to     false.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.AutoFilterValues">
            <summary>Gets a dictionary that contains a list of the view's DataGridItemProperty objects with their corresponding auto-filter values. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.CanFilter">
            <summary>Gets a value indicating whether the view supports filtering.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.CanGroup">
            <summary>Gets a value indicating whether the view supports grouping.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.CanSort">
            <summary>Gets a value indicating whether the view can be sorted.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.Count">
            <summary>Gets the number of items in the view.</summary>
            <remarks>If a filter is set, this property will only count the items that pass the filter.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.Culture">
            <summary>Gets or sets the culture to use during sorting.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.CurrentAddItem">
            <summary>Gets the item that is currently being added to the underlying data source.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.CurrentEditItem">
            <summary>Gets the item in the underlying data source that is currently being edited.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.CurrentPosition">
            <summary>Gets the ordinal position of the  CurrentItem within the—optionally sorted and filtered—view.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.DetailDescriptions">
            <summary>Gets a collection of  DataGridDetailDescription objects that provide information on the details that will be contained in a grid, including sorting, grouping, and child detail descriptions. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.DistinctValues">
            <summary>Gets a dictionary that contains a list of DataGridItemProperty objects with their corresponding distinct values. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.DistinctValuesConstraint">
            <summary>Gets or sets a value representing the constraint applied to the  DistinctValues when automatically filtering data items. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.Filter">
            <summary>Gets or sets a callback used to determine if an item is suitable for inclusion in the view</summary>
            <remarks>The items that are displayed in a view can be limited to any filtering criteria. This means that even if an item exists in the underlying data source, it does not necessarily mean that it is displayed in the view.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.GroupDescriptions">
            <summary>Gets a collection of GroupDescription objects that describe how the items in the collection are grouped in the view.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.Groups">
            <summary>Gets the runtime groups that are created based on the  GroupDescriptions.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.IsAddingItem">
            <summary>Gets a value indicating whether an item is being added to the underlying data source.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.IsCurrentAfterLast">
            <summary>Gets a value indicating whether the view's  CurrentItem is beyond the end of the collection.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.IsCurrentBeforeFirst">
            <summary>Gets a value indicating whether the view's  CurrentItem is beyond the beginning of the collection.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.IsEditingItem">
            <summary>Gets a value indicating whether an item in the underlying data source is being edited.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.IsEmpty">
            <summary>Gets a value indicating whether the filtered view is empty.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.ItemProperties">
            <summary>Gets the DataGridItemProperty objects that determine the characteristics of the items contained in the view.</summary>
            <remarks>    The      ItemProperties collection contains a list of      DataGridItemProperty objects that can be added or removed     and that contain information relative to their corresponding     item (you could consider these items to be the columns that     will end up in a grid).</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.ItemType">
            <summary>Gets the type of the items contained in the collection view or added through the  SourceItems property.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.NeedsRefresh">
            <summary>Gets a value that indicates whether this view needs to be refreshed.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.ParentDetailDescription">
            <summary>Gets the parent detail description of the collection view.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.SortDescriptions">
            <summary>Gets a collection of SortDescription objects that describe how the items in the collection are sorted in the view.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.SourceCollection">
            <summary>Gets the underlying un-filtered collection.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.SourceItems">
            <summary>Gets the items that are contained in the  SourceCollection.</summary>
            <remarks>    The items in this collection are never modified,     regardless of any grouping, sorting, or filtering criteria that     are applied to the view.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionView.StatFunctions">
            <summary>Gets a collection of the statistical functions whose results can be used by various elements throughout a grid. </summary>
            <remarks>    Each statistical function must have a unique      ResultPropertyName, and becomes immutable once it has been     added to the list. Only the statistical functions that are     added to the StatFunctions collection of a     DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of     a statistical function are retrieved from its statistical     context. For example, if a StatRow     is contained in a group's footers, its statistical context will     be the group, and the results of any statistical functions     displayed in the row will be calculated according to the values     of the data items in the group. If the row is contained in the     footers of a grid, then its statistical context is provided by     a grid (through its StatContext property) and     all the data items will be used to calculate the     results.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.BeginningEdit">
            <summary>Raised when the  EditItem method has been called to signal that the edit process of an item in the underlying data source is about to begin.</summary>
            <remarks>Usually, the existing values contained in an item are preserved during the BeginningEdit event and restored when CancelingEdit is raised.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.CancelingEdit">
            <summary>Raised when the  CancelEdit method has been called to signal that the edit process of an item in the underlying data source is about to be canceled.</summary>
            <remarks>Usually, the existing values contained in an item are preserved during the BeginningEdit event and restored when CancelingEdit is raised.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.CancelingNewItem">
            <summary>Raised when the  CancelNew method has been called to signal that the insertion process of a new item is about to be canceled.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.CommittingEdit">
            <summary>Raised when the  CommitEdit method has been called to signal that modifications made to an item in the underlying data source are about to be committed.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.CommittingNewItem">
            <summary>Raised when the  CommitNew method has been called to signal that a new item is about to be committed to the underlying data source.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.CreatingNewItem">
            <summary>Raised when the  AddNew method has been called to signal that a new item is about to be created.</summary>
            <remarks>    If the insertion of new items is to be handled manually,     a new item must be provided and the      Handled property set to true to indicate     that the process will be handled manually. If a new item is     provided but the Handled property was not set     or was set to false, the item will be ignored     and an attempt will be made by the     DataGridCollectionView to create a new item.     An InvalidOperationException will be thrown if     the Handled property is set to     true but a new item is not provided.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.EditBegun">
            <summary>Raised after the  BeginningEdit event to signal that the edit process of an item in the underlying data source has begun.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.EditCanceled">
            <summary>Raised after the  CancelingEdit event to signal that the edit process of an item in the underlying data source has been canceled.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.EditCommitted">
            <summary>Raised after the  CommittingEdit event to signal that the modifications made to an item in the underlying data source have been committed.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.InitializingNewItem">
            <summary>Raised after the  CreatingNewItem event to allow the new item to be initialized.</summary>
            <remarks>If a new item is provided in the CreatingNewItem event, its values can be initialized either there or in the InitializingNewItem event.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.ItemRemoved">
            <summary>Raised after the  RemovingItem event to signal that an item has been removed from the underlying data source.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.NewItemCanceled">
            <summary>Raised after the  CancelingNewItem event to signal that the insertion process of a new item has been canceled.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.NewItemCommitted">
            <summary>Raised after the  CommittingNewItem event to signal that a new item has been committed to the underlying data source.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.NewItemCreated">
            <summary>Raised after the  CreatingNewItem and  InitializingNewItem events to signal that a new item has been created.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionView.RemovingItem">
            <summary>Raised when the  Remove or  RemoveAt methods have been called to signal that an item is about to be removed from the underlying data source.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridCollectionViewSource">
            <summary>Represents the XAML proxy of the  DataGridCollectionView class and exposes the most commonly used members of the DataGridCollectionView class.</summary>
            <remarks>    The DataGridCollectionViewSource class     is not a view but rather the XAML representation of the          DataGridCollectionView class, which has a     View property to retrieve the underlying     DataGridCollectionView, and a      Source property by which the underlying data source can be     retrieved.     Like the standard CollectionViewSource,     the DataGridCollectionViewSource allows data     items to be grouped using either the default     PropertyGroupDescription or the      DataGridGroupDescription (recommended) and adding them to     the GroupDescriptions property. Data items can     also be sorted by adding the standard     SortDescription structures to the     SortDescriptions property, or filtered using     the Filter event.     The      ItemProperties collection contains a list of      DataGridItemProperty objects that can be added or removed     and that contain information relative to their corresponding     item (you could consider these items to be the columns that     will end up in a grid).     In addition to the native CollectionView     filtering, the DataGridCollectionView and     DataGridCollectionViewSource classes also     support automatic filtering, which provides Excel-like end-user     filtering according to the distinct values of each column.     Automatic filtering can be enabled by setting the      AutoFilterMode property to And or     Or (by default, None),     indicating whether data items will be filtered according to     all or at least one of the     filtering criteria defined by each column respectively.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.#ctor">
            <summary>Initializes a new instance of the DataGridCollectionViewSource class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.OnCollectionViewTypeChanged(System.Type,System.Type)">
            <summary>Raised when the CollectionViewType property is changed.</summary>
            <param name="oldCollectionViewType">The old value of the CollectionViewType property.</param>
            <param name="newCollectionViewType">The new value of the CollectionViewType property.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.AutoCreateDetailDescriptions">
            <summary>    Gets a value indicating whether the      detail descriptions are automatically created.</summary>
            <remarks>    Automatic creation of detail descriptions can be disabled     by setting the      AutoCreateDetailDescriptions property of the     DataGridCollectionViewSource to     false (by default, true) or     by specifying so when      creating an instance of the DataGridCollectionView.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.AutoCreateItemProperties">
            <summary>    Gets a value indicating whether the item properties are     automatically created.</summary>
            <remarks>    Automatic creation of item properties can be disabled by     setting the      AutoCreateItemProperties property of the     DataGridCollectionViewSource to     false (by default, true) or     by specifying so when      creating an instance of the DataGridCollectionView.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.AutoFilterMode">
            <summary>Gets or sets a value indicating how automatic filtering of the data items will be performed. </summary>
            <remarks>If a column does not need to support automatic filtering, it is recommended to set its corresponding DataGridItemProperty's  CalculateDistinctValues or the DataGridCollectionViewSource's  DefaultCalculateDistinctValues properties to false.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.Culture">
            <summary>Gets or sets the culture that is used for grouping and sorting operations.</summary>
            <remarks>The value of this property is forwarded to any collection view created from the  Source collection.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.DefaultCalculateDistinctValues">
            <summary>Get or sets the default value of the  CalculateDistinctValues property when a DataGridItemProperty has not explicitly set its value. </summary>
            <remarks>If a column does not need to support automatic filtering, it is recommended to set its corresponding DataGridItemProperty's  CalculateDistinctValues to false or set the DataGridCollectionViewSource or DataGridDetailDescription's  DefaultCalculateDistinctValues properties to false and only set CalculateDistinctValues to true for the item properties that will support auto-filtering</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.DetailDescriptions">
            <summary>Gets a collection of  DataGridDetailDescription objects that provide information on the details that will be contained in a grid, including sorting, grouping, and child detail descriptions. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.DistinctValuesConstraint">
            <summary>Gets or sets a value representing the constraint applied to the distinct values when automatically filtering data items. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.ItemProperties">
            <summary>Gets a collection of DataGridItemProperty objects, which represent the items that are contained in the underlying collection.</summary>
            <remarks>    The      ItemProperties collection contains a list of      DataGridItemProperty objects that can be added or removed     and that contain information relative to their corresponding     item (you could consider these items to be the columns that     will end up in a grid).     When binding a grid to a      DataGridCollectionView or      DataGridCollectionViewSource (in XAML), it is recommended     to use the      ItemProperties property to add or remove the columns the     will end up in the      Columns collection and leave the      AutoCreateColumns property to true.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.ItemType">
            <summary>Gets the type of the items contained in the collection or added through the  SourceItems property.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.Source">
            <summary>Gets or sets the collection from which the view is created.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.SourceItems">
            <summary>    Gets the items that are contained in the          SourceCollection.</summary>
            <remarks>    The items in this collection are never modified,     regardless of any grouping, sorting, or filtering criteria that     are applied to the view.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.StatFunctions">
            <summary>Gets a collection of the statistical functions whose results can be used by various elements throughout a grid. </summary>
            <remarks>    Each statistical function must have a unique      ResultPropertyName, and becomes immutable once it has been     added to the list. Only the statistical functions that are     added to the StatFunctions collection of a      DataGridCollectionView or     DataGridCollectionViewSource can be     used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if a StatRow     is contained in a group's footers, its statistical context will     be the group, and the results of any statistical functions     displayed in the row will be calculated according to the values     of the data items in the group. If the row is contained in the     footers of a grid, then its statistical context is provided by     a grid (through its StatContext property) and     all the data items will be used to calculate the     results.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.AutoCreateDetailDescriptionsProperty">
            <summary>Identifies the  AutoCreateDetailDescriptions dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.AutoCreateItemPropertiesProperty">
            <summary>Identifies the  AutoCreateItemProperties dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.AutoFilterModeProperty">
            <summary>Identifies the  FilteringMode dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.DefaultCalculateDistinctValuesProperty">
            <summary>Identifies the  DefaultCalculateDistinctValues dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.DistinctValuesConstraintProperty">
            <summary>Identifies the  DistinctValuesConstraint dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.ItemTypeProperty">
            <summary>Identifies the  ItemType dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.BeginningEdit">
            <summary>    Raised when the      EditItem method has been called to signal that the edit     process of an item in the underlying data source is about to     begin.</summary>
            <remarks>Usually, the existing values contained in an item are preserved during the BeginningEdit event and restored when CancelingEdit is raised.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.CancelingEdit">
            <summary>    Raised when the      CancelEdit method has been called to signal that the edit     process of an item in the underlying data source is about to be     canceled.</summary>
            <remarks>Usually, the existing values contained in an item are preserved during the BeginningEdit event and restored when CancelingEdit is raised.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.CancelingNewItem">
            <summary>    Raised when the      CancelNew method has been called to signal that the     insertion process of a new item is about to be canceled.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.CommittingEdit">
            <summary>    Raised when the      CommitEdit method has been called to signal that     modifications made to an item in the underlying data source are     about to be committed.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.CommittingNewItem">
            <summary>    Raised when the      CommitNew method has been called to signal that a new item     is about to be committed to the underlying data source.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.CreatingNewItem">
            <summary>    Raised when the      AddNew method has been called to signal that a new item is     about to be created.</summary>
            <remarks>    If the insertion of new items is to be handled manually,     a new item must be provided and the      Handled property set to true to indicate     that the process will be handled manually. If a new item is     provided but the Handled property was not set     or was set to false, the item will be ignored     and an attempt will be made by the     DataGridCollectionView to create a new item.     An InvalidOperationException will be thrown if     the Handled property is set to     true but a new item is not provided.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.EditBegun">
            <summary>    Raised after the      BeginningEdit event to signal that the edit process of an     item in the underlying data source has begun.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.EditCanceled">
            <summary>    Raised after the      CancelingEdit event to signal that the edit process of an     item in the underlying data source has been canceled.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.EditCommitted">
            <summary>    Raised after the      CommittingEdit event to signal that the modifications made     to an item in the underlying data source have been     committed.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.InitializingNewItem">
            <summary>    Raised after the      CreatingNewItem event to allow the new item to be     initialized.</summary>
            <remarks>If a new item is provided in the CreatingNewItem event, its values can be initialized either there or in the InitializingNewItem event.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.ItemRemoved">
            <summary>    Raised after the      RemovingItem event to signal that an item has been removed     from the underlying data source.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.NewItemCanceled">
            <summary>    Raised after the      CancelingNewItem event to signal that the insertion process     of a new item has been canceled.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.NewItemCommitted">
            <summary>    Raised after the      CommittingNewItem event to signal that a new item has been     committed to the underlying data source.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.NewItemCreated">
            <summary>    Raised after the      CreatingNewItem and      InitializingNewItem events to signal that a new item has     been created.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridCollectionViewSource.RemovingItem">
            <summary>    Raised when the      Remove or      RemoveAt methods have been called to signal that an item is     about to be removed from the underlying data source.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridCommands">
            <summary>Provides a set of commands that can be used to accomplish various actions.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.BeginEdit">
            <summary>Represents the BeginEdit command, which requests the row enters edit mode. By default, F2.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.CancelEdit">
            <summary>Represents the CancelEdit command, which requests that row exit edit mode and any changes be discarded. By default, Escape.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.CollapseDetails">
            <summary>Represents the CollapseDetails command, which requests that the associated detail and its possible child details be collapsed. By default, the Left arrow key.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.CollapseGroup">
            <summary>Represents the CollapseGroup command, which requests that the associated group be collapsed. By default, the Left arrow key.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.EndEdit">
            <summary>Represents the EndEdit command, which requests that the row exit edit mode. By default, Enter.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.ExpandDetails">
            <summary>Represents the ExpandDetails command, which requests that the associated detail and its possible child details be expanded. By default, the Right arrow key.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.ExpandGroup">
            <summary>Represents the ExpandGroup command, which requests that the associated group be expanded. By default, the Right arrow key.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.SelectRow">
            <summary>Represents the SelectRow command, which requests that the DataRow associated with the RowSelector by selected.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.ToggleDetailExpansion">
            <summary>Represents the ToggleDetailExpansion command, which requests that the associated detail and its possible child details be collapsed if the root detail is expanded, and expanded if the root detail is collapsed. By default, Space or double-clicking the left mouse button. </summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridCommands.ToggleGroupExpansion">
            <summary>Represents the ToggleGroupExpansion command, which requests that the associated group be collapsed if it is expanded, and expanded if it is collapsed. By default, Space or double-clicking the left mouse button.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridCommittingNewItemEventArgs">
            <summary>Provides information on the new item that is about to be committed in the  CommittingNewItem event.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCommittingNewItemEventArgs.#ctor(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object,System.Boolean)">
            <summary>Initializes a new instance of the DataGridCommittingNewItemEventArgs class specifying the new item, the collection view to which it is to be added, and a value indicating whether the process is to be canceled.</summary>
            <param name="collectionView">The  DataGridCollectionView to which the item is to be committed.</param>
            <param name="item">The new item.</param>
            <param name="cancel">true if the process is to be canceled; false otherwise.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCommittingNewItemEventArgs.Index">
            <summary>Gets or sets the index at which the item is to be inserted.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCommittingNewItemEventArgs.NewCount">
            <summary>Gets or sets the new item count.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridContext">
            <summary>Class that the provides contextual information on, and access to, items contained in a grid or detail.</summary>
            <remarks>The data-grid context of a grid always exists; however, detail contexts are created and exist only when they are expanded and will be destroyed when a detail is collapsed. A data-grid context's  HasDetails property can be queried to determine if it has details; however, it does not indicate whether the details are expanded and consequently have a context. To know if the details of a specific data item are expanded and therefore have a context, the  AreDetailsExpanded method can be used.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.AreDetailsExpanded(System.Object)">
            <summary>Retrieves a value indicating whether the details for the specified data item are expanded.</summary>
            <returns>true if the details of the specified data item are expanded; false if they are collapsed. Cannot be $$NULL$$.</returns>
            <param name="dataItem">The data item to query.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.BeginEdit">
            <summary>Places the context's  current item in edit mode.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the  EndEdit method is called. If the  CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.BeginEdit">
            <summary>Places the context's  current item in edit mode.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the  EndEdit method is called. If the  CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.BeginEdit(System.Object)">
            <summary>Places the specified item in edit mode.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the  EndEdit method is called. If the  CancelEdit method is called, modifications will be discarded.</remarks>
            <param name="item">The item to place in edit mode.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.CancelEdit">
            <summary>Cancels the edit process of the item that is being edited.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.CollapseDetails(System.Object)">
            <summary>Collapses the details owned by the specified data item. </summary>
            <remarks>When a detail is collapsed, it (including any possible children) no longer exist.</remarks>
            <param name="dataItem">The data item that owns the details to collapse. If the item has multiple sibling details, the will all be collapsed. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.CollapseGroup(System.Windows.Data.CollectionViewGroup)">
            <summary>Collapses the specified group.</summary>
            <remarks>    The state of child groups will not be affected if their     parent is collapsed.</remarks>
            <param name="group">A CollectionViewGroup representing the group to collapse.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.EndEdit">
            <summary>Ends the edit process of the item that is being edited.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the EndEdit method is called. If the CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.ExpandDetails(System.Object)">
            <summary>Expands any details owned by the specified data item. </summary>
            <remarks>When a detail is collapsed, it's context ( including any possible child contexts ), no longer exist.</remarks>
            <param name="dataItem">The data items that owns the details to expand. If the item has multiple sibling details, they will all be expanded. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.ExpandGroup(System.Windows.Data.CollectionViewGroup)">
            <summary>Expands the specified group.</summary>
            <remarks>    The state of child groups will not be affected if their     parent is expanded.</remarks>
            <param name="group">A CollectionViewGroup representing the group to expand.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.GetChildContext">
            <summary>Retrieves the child DataGridContext of an item.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.GetChildContext(System.Object,Xceed.Wpf.DataGrid.DetailConfiguration)">
            <summary>Retrieves the child DataGridContext created from the specified DetailConfiguration of an item.</summary>
            <returns>The child DataGridContext of the specified parentItem.</returns>
            <param name="parentItem">The item whose child DataGridContext is to be retrieved. Cannot be $$NULL$$.</param>
            <param name="detailConfiguration">The DetailConfiguration that is the source of the child context. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.GetChildContext(System.Object,System.String)">
            <summary>Retrieves the child DataGridContext created from the detail configuration that has the specified relation name.</summary>
            <returns>The child DataGridContext of the specified parentItem.</returns>
            <param name="parentItem">The item whose child DataGridContext is to be retrieved. Cannot be $$NULL$$.</param>
            <param name="relationName">A string representing the relation name of the DetailConfiguration that is the source of the child context.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.GetChildContexts">
            <summary>Retrieves the child DataGridContexts of the context.</summary>
            <returns>An IEnumerable that contains the child DataGridContexts of the context. Can be empty if the context does not have child contexts.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.GetContainerFromItem(System.Object)">
            <summary>Retrieves the container of the specified item.</summary>
            <returns>A DependencyObject representing the container of the specified item. Can be $$NULL$$ if the item belongs to the context but does not have a container.</returns>
            <param name="item">An item in the context whose container to retrieve.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.GetItemFromContainer(System.Windows.DependencyObject)">
            <summary>Retrieves an item for the specified container.</summary>
            <returns>The item for the specified container.</returns>
            <param name="container">A DependencyObject representing the container of an item in the context.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.GetParentGroupFromItem(System.Object)">
            <summary>Retrieves the parent group for the specified item.</summary>
            <returns>A CollectionViewGroup representing the parent group of the specified item. Can be $$NULL$$ if the item is part of the context but does not have parent group.</returns>
            <param name="item">The item whose parent group is to be retrieved.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.IsGroupExpanded(System.Windows.Data.CollectionViewGroup)">
            <summary>Retrieves a value indicating whether the specified group is expanded.</summary>
            <returns>true if the group is expanded; false otherwise.</returns>
            <remarks>This method will return the actual state of the group regardless of its parent's state. For example, if the group is expanded but contained in a parent group that is collapsed, true will be returned.</remarks>
            <param name="group">A CollectionViewGroup representing the group whose state to query.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Raises the  PropertyChanged event.</summary>
            <param name="e">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.ToggleDetailExpansion(System.Object)">
            <summary>Toggles any details owned by the specified data item. </summary>
            <remarks>When a detail is collapsed, it's context ( including any possible child contexts ), no longer exist.</remarks>
            <param name="dataItem">The data item that owns the detail to toggle. If the item has multiple sibling details, they will all be toggled. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridContext.ToggleGroupExpansion(System.Windows.Data.CollectionViewGroup)">
            <summary>Toggles the specified group.</summary>
            <remarks>The state of child groups will not be affected if their parent's state is toggled.</remarks>
            <param name="group">A CollectionViewGroup representing the group whose state is to be toggled. A collapsed group will be expanded and an expanded group will be collapsed.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.AllowDetailToggle">
            <summary>Gets a value indicating whether the end user can toggle the expansion state of details in the context. </summary>
            <remarks>The value returned by this property corresponds to the value of the AllowDetailToggle property of the grid or detail configuration that was applied to the detail that is the source of the context.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.AutoFilterValues">
            <summary>Gets a dictionary that contains a list of the context's DataGridItemProperty objects with their corresponding auto-filter values. </summary>
            <remarks>The value returned by this property corresponds to the value of the  AutoFilterValues property of the  DataGridCollectionView to which the source grid is bound or the  AutoFilterValues of the  DetailDescription from which the source detail was created.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.Columns">
            <summary>Gets a list of the columns contained in the context.</summary>
            <remarks>    All columns, regardless of their state, will be contained     in the collection. To retrieve only the columns that are     visible, consult the      VisibleColumns     property.     The value returned by this property corresponds to the     value of the Columns property of the grid or     detail configuration that was applied to the detail that is the     source of the context.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.CurrentColumn">
            <summary>Gets or sets the context's current column.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.CurrentItem">
            <summary>Gets or sets the context's current data item.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.DataGridControl">
            <summary>Gets the context's parent DataGridControl.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.DefaultGroupConfiguration">
            <summary>Gets the default configuration that will be used by any groups in the context for which an explicit group configuration is not provided.</summary>
            <remarks>    The value returned by this property corresponds to the     value of the DefaultGroupConfiguration     property of the grid or detail configuration that was applied     to the detail that is the source of the context.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.DetailConfigurations">
            <summary>Gets a list of the configurations that will be applied to their corresponding details. </summary>
            <remarks>    The value returned by this property corresponds to the     value of the DetailConfigurations property of     the grid or detail configuration that was applied to the detail     that is the source of the context.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.DistinctValues">
            <summary>Gets a dictionary that contains a list of the context's DataGridItemProperty objects with their corresponding distinct values. </summary>
            <remarks>The value returned by this property corresponds to the value of the  DistinctValues property of the  DataGridCollectionView to which the source grid is bound or that were automatically extracted by the  DetailDescription from which the source detail was created.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.Footers">
            <summary>Gets a collection that contains the items that are located in the footer section of the context.</summary>
            <remarks>    The value returned by this property corresponds to the     value of the Footers property of the grid (via     its view) or detail configuration that was applied to the     detail that is the source of the context.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.GroupConfigurationSelector">
            <summary>Gets a group-configuration selector that will be used to select the appropriate configuration for a group in the context based on its information and/or content.</summary>
            <remarks>    The value returned by this property corresponds to the     value of the GroupConfigurationSelector     property of the grid or detail configuration that was applied     to the detail that is the source of the context.     Unlike a default group configuration, which applies to     all groups, group-configuration selectors, such as the built-in          FieldNameGroupConfigurationSelector and          LevelGroupConfigurationSelector, can be     used to select the appropriate configuration for a group based     on its information and/or content using their respective          FieldNameGroupConfigurationSelectorItem     and      LevelGroupConfigurationSelectorItem, which provide a group     configuration and indicate for what specific field name or     level that configuration applies.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.GroupLevelDescriptions">
            <summary>Gets a collection of GroupLevelDescription objects that contain information on each group level contained in the context.</summary>
            <remarks>    The value returned by this property corresponds to the     value of the GroupLevelDescriptions property     of the grid or detail configuration that was applied to the     detail that is the source of the context.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.HasDetails">
            <summary>Gets a value indicating whether the context has details. </summary>
            <remarks>The data-grid context of a grid always exists; however, detail contexts are created and exist only when they are expanded and will be destroyed when a detail is collapsed. A data-grid context's  HasDetails property can be queried to determine if it has details; however, it does not indicate whether the details are expanded and consequently have a context. To know if the details of a specific data item are expanded and therefore have a context, the  AreDetailsExpanded method can be used.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.Headers">
            <summary>Gets a collection that contains the items that are located in the header section of the context.</summary>
            <remarks>    The value returned by this property corresponds to the     value of the Headers property of the grid (via     its view) or detail configuration that was applied to the     detail that is the source of the context.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.IsCurrent">
            <summary>Gets a value indicating whether the context is current.</summary>
            <remarks>The current context can also be retrieves through a grid's  CurrentContext property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.ItemContainerStyle">
            <summary>Gets the style that is applied to the container element (DataRow) generated for each item in the context.</summary>
            <remarks>    The value returned by this property corresponds to the     value of the ItemContainerStyle property of     the grid or detail configuration that was applied to the detail     that is the source of the context.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.ItemContainerStyleSelector">
            <summary>Gets a style selector that selects the appropriate style to apply to each generated container element (DataRow) in the context.</summary>
            <remarks>    The value returned by this property corresponds to the     value of the ItemContainerStyleSelector     property of the grid or detail configuration that was applied     to the detail that is the source of the context.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.Items">
            <summary>Gets the collection view that was used to generate the content of the context.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.ParentDataGridContext">
            <summary>Gets the context's parent DataGridContext.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.ParentItem">
            <summary>Gets the parent data item to which the context belongs</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.SelectedItems">
            <summary>Gets a collection of data items that are currently selected in the context.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.SourceDetailConfiguration">
            <summary>Gets the detail configuration that was applied to the detail that is the source of the context. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridContext.VisibleColumns">
            <summary>Gets a list of the columns in the context whose Visible property is true, ordered according to their  VisiblePosition.</summary>
            <remarks>         The value returned by this property corresponds to the     value of the VisibleColumns property of the     grid or detail configuration that was applied to the detail     that is the source of the context.     The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridContext.GroupConfigurationSelectorChanged">
            <summary>Raised when the  GroupConfigurationSelector property is changed.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridContext.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridControl">
            <summary>Represents the Xceed DataGrid for WPF control, which allows data to be displayed and edited, regardless of its layout.</summary>
            <remarks>    By default, when a new DataGridControl     instance is created, it will contain a GroupByControl     and a ColumnManagerRow     in its      fixed headers.     Fixed Columns vs. Templates      In order to support fixed columns when creating a new row     template for a table-view layout, the following criteria must     be met:                       The PART_CellsHost template part         must be a         FixedCellPanel.         The          FixedCellCount property of the         FixedCellPanel must be bound to the table         view's          FixedColumnCount property using a         TwoWay          ViewBinding.          The fixed-cell-panel properties listed below are also     usually bound when provided a new row template for a table-view     layout:                                SplitterStyle         (TemplateBinding         xcdg:TableView.FixedColumnSplitterStyle)                  SplitterWidth (xcdg:ViewBinding         FixedColumnSplitterWidth)                  ShowSplitter         (xcdg:ViewBinding ShowFixedColumnSplitter)                  FixedColumnDropMarkPen         (xcdg:ViewBinding FixedColumnDropMarkPen)          If a new template is provided for a DataGridControl     and fixed columns are to be supported, it is essential that a          TableViewScrollViewer be used. This scroll viewer is     responsible for preserving the     TranslateTransforms that fix and scroll     elements, as well as executing the PageLeft and PageRight     actions according to the reduced viewport. It is also     recommended that an AdornerDecorator be     located above the TableViewScrollViewer of the     templated DataGridControl to support drag and     dropping of the fixed-column splitter correctly.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.AreDetailsExpanded(System.Object)">
            <summary>Retrieves a value indicating whether the details for the specified master data item are expanded. </summary>
            <returns>true if the details of the master data item are expanded; false if they are collapsed;</returns>
            <param name="dataItem">The master data item to query. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.BeginEdit">
            <summary>Places the grid's  current item in edit mode.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the  EndEdit method is called. If the  CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.BeginEdit">
            <summary>Places the grid's  current item in edit mode.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the  EndEdit method is called. If the  CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.BeginEdit(System.Object)">
            <summary>Places the specified master item in edit mode.</summary>
            <remarks>    Modifications made to the content of the cells contained     in the row will only be committed once the      EndEdit method is called. If the      CancelEdit method is called, modifications will be     discarded.</remarks>
            <param name="item">    The master item to place in edit     mode.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.BeginInit">
            <summary>Signals the beginning of a batch modification process.</summary>
            <remarks>    During a batch modification process, data will not be     loaded, sorting operations will not be done, and the visible     positions of columns will not be resequenced. All of these     operations will be accomplished once the     EndEdit method is called. In addition, any     items defined in the fixed headers, fixed footers, headers, or     footers of a view will only be added to a grid when     EndEdit is called.     If BeginInit is called when another row     is being edited, an exception will be thrown.     When overriding BeginInit in a derived     class, the base implementation must be called.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.BringItemIntoView(System.Object)">
            <summary>Brings the specified item into view.</summary>
            <returns>true if the specified element was brought into view; false otherwise.</returns>
            <remarks>The item that is brought into view will not be made current.</remarks>
            <param name="item">The item to bring into view.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.CancelEdit">
            <summary>Cancels the edit process of master item being edited.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the EndEdit method is called. If the CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>    Reverts the effects of      PrepareContainerForItemOverride.</summary>
            <param name="element">The container element.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.CollapseDetails(System.Object)">
            <summary>Collapses any details owned by the specified master data item. </summary>
            <remarks>When a detail is collapsed, it's context ( including any possible child contexts ), no longer exist.</remarks>
            <param name="dataItem">    The master data item that owns the     details to collapse. If the item has multiple     sibling details, they will all be collapsed.     Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.CollapseGroup(System.Windows.Data.CollectionViewGroup)">
            <summary>Collapses the specified master group.</summary>
            <remarks>    The state of child groups will not be affected if their     parent is collapsed.</remarks>
            <param name="group">A CollectionViewGroup representing the master group to collapse.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.CreateDocumentPaginator">
            <summary>Creates a new instance of a DocumentPaginator from which the DataGridControl will be paginated.</summary>
            <returns>A new instance of the DocumentPaginator class from which the DataGridControl will be paginated.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.EndEdit">
            <summary>Ends the edit process of the master item that is being edited.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the EndEdit method is called. If the CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.EndInit">
            <summary>Signals the end of a batch modification process.</summary>
            <remarks>    During a batch modifications process, when     EndInit is called, the data will be loaded (if     any data binding occurred during the process), data rows will     be sorted (if a sort operation was requested) and the visible     positions of columns will be resequenced (if the      VisiblePosition properties of columns were modified). In     addition, an items defined in the fixed headers, fixed footers,     headers, or footers of a view will be added to a grid.     When overriding EndInit in a derived     class, the base implementation must be called.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExpandDetails(System.Object)">
            <summary>Expands any details owned by the specified master data item. </summary>
            <remarks>    When a detail is collapsed, it (including any possible     children) no longer exist.</remarks>
            <param name="dataItem">    The master data item that owns the     details to expand. If the item has multiple sibling details,     they will all be expanded. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExpandGroup(System.Windows.Data.CollectionViewGroup)">
            <summary>Expands the specified master group.</summary>
            <remarks>    The state of child groups will not be affected if their     parent is expanded.</remarks>
            <param name="group">A CollectionViewGroup representing the master group to expand.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps">
            <summary>Exports the grid to an XPS document. </summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.String,System.Windows.Size)">
            <summary>Exports the grid to an XPS document that has the specified file name and using the provided page size.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="fullFileName">A string representing the fully-qualified file name of the XPS document to which the grid will be exported. If the file exists, it will be overwritten.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.String,System.Windows.Size,System.Boolean)">
            <summary>Exports the grid to an XPS document that has the specified file name and page size, as well as indicating whether the progress window is displayed.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="fullFileName">A string representing the fully-qualified file name of the XPS document to which the grid will be exported. If the file exists, it will be overwritten.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.String,System.Windows.Size,System.Windows.Rect,System.Boolean)">
            <summary>Exports the grid to an XPS document that has the specified file name and using the provided page size and imageable area, as well as indicating whether the progress window is displayed.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="fullFileName">A string representing the fully-qualified file name of the XPS document to which the grid will be exported. If the file exists, it will be overwritten.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="imageableArea">A Rect structure that represents the area of the page that can be printed.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.String,System.Windows.Size,System.Windows.Rect,System.Windows.Controls.PageRange,System.Boolean)">
            <summary>Exports the grid to an XPS document that has the specified file name and using the provided page size, page range, and imageable area, as well as indicating whether the progress window is displayed.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="fullFileName">A string representing the fully-qualified file name of the XPS document to which the grid will be exported. If the file exists, it will be overwritten.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="imageableArea">A Rect structure that represents the area of the page that can be printed.</param>
            <param name="pageRange">A PageRange structure that represents the range of pages to process.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.String,System.Windows.Size,System.Windows.Rect,System.Windows.Controls.PageRange,System.IO.Packaging.CompressionOption,System.Boolean)">
            <summary>Exports the grid to an XPS document that has the specified file name and using the provided page size, page range, imageable area, as well as indicating whether the progress window is displayed.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="fullFileName">A string representing the fully-qualified file name of the XPS document to which the grid will be exported. If the file exists, it will be overwritten.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="imageableArea">A Rect structure that represents the area of the page that can be printed.</param>
            <param name="pageRange">A PageRange structure that represents the range of pages to process.</param>
            <param name="compressionOption">A CompressionOption value that indicates the compression level to use.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.String,System.Windows.Size,System.Windows.Rect,System.Windows.Controls.PageRange,System.IO.Packaging.CompressionOption,System.EventHandler`1{Xceed.Wpf.DataGrid.Print.ProgressEventArgs},System.Boolean)">
            <summary>Exports the grid to an XPS document that has the specified file name and using the provided page size, page range, imageable area, compression option, and providing the callback to invoke during the process, as well as indicating whether the progress window is displayed.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="fullFileName">A string representing the fully-qualified file name of the XPS document to which the grid will be exported. If the file exists, it will be overwritten.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="imageableArea">A Rect structure that represents the area of the page that can be printed.</param>
            <param name="pageRange">A PageRange structure that represents the range of pages to process.</param>
            <param name="compressionOption">A CompressionOption value that indicates the compression level to use.</param>
            <param name="progressCallback">The callback to invoke during the process.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.IO.Stream,System.Windows.Size)">
            <summary>Exports the grid as an XPS document to the specified stream using the provided page size.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="stream">The Stream to which the grid will be exported as an XPS document.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.IO.Stream,System.Windows.Size,System.Boolean)">
            <summary>Exports the grid as an XPS document to the specified stream and page size, as well as indicating whether the progress window is displayed.</summary>
            <param name="stream">The Stream to which the grid will be exported as an XPS document.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.IO.Stream,System.Windows.Size,System.Windows.Rect,System.Boolean)">
            <summary>Exports the grid as an XPS document to the specified stream using the provided page size and imageable area, as well as indicating whether the progress window is displayed.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="stream">The Stream to which the grid will be exported as an XPS document.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="imageableArea">A Rect structure that represents the area of the page that can be printed.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.IO.Stream,System.Windows.Size,System.Windows.Rect,System.Windows.Controls.PageRange,System.Boolean)">
            <summary>Exports the grid as an XPS document to the specified stream using the provided page size, page range, and imageable area, as well as indicating whether the progress window is displayed.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="stream">The Stream to which the grid will be exported as an XPS document.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="imageableArea">A Rect structure that represents the area of the page that can be printed.</param>
            <param name="pageRange">A PageRange structure that represents the range of pages to process.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.IO.Stream,System.Windows.Size,System.Windows.Rect,System.Windows.Controls.PageRange,System.IO.Packaging.CompressionOption,System.Boolean)">
            <summary>Exports the grid as an XPS document to the specified stream using the provided page size, page range, imageable area, compression option, as well as indicating whether the progress window is displayed.</summary>
            <remarks>The appearance of a grid when it is printed or exported is determined by the PrintView property.</remarks>
            <param name="stream">The Stream to which the grid will be exported as an XPS document.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="imageableArea">A Rect structure that represents the area of the page that can be printed.</param>
            <param name="pageRange">A PageRange structure that represents the range of pages to process.</param>
            <param name="compressionOption">A CompressionOption value that indicates the compression level to use.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ExportToXps(System.IO.Stream,System.Windows.Size,System.Windows.Rect,System.Windows.Controls.PageRange,System.IO.Packaging.CompressionOption,System.EventHandler`1{Xceed.Wpf.DataGrid.Print.ProgressEventArgs},System.Boolean)">
            <summary>Exports the grid as an XPS document to the specified stream using the provided page size, page range, imageable area, compression option, and providing the callback to invoke during the process, as well as indicating whether the progress window is displayed.</summary>
            <remarks>Although the description displayed in the progress window can be modified directly in the callback, it is recommended that  ProgressWindowDescription property of the print view be changed instead to prevent the default "Processing..." text from initially being displayed.</remarks>
            <param name="stream">The Stream to which the grid will be exported as an XPS document.</param>
            <param name="pageSize">A Size structure that indicates the size of the pages, including the printer margins.</param>
            <param name="imageableArea">A Rect structure that represents the area of the page that can be printed.</param>
            <param name="pageRange">A PageRange structure that represents the range of pages to process.</param>
            <param name="compressionOption">A CompressionOption value that indicates the compression level to use.</param>
            <param name="progressCallback">The callback to invoke during the process.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetChildContext">
            <summary>Retrieves the child DataGridContext of an item.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetChildContext(System.Object,Xceed.Wpf.DataGrid.DetailConfiguration)">
            <summary>Retrieves the child DataGridContext created from the specified DetailConfiguration of an item.</summary>
            <returns>The child DataGridContext of the specified parentItem.</returns>
            <param name="parentItem">The item whose child DataGridContext is to be retrieved. Cannot be $$NULL$$.</param>
            <param name="detailConfiguration">The DetailConfiguration that is the source of the child context. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetChildContext(System.Object,System.String)">
            <summary>Retrieves the child DataGridContext created from the detail configuration that has the specified relation name.</summary>
            <returns>The child DataGridContext of the specified parentItem.</returns>
            <param name="parentItem">The item whose child DataGridContext is to be retrieved. Cannot be $$NULL$$.</param>
            <param name="relationName">A string representing the relation name of the DetailConfiguration that is the source of the child context.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetChildContexts">
            <summary>Retrieves the child DataGridContexts of the grid.</summary>
            <returns>An IEnumerable that contains the child DataGridContexts of the grid. Can be empty if the grid does not have child contexts.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetContainerForItemOverride">
            <summary>Creates or identifies the element used to display the specified item.</summary>
            <returns>The element that is used to display the given item.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetContainerFromItem(System.Object)">
            <summary>Retrieves a container of the specified item.</summary>
            <returns>A DependencyObject representing the container of the specified master item. Can be $$NULL$$ if the item belongs to the context but does not have a container.</returns>
            <param name="item">The item whose container to retrieve. The item can correspond to a master data item or an item in the headers or footers of the grid or master group. Items located in the fixed headers or footers of the grid or in a detail will return throw an exception.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetDataGridContext(System.Windows.DependencyObject)">
            <summary>Retrieves the DataGridContext for the specified DependencyObject.</summary>
            <returns>A reference to the item's DataGridContext.</returns>
            <param name="obj">A DependencyObject representing the item whose DataGridContext is to be retrieved.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetHasExpandedDetails(System.Windows.DependencyObject)">
            <summary>Gets a value that indicates whether a container (DataRow) has one or more expanded details. </summary>
            <returns>true if the container has one or more expanded details; false if the container does not have expanded details.</returns>
            <remarks>This attached property can be used by a trigger to determine if the grid has expanded details.</remarks>
            <param name="obj">A DependencyObjecy representing the container (DataRow) to query.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetIsFixedFootersHost(System.Windows.DependencyObject)">
            <summary>    Gets a value that, when set by a panel, identifies that     panel as the host that will contain all elements added to the     grid's fixed footers through the      FixedFooters property.</summary>
            <returns>true if a panel is used as the fixed-footers host; false otherwise.</returns>
            <param name="obj">    The panel identified as the host that will contain all     elements added to the grid's fixed footers through the      FixedFooters property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetIsFixedHeadersHost(System.Windows.DependencyObject)">
            <summary>    Gets a value that, when set by a panel, identifies that     panel as the host that will contain all elements added to the     grid's fixed headers through the      FixedHeaders property.</summary>
            <returns>true if a panel is used as the fixed-headers host; false otherwise.</returns>
            <param name="obj">    The panel identified as the host that will contain all     elements added to the grid's fixed headers through the      FixedHeaders property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetItemFromContainer(System.Windows.DependencyObject)">
            <summary>Retrieves an item for the specified container.</summary>
            <returns>The item for the specified container.</returns>
            <param name="container">A DependencyObject representing the container of the item to retrieve. Only the container of a master data item or an item in the headers or footers of the grid or master group can be specified. Containers located in the fixed headers or footers of the grid or in a detail will throw an exception.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetParentDataGridControl(System.Windows.DependencyObject)">
            <summary>Retrieves the parent DataGridControl of the specified item.</summary>
            <returns>A reference to the item's parent DataGridControl.</returns>
            <param name="obj">The item whose parent DataGridControl is to be retrieved.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetParentGroupFromItem(System.Object)">
            <summary>Retrieves the parent group for the specified item.</summary>
            <returns>A CollectionViewGroup representing the parent group of the specified item. Can be $$NULL$$ if the item exists but does not have a parent group.</returns>
            <param name="item">    The item whose parent group is to be retrieved. The item     can correspond to a master data item or an item in the headers     or footers of a master group.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.GetStatContext(System.Windows.DependencyObject)">
            <summary>Gets the context from which a statistical function retrieves the values needed to calculate its result, and that exposes the results as properties that have the same names as the functions'  ResultPropertyName properties. </summary>
            <remarks>    The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the     StatContext property) and all the data items     will be used to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one      AverageFunction needs to be added to the      StatFunctions collection.</remarks>
            <returns>An object representing the context from which a statistical function retrieves the values needed to calculate its result, and that exposes the results as properties that have the same names as the functions'  ResultPropertyName properties.</returns>
            <param name="obj">The element whose statistical context to retrieve.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.IsGroupExpanded(System.Windows.Data.CollectionViewGroup)">
            <summary>Retrieves a value indicating whether the specified master group is expanded.</summary>
            <returns>true if the group is expanded; false otherwise.</returns>
            <remarks>This method will return the actual state of the group regardless of its parent's state. For example, if the group is expanded but contained in a parent group that is collapsed, true will be returned.</remarks>
            <param name="group">A CollectionViewGroup representing the master group whose state to query.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>Determines if the specified item is (or is eligible to be) its own ItemContainer.</summary>
            <returns>true if the item is its own ItemContainer; false otherwise.</returns>
            <param name="item">Specified item.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnAddingNewDataItem(Xceed.Wpf.DataGrid.AddingNewDataItemEventArgs)">
            <summary>Raises the  AddingNewDataItem event.</summary>
            <param name="e">An  AddingNewDataItemEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnInitializingInsertionRow(Xceed.Wpf.DataGrid.InitializingInsertionRowEventArgs)">
            <summary>Raises the  InitializingInsertionRow event.</summary>
            <param name="e">An  InitializingInsertionRowEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>    Reports a change to the     IsKeyboardFocusWithin property.</summary>
            <param name="e">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>    Reports a change to the Items     property.</summary>
            <param name="e">A NotifyCollectionChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>    Reports a change to the ItemsSource     property.</summary>
            <param name="oldValue">Old value of the ItemsSource property.</param>
            <param name="newValue">    New value of the ItemsSource     property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>Invoked when an unhandled KeyDown attached event reaches this element in its route.</summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnNotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the  PropertyChanged event.</summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>Invoked when an unhandled PreviewGotKeyboardFocus attached event reaches this element in its route.</summary>
            <param name="e">A KeyboardFocusChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>Invoked when an unhandled PreviewKeyDown attached event reaches this element in its route.</summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled PreviewMouseDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>Occurs when this element gets text in a device-independent manner.</summary>
            <param name="e">A TextCompositionEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>Prepares the specified element to display the specified item.</summary>
            <param name="element">Element used to display the specified item.</param>
            <param name="item">Specified item.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.Print">
            <summary>Prints the grid using the specified  PrintView and the  Generic print theme. </summary>
            <remarks>    The appearance of a grid when it is printed or exported     is determined by the      PrintView property.     If running under XBAP with FullTrust permissions, the     printing process will be asynchronous. If FullTrust permission     are not used, the process will be synchronous and will cause     the application to freeze until the process has     completed.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.Print">
            <summary>Displays a Print dialog that allows the grid to be printed.</summary>
            <remarks>    When using this overload of the Print     method, the print-job's name will be "document" and all pages     will be printed.     The appearance of a grid when it is printed or exported     is determined by the      PrintView property.     If running under XBAP with FullTrust permissions, the     printing process will be asynchronous. If FullTrust permission     are not used, the process will be synchronous and will cause     the application to freeze until the process has     completed.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.Print(System.Boolean)">
            <summary>Displays a Print dialog that allows the grid to be printed, as well as indicating whether the progress window is displayed.</summary>
            <remarks>    When using this overload of the Print     method, the print-job's name will be "document" and all pages     will be printed.     The appearance of a grid when it is printed or exported     is determined by the      PrintView property.     If running under XBAP with FullTrust permissions, the     printing process will be asynchronous. If FullTrust permission     are not used, the process will be synchronous and will cause     the application to freeze until the process has     completed.</remarks>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.Print(System.String,System.Boolean)">
            <summary>Displays a Print dialog that allows the grid to be printed specifying the title that will be used as the print-job, as well as indicating whether the progress window is displayed.</summary>
            <remarks>    The appearance of a grid when it is printed or exported     is determined by the      PrintView property.     If running under XBAP with FullTrust permissions, the     printing process will be asynchronous. If FullTrust permission     are not used, the process will be synchronous and will cause     the application to freeze until the process has     completed.</remarks>
            <param name="documentTitle">A string representing the title that will be used as the print-job name.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.Print(System.String,System.Boolean,System.Boolean)">
            <summary>Displays a Print dialog that allows the grid to be printed specifying the title that will be used as the print-job name and indicating whether the end user can specify the range of pages to print, as well as indicating whether the progress window is displayed.</summary>
            <remarks>    The appearance of a grid when it is printed or exported     is determined by the      PrintView property.     If running under XBAP with FullTrust permissions, the     printing process will be asynchronous. If FullTrust permission     are not used, the process will be synchronous and will cause     the application to freeze until the process has     completed.</remarks>
            <param name="documentTitle">A string representing the title that will be used as the print-job name.</param>
            <param name="userPageRangeEnabled">true if the end user can specify the range of pages to print; false if all pages will be printed.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.Print(System.String,System.Boolean,System.EventHandler`1{Xceed.Wpf.DataGrid.Print.ProgressEventArgs},System.Boolean)">
            <summary>Displays a Print dialog that allows the grid to be printed specifying the title that will be used as the print-job name, indicating whether the end user can specify the range of pages to print, and providing a callback that will handle the PrintProgression event, as well as indicating whether the progress window is displayed.</summary>
            <remarks>    The appearance of a grid when it is printed or exported     is determined by the      PrintView property.     If running under XBAP with FullTrust permissions, the     printing process will be asynchronous. If FullTrust permission     are not used, the process will be synchronous and will cause     the application to freeze until the process has     completed.</remarks>
            <param name="documentTitle">A string representing the title that will be used as the print-job name.</param>
            <param name="userPageRangeEnabled">true if the end user can specify the range of pages to print; false if all pages will be printed.</param>
            <param name="progressCallback">The callback that will handle the PrintProgression event.</param>
            <param name="showProgressWindow">true if the progress window is displayed; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.SetIsFixedFootersHost(System.Windows.DependencyObject,System.Boolean)">
            <summary>    Sets a value that, when set by a panel, identifies that     panel as the host that will contain all elements added to the     grid's fixed footers through the      FixedFooters property.</summary>
            <param name="obj">    The panel identified as the host that will contain all     elements added to the grid's fixed footers through the      FixedFooters property.</param>
            <param name="value">true to identify a a panel as the fixed-footers host; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.SetIsFixedHeadersHost(System.Windows.DependencyObject,System.Boolean)">
            <summary>    Sets a value that, when set by a panel, identifies that     panel as the host that will contain all elements added to the     grid's fixed headers through the      FixedHeaders property.</summary>
            <param name="obj">    The panel identified as the host that will contain all     elements added to the grid's fixed headers through the      FixedHeaders property.</param>
            <param name="value">true to identify a a panel as the fixed-headers host; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ToggleDetailExpansion(System.Object)">
            <summary>Toggles any details owned by the specified master data item. </summary>
            <remarks>When a detail is collapsed, it's context ( including any possible child contexts ), no longer exist.</remarks>
            <param name="dataItem">The master data item that owns the details to toggle. If the item has multiple sibling details, they will all be toggled. Cannot be $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridControl.ToggleGroupExpansion(System.Windows.Data.CollectionViewGroup)">
            <summary>Toggles the specified master group.</summary>
            <remarks>    The state of child groups will not be affected if their     parent's state is toggled.</remarks>
            <param name="group">A CollectionViewGroup representing the master group whose state is to be toggled. A collapsed group will be expanded and an expanded group will be collapsed.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.AllowDetailToggle">
            <summary>Gets or sets a value indicating whether the end user can toggle the expansion state of the grid's immediate child details. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.AutoCreateColumns">
            <summary>    Gets or sets a value indicating whether columns     should automatically be created when the grid is bound to an     ItemsSource.</summary>
            <remarks>    When binding a grid to a      DataGridCollectionView or      DataGridCollectionViewSource (in XAML), it is recommended     to use the      ItemProperties property to add or remove the columns the     will end up in the      Columns collection and leave the     AutoCreateColumns property to     true.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.AutoCreateDetailConfigurations">
            <summary>    Gets or sets a value indicating whether the detail     configurations of the grid are automatically created.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.CellEditorDisplayConditions">
            <summary>Gets or sets a value indicating under what conditions the editors for the cells are displayed.</summary>
            <remarks>    Including Always when setting the     CellEditorDisplayConditions property will have     a significant negative impact on performance.     If MouseOverCell and/or     MouseOverRow are included, the "blinking"     effect that can occur if a cell editor's height is larger than     the cell or row height, can be prevented by setting the cell or     row's MinHeight property, via a style, to the     height of the largest cell editor.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.CellErrorStyle">
            <summary>Gets or sets the style that will be used by the cells contained in the grid when their content fails the validation process.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.Columns">
            <summary>Gets a list of the columns contained in the grid.</summary>
            <remarks>All columns, regardless of their state, will be contained in the collection. To retrieve the columns that are only visible in the grid's viewport, consult the  VisibleColumns property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.CurrentColumn">
            <summary>    Gets or sets the grid's current master     column.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.CurrentContext">
            <summary>Gets the context in which the  global current item is located.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.CurrentItem">
            <summary>Gets or sets the grid's current master data item.</summary>
            <remarks>    The CurrentItem and SelectedItem     properties may, or may not, be the same data item.     The CurrentItem and      SelectedItem/SelectedItems     properties must be set to $$NULL$$ in order to reset them when     the NavigationBehavior property is set to     None.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.DefaultCellEditors">
            <summary>Gets a list of CellEditors that will be used, by default, for cells of the associated data type if none is explicitly provided.</summary>
            <remarks>The cell editors provided through the DefaultCellEditors property will only be used when a grid's  AutoCreateColumns property is set to true.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.DefaultDetailConfiguration">
            <summary>Gets or sets the detail configuration that will be applied to the child details of the grid and any descendant details when an explicit detail configuration is not provided for a specific detail relation. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.DefaultGroupConfiguration">
            <summary>Gets or sets the default configuration that will be applied to any groups in the grid for which an explicit group configuration is not provided.</summary>
            <remarks>    Default group configurations will be applied to master     groups in the case where neither a column nor group description     provide a      group configuration, and when a      group-configuration selector returns $$NULL$$ (no group     configuration was selected).     A default group configuration can be provided to a          grid or      detail configuration through their corresponding     DefaultGroupConfiguration properties.     If a default group configuration is not explicitly     provided, the theme's built-in group configuration will be     used.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.DetailConfigurations">
            <summary>Gets the list of the detail configurations that have been explicitly provided for specific detail relations and that will be applied to any corresponding details. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.EditTriggers">
            <summary>Gets or sets a value indicating what triggers will cause cells to enter edit mode.</summary>
            <remarks>    The conditions under which cell editors are     displayed are determined by the value of the          CellEditorDisplayConditions     Property, which can be defined for the entire grid     or per row. The EditTriggers and     CellEditorDisplayConditions properties work     independently of each other. For example, if the     EditTriggers property is set to     None and the     CellEditorDisplayConditions property is set to     CellIsCurrent, when a cell becomes current,     its editor will be displayed and the content of the cell can be     edited when focus is given to the cell editor.     A cell editor can be displayed without it being     in edit mode.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.GlobalCurrentColumn">
            <summary>Gets the column that is current in all the available contexts.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.GlobalCurrentItem">
            <summary>Gets the data item that is current in all the available contexts.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.GlobalSelectedItems">
            <summary>Gets the data items that are selected in all the available contexts.</summary>
            <remarks>The contexts in which the selected items are contained can be retrieved through the  SelectedContexts property. The selected items of an individual context can be retrieved through its  SelectedItems property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.GroupConfigurationSelector">
            <summary>Gets or sets a group-configuration selector that will be used to select the appropriate configuration for a master group based on its information and/or content.</summary>
            <remarks>Unlike a default group configuration, which applies to all groups, group-configuration selectors, such as the built-in  FieldNameGroupConfigurationSelector and  LevelGroupConfigurationSelector, can be used to select the appropriate configuration for a group based on its information and/or content using their respective  FieldNameGroupConfigurationSelectorItem and  LevelGroupConfigurationIndicator, which provide a group configuration and indicate for what specific field name or level that configuration applies.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.GroupLevelDescriptions">
            <summary>Gets a collection of GroupLevelDescription objects that contain information on each group level contained in the grid.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.HandlesScrolling">
            <summary>Gets a value indicating whether the grid supports scrolling.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.HasDetails">
            <summary>Gets a value indicating whether the grid has details. </summary>
            <remarks>The data-grid context of a grid always exists; however, detail contexts are created and exist only when they are expanded and will be destroyed when a detail is collapsed. A data-grid context's  HasDetails property can be queried to determine if it has details; however, it does not indicate whether the details are expanded and consequently have a context. To know if the details of a specific data item are expanded and therefore have a context, the  AreDetailsExpanded method can be used.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.HasValidationError">
            <summary>Gets a value indicating whether the content of one of the cells contained in the grid failed the validation process.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.HideSelection">
            <summary>    Gets or sets a value indicating whether the      selected rows should remain highlighted when the grid loses     focus.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.IsBeingEdited">
            <summary>Gets a value indicating whether a row is being edited.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.ItemScrollingBehavior">
            <summary>Gets or sets a value indicating how the data items in the grid are scrolled.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.ItemsPrimaryAxis">
            <summary>Gets or sets a value representing which axis of a DataRow must be completely visible in order to determine which DataRow will receive the focus when the page-up or page-down buttons are pressed.</summary>
            <remarks>    The primary axis determines which DataRow will receive     the focus when the page-up or page-down buttons are     pressed.     For example, let's assume that the focus is currently in     the top-left DataRow (item 0). If the page-down button is     pressed while the ItemsPrimaryAxis Property is set to     Vertical, the DataRow on the     bottom-right whose vertical axis is completely visible will     receive the focus (item 3). If set to     Horizontal, the DataRow on     the bottom-right whose horizontal axis is completely visible     will receive the focus (item 2), while setting the property to     Both will send the focus to the     DataRow whose vertical and horizontal axes are     completely visible (item 1). Setting the     ItemsPrimaryAxis property to     None indicates that neither the vertical nor     horizontal axes need to be completely visible and thus the     focus will be sent to the last DataRow on the     bottom-right that is at least partially visible (item     4).     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.ItemsSourceName">
            <summary>Gets or sets the name of the grid's items source.</summary>
            <remarks>The value of this property is used by the  HierarchichalGroupByControl to display the name of the source to which a "master" grid is bound.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.ItemsSourceNameTemplate">
            <summary>Gets or sets the template that is used to display the name of the grid's items source.</summary>
            <remarks>The value of this property is used by the  HierarchichalGroupByControl to display the name of the source to which a "master" grid is bound.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.NavigationBehavior">
            <summary>Gets or sets a value indicating how the focus navigates from one element to another in the grid.</summary>
            <remarks>    The      CurrentItem and      SelectedItem/SelectedItems     properties must be set to $$NULL$$ in order to reset them when     the NavigationBehavior property is set to     None.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.PagingBehavior">
            <summary>Gets or sets a value representing the paging behavior of the grid when the page-up and page-down buttons are pressed.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.PreserveExtendedSelection">
            <summary>Gets or sets a value indicating whether items that have been selected using the extended selection mode should be deselected when they are clicked.</summary>
            <remarks>This property is taken into consideration only when the grid's  SelectionMode property is set to Extended.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.PrintView">
            <summary>Gets or sets the PrintView, which will be used when printing or exporting the grid. </summary>
            <remarks>Grids will be printed using the  GenericPrintTheme.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.ReadOnly">
            <summary>Gets or sets a value indicating whether the values of the cells contained in the grid can be edited.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.SelectedContexts">
            <summary>Gets the contexts in which items are selected.</summary>
            <remarks>The global selected items can be retrieved through the  GlobalSelectedItems property. The selected items of an individual context can be retrieved through its  SelectedItems property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.SelectedIndex">
            <summary>    Gets or sets the index of the currently selected     data item.</summary>
            <remarks>    The SelectedItems, SelectedItem, and     SelectedIndex properties represent     data items and not DataRows.     In the case where more than 1 data item is selected in a     grid, the SelectedItem property will return the first data item     in the SelectedItems collection and the     SelectedIndex property will return the index     of this same item.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.SelectedItem">
            <summary>Gets or sets the selected data item.</summary>
            <remarks>    The SelectedItems, SelectedItem, and     SelectedIndex properties represent data items     and not DataRows.     In the case where more than 1 data item is selected in a     grid, the SelectedItem property will return     the first data item in the SelectedItems collection and the     SelectedIndex property will return the index of this same     item.     The CurrentItem and SelectedItem     properties may or may not be the same data item.     The      CurrentItem and SelectedItem/SelectedItems     properties must be set to $$NULL$$ in order to reset them when     the NavigationBehavior property is set to     None.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.SelectedItems">
            <summary>Gets a collection of the data items that are currently selected in the grid.</summary>
            <remarks>    The SelectedItems,      SelectedItem, and      SelectedIndex properties represent data     items and not DataRows.     In the case where more than 1 data item is selected in a     grid, the SelectedItem property will return the first data item     in the SelectedItems collection and the     SelectedIndex property will return the index of this same     item.     The      CurrentItem and      SelectedItem/SelectedItems properties must     be set to $$NULL$$ in order to reset them when the     NavigationBehavior property is set to     None.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.SelectionMode">
            <summary>    Gets or sets a value indicating how data items in the     grid are selected.</summary>
            <remarks>The data items contained by the selected DataRows will be added to the SelectedItems collection.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.UpdateSourceTrigger">
            <summary>Gets or sets a value representing the moment when data is to be written to the underlying data source.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.ValidationMode">
            <summary>Gets or sets a value representing the moment when the content of a cell is validated.</summary>
            <remarks>    Regardless of the value of the     ValidationMode property,     ExceptionValidationRule objects will only be     used when an attempt is made to commit modified data (i.e., a     row exists edit mode).</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.View">
            <summary>Gets or sets the view applied to the grid.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridControl.VisibleColumns">
            <summary>Gets a list of the columns whose Visible property is true, ordered according to their  VisiblePositions.</summary>
            <remarks>    The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.AllowDetailToggleProperty">
            <summary>Identifies the  AllowDetailToggle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.AutoCreateColumnsProperty">
            <summary>Identifies the AutoCreateColumns dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.AutoCreateDetailConfigurationsProperty">
            <summary>Identifies the  AutoCreateDetailConfigurations dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.CellEditorDisplayConditionsProperty">
            <summary>Identifies the CellEditorDisplayConditions dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.CellErrorStyleProperty">
            <summary>Identifies the  CellErrorStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.ColumnsProperty">
            <summary>Identifies the Columns dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.DataGridContextProperty">
            <summary>Identifies the DataGridContext attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.DefaultDetailConfigurationProperty">
            <summary>Identifies the  DefaultDetailConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.DefaultGroupConfigurationProperty">
            <summary>Identifies the  DefaultGroupConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.DetailConfigurationsProperty">
            <summary>Identifies the  DetailConfigurations dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.EditTriggersProperty">
            <summary>Identifies the EditTriggers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.GroupConfigurationSelectorProperty">
            <summary>Identifies the  GroupConfigurationSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.GroupLevelDescriptionsProperty">
            <summary>Identifies the  GroupLevelDescriptions dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.HasExpandedDetailsProperty">
            <summary>Identifies the HasExpandedDetails attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.HasValidationErrorProperty">
            <summary>Identifies the  HasValidationError dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.HideSelectionProperty">
            <summary>Identifies the HideSelection dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.IsBeingEditedProperty">
            <summary>Identifies the  IsBeingEdited dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.IsFixedFootersHostProperty">
            <summary>Identifies the IsFixedFootersHost attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.IsFixedHeadersHostProperty">
            <summary>Identifies the IsFixedHeadersHost attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.ItemScrollingBehaviorProperty">
            <summary>Identifies the  ItemScrollingBehavior dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.ItemsPrimaryAxisProperty">
            <summary>Identifies the ItemsPrimaryAxis dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.ItemsSourceNameTemplateProperty">
            <summary>Identifies the  ItemsSourceNameTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.NavigationBehaviorProperty">
            <summary>Identifies the  NavigationBehavior dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.PagingBehaviorProperty">
            <summary>Identifies the  PagingBehavior dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.ParentDataGridControlProperty">
            <summary>Identifies the ParentDataGridControl attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.PreserveExtendedSelectionProperty">
            <summary>Identifies the  PreserveExtendedSelection dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.PrintViewProperty">
            <summary>Identifies the  PrintView dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.ReadOnlyProperty">
            <summary>Identifies the ReadOnly dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.SelectedIndexProperty">
            <summary>Identifies the SelectedIndex dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.SelectedItemProperty">
            <summary>Identifies the SelectedItem dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.SelectedItemsProperty">
            <summary>Identifies the SelectedItems dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.SelectionModeProperty">
            <summary>Identifies the SelectionMode dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.StatContextProperty">
            <summary>Identifies the StatContext attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.UpdateSourceTriggerProperty">
            <summary>Identifies the  UpdateSourceTrigger dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.ValidationModeProperty">
            <summary>Identifies the  ValidationMode dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.ViewProperty">
            <summary>Identifies the View dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridControl.VisibleColumnsProperty">
            <summary>Identifies the VisibleColumns dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridControl.AddingNewDataItem">
            <summary>Raised when a new data item is about to be added to the grid.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridControl.InitializingInsertionRow">
            <summary>Raised when an InsertionRow in the grid is being initialized.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridControl.PropertyChanged">
            <summary>Raised when the value of a property changes.</summary>
            <remarks>    The PropertyChanged event can indicate     all properties on the object have changed by using either     $$NULL$$ or String.Empty as the property name in the     PropertyChangedEventArgs.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridCreatingNewItemEventArgs">
            <summary>Provides information that can be used to create a new item in the  CreatingNewItem event.</summary>
            <remarks>    If the insertion of new items is to be handled manually,     a new item must be provided and the      Handled property set to     true to indicate that the process will be     handled manually. If a new item is provided but the     Handled property was not set or was set to     false, the item will be ignored and a new item     will be created by the      DataGridCollectionView (if     possible). An InvalidOperationException will     be thrown if the Handled property is set to     true but a new item is not provided.     If a new item is not provided and the event is not     handled, an attempt will be made by the     DataGridCollectionView to create a new     item.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridCreatingNewItemEventArgs.#ctor(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object,System.Boolean)">
            <summary>Initializes a new instance of the DataGridCreatingNewItemEventArgs class specify the collection view to which the item will potentially be added and allowing the process to be canceled.</summary>
            <remarks>    If the insertion of new items is to be handled manually,     a new item must be provided and the      Handled property set to     true to indicate that the process will be     handled manually. If a new item is provided but the     Handled property was not set or was set to     false, the item will be ignored and a new item     will be created by the      DataGridCollectionView (if     possible). An InvalidOperationException will     be thrown if the Handled property is set to     true but a new item is not provided.     If a new item is not provided and the event is not     handled, an attempt will be made by the     DataGridCollectionView to create a new     item.</remarks>
            <param name="collectionView">The  DataGridCollectionView to which the item will potentially be added.</param>
            <param name="newItem">The new item to add to the collectionView. Will be $$NULL$$ by default (see Remarks).</param>
            <param name="cancel">true to cancel the creation of the new item; false to let the process continue.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCreatingNewItemEventArgs.CollectionView">
            <summary>Gets the  DataGridCollectionView to which the item will potentially be added.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCreatingNewItemEventArgs.Handled">
            <summary>Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.</summary>
            <remarks>    If the insertion of new items is to be handled manually,     a new item must be provided and the      Handled property set to     true to indicate that the process will be     handled manually. If a new item is provided but the     Handled property was not set or was set to     false, the item will be ignored and a new item     will be created by the      DataGridCollectionView (if     possible). An InvalidOperationException will     be thrown if the Handled property is set to     true but a new item is not provided.     If a new item is not provided and the event is not     handled, an attempt will be made by the     DataGridCollectionView to create a new     item.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridCreatingNewItemEventArgs.NewItem">
            <summary>Gets or sets the new item to add to the  CollectionView.</summary>
            <remarks>    If the insertion of new items is to be handled manually,     a new item must be provided and the      Handled property set to     true to indicate that the process will be     handled manually. If a new item is provided but the     Handled property was not set or was set to     false, the item will be ignored and a new item     will be created by the      DataGridCollectionView (if     possible). An InvalidOperationException will     be thrown if the Handled property is set to     true but a new item is not provided.     If a new item is not provided and the event is not     handled, an attempt will be made by the     DataGridCollectionView to create a new     item.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridDetailDescription">
            <summary>The DataGridDetailDescription class provides information about a detail relation whose content will be displayed as the details of the master data items in a grid or as the data items of another detail. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridDetailDescription.GetDetailsForParentItem(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object)">
            <summary>Retrieves the details for the specified parent data item.</summary>
            <returns>An IEnumerable representing the details of the specified data item.</returns>
            <param name="parentCollectionView">The parent  DataGridCollectionView.</param>
            <param name="parentItem">The parent data item whose details are to be retrieved.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridDetailDescription.Initialize(Xceed.Wpf.DataGrid.DataGridCollectionView)">
            <summary>Initializes the detail using the information retrieved from the specified parent collection view.</summary>
            <remarks>The Initialize method is usually overridden in the case where required information, such as a property descriptor, cannot be provided in XAML.</remarks>
            <param name="parentCollectionView">A  DataGridCollectionView representing the parent collection view from which the information to initialize the detail is retrieved.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.AutoCreateDetailDescriptions">
            <summary>Gets or sets a value indicating whether detail descriptions are to be automatically created.</summary>
            <remarks>    Automatic creation of detail descriptions can be disabled     by setting the      AutoCreateDetailDescriptions property of the     DataGridCollectionViewSource to     false (by default, true) or     by specifying so when      creating an instance of the DataGridCollectionView.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.AutoCreateItemProperties">
            <summary>Gets or sets a value indicating whether item properties are to be automatically created.</summary>
            <remarks>    Automatic creation of item properties can be disabled by     setting the      AutoCreateItemProperties property of the     DataGridCollectionViewSource to     false (by default, true) or     by specifying so when      creating an instance of the DataGridCollectionView.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.AutoFilterMode">
            <summary>Gets or sets a value indicating how automatic filtering of the data items in the detail will be performed.</summary>
            <remarks>If a column does not need to support automatic filtering, it is recommended to set its corresponding DataGridItemProperty's  CalculateDistinctValues property or the detail description's  DefaultCalculateDistinctValues property to false.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.AutoFilterValues">
            <summary>Gets a dictionary that contains a list of the detail's DataGridItemProperty objects with their corresponding auto-filter values.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.DefaultCalculateDistinctValues">
            <summary>Get or sets the default value of the  CalculateDistinctValues property when a  DataGridItemProperty has not explicitly set its value.</summary>
            <remarks>If a column does not need to support automatic filtering, it is recommended to set its corresponding DataGridItemProperty's  CalculateDistinctValues to false or set the DataGridCollectionViewSource or DataGridDetailDescription's  DefaultCalculateDistinctValues properties to false and only set CalculateDistinctValues to true for the item properties that will support auto-filtering</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.DetailDescriptions">
            <summary>Gets a collection of  DataGridDetailDescription objects that provide information on the details that will be contained in the detail, including sorting, grouping, and child detail descriptions.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.DistinctValuesConstraint">
            <summary>Gets or sets a value representing the constraint applied to the  distinct values of the underlying  DataGridCollectionView when automatically filtering data items.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.GroupDescriptions">
            <summary>Gets a collection of group descriptions that describe how the items in the detail are grouped.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.ItemProperties">
            <summary>Gets a collection of  DataGridItemProperty objects, which represent the items that are contained in the detail.</summary>
            <remarks>The ItemProperties collection contains a list of  DataGridItemProperty objects that can be added or removed and that contain information relative to their corresponding item (you could consider these items to be the columns that will end up in a grid).</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.RelationName">
            <summary>Gets or sets the relation name of the detail.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.SortDescriptions">
            <summary>Gets a collection of SortDescription objects that describe how the items in the collection are sorted in the detail.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.StatFunctions">
            <summary>Gets a collection of the statistical functions whose results can be used by various elements throughout the detail.</summary>
            <remarks>    Each statistical function must have a unique      ResultPropertyName, and     becomes immutable once it has been added to the list. Only the     statistical functions that are added to the     StatFunctions collection of a detail can be     used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if a      StatRow is contained in a group's footers, its     statistical context will be the group, and the results of any     statistical functions displayed in the row will be calculated     according to the values of the data items in the group. If the     row is contained in the footers of a grid, then its statistical     context is provided by a grid (through its     StatContext property) and all the master data     items will be used to calculate the results.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.Title">
            <summary>Gets or sets the title that can be used to provide a user-friendly name for the detail configuration associated with the detail description.</summary>
            <remarks>By default, a detail description's title will be displayed in any corresponding  HierarchicalGroupByControlNode.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescription.TitleTemplate">
            <summary>Gets or sets the template that will be used to display the description's title.</summary>
            <remarks>By default, a detail desscription's title will be displayed in any corresponding  HierarchicalGroupByControlNode.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection">
            <summary>Contains a collection of  DataGridDetailDescription objects. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection.#ctor">
            <summary>Initializes a new instance of the DataGridDetailDescriptionCollection class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection.#ctor">
            <summary>Initializes a new instance of the DataGridDetailDescriptionCollection class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection.#ctor(System.Collections.Generic.List`1{Xceed.Wpf.DataGrid.DataGridDetailDescription})">
            <summary>Initializes a new instance of the DataGridDetailDescriptionCollection specifying the list of the  DataGridDetailDescription objects it will contain.</summary>
            <param name="detailDescriptions">A list of the  DataGridDetailDescription objects that will be contained in the collection.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection.IndexOf">
            <summary>Retrieves the index of the detail description with the specified relation name.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection.IndexOf(System.String)">
            <summary>Retrieves the index of the detail description with the specified relation name.</summary>
            <param name="detailName">The name of the detail description whose index to retrieve.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection.InsertItem(System.Int32,Xceed.Wpf.DataGrid.DataGridDetailDescription)">
            <summary>Inserts a  DataGridDetailDescription into the collection at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the item.</param>
            <param name="item">The  DataGridDetailDescription to insert at index.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection.SetItem(System.Int32,Xceed.Wpf.DataGrid.DataGridDetailDescription)">
            <summary>Replaces the detail description at the specified index.</summary>
            <param name="index">The zero-based index of the detail description to replace.</param>
            <param name="item">The new detail description.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection.Item">
            <summary>Gets the  DataGridDetailDescription at the specified index or with the specified name.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridDetailDescriptionCollection.Item(System.String)">
            <summary>Gets the  DataGridDetailDescription with the specified name.</summary>
            <param name="detailName">A string representing the name of the detail.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridException">
            <summary>Exception that is thrown when a DataGrid-specific exception occurs.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridException.#ctor">
            <summary>Initializes a new instance of the DataGridException class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridException.#ctor">
            <summary>Initializes a new instance of the DataGridException class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the DataGridException class with serialized data.</summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridException.#ctor(System.String)">
            <summary>Initializes a new instance of the DataGridException class with the specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the DataGridException class with the specified error message and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that initially caused the current exception the be thrown.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridGroupDescription">
            <summary>Class that describes the grouping of items using a property name as the criteria.</summary>
            <remarks>    This class is used by the     DataGridCollectionView class to group items;     however, it can also be used by the standard     CollectionView class.     The use of the GroupNames property is     not supported by the DataGridGroupDescription     class.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridGroupDescription.#ctor">
            <summary>Initializes a new instance of the  DataGridGroupDescription class.</summary>
            <remarks>    The use of the GroupNames property is     not yet supported by the     DataGridGroupDescription class.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridGroupDescription.#ctor">
            <summary>Initializes a new instance of the DataGridGroupDescription class.</summary>
            <remarks>    The use of the GroupNames property is     not yet supported by the     DataGridGroupDescription class.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridGroupDescription.#ctor(System.String)">
            <summary>Initializes a new instance of the the DataGridGroupDescription class specifying the name of the property that is used to group the items.</summary>
            <remarks>    The use of the GroupNames property is     not yet supported by the     DataGridGroupDescription class.</remarks>
            <param name="propertyName">The name of the property that is used to group that items.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridGroupDescription.GetPropertyValue(System.Object)">
            <summary>Retrieves the property value for the specified item.</summary>
            <returns>An object representing the property value for the specified item.</returns>
            <param name="item">The item for which to retrieve the property value.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridGroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
            <summary>Retrieves the group name for the specified item.</summary>
            <returns>An object representing the group name for the specified item.</returns>
            <param name="item">The item whose group name is to be retrieved.</param>
            <param name="level">A zero-based value representing the group level.</param>
            <param name="culture">The System.Globalization.CultureInfo to supply to the converter.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridGroupDescription.NamesMatch(System.Object,System.Object)">
            <summary>Returns a value indicating whether the group name and the item name match, which means that the item belongs to the group.</summary>
            <remarks>The DataGridCollectionView has been optimized to make use of DataGridGroupDescriptions to group the items in the underlying collection through a Hashtable rather than through the NamesMatch method. For this reason, the NamesMatch method has been sealed to prevent users from implementing custom name-matching criteria, which would be ignored by the DataGridCollectionView.</remarks>
            <returns>true if the names match—indicating that the item belongs to the group; false otherwise.</returns>
            <param name="groupName">An object representing the name of the group to verify.</param>
            <param name="itemName">An object representing the name of the item to verify.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridGroupDescription.GroupConfiguration">
            <summary>Gets or sets the group configuration that will be applied to the groups created by this group description.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridGroupDescription.PropertyName">
            <summary>Gets or sets the name of the property that is used to determine which group an item belongs to.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridGroupDescription.SortComparer">
            <summary>Gets or sets the data comparer that will be used to sort the groups in a grid.</summary>
            <remarks>If $$NULL$$, the default data-type comparer will be used.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridInternalException">
            <summary>Exception that is thrown when an unexpected, DataGrid-specific exception occurs.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridInternalException.#ctor">
            <summary>Initializes a new instance of the  DataGridInternalException class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridInternalException.#ctor">
            <summary>Initializes a new instance of the  DataGridInternalException class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridInternalException.#ctor(System.Exception)">
            <summary>Initializes a new instance of the  DataGridInternalException class with the specified inner exception.</summary>
            <param name="innerException">The exception that initially caused the current exception the be thrown.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the  DataGridInternalException class with serialized data.</summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridInternalException.#ctor(System.String)">
            <summary>Initializes a new instance of the  DataGridInternalException class with the specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridInternalException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the  DataGridInternalException class with the specified error message and inner exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that initially caused the current exception the be thrown.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridItemCancelEventArgs">
            <summary>Provides information for cancelable events.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemCancelEventArgs.#ctor(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object,System.Boolean)">
            <summary>    Initializes a new instance of the     DataGridtemCancelEventArgs class specifying     the item, the collection view to which it is to be added or     removed, and a value indicating whether the process is to be     canceled.</summary>
            <param name="collectionView">The  DataGridCollectionView to which the item will potentially be added or removed.</param>
            <param name="item">The item to add to or removed from the collectionView.</param>
            <param name="cancel">true to cancel the addition or removal of the item; false to let the process continue.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemCancelEventArgs.Cancel">
            <summary>Gets or sets a value indicating whether the process is to be canceled.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridItemEventArgs">
            <summary>Provides information for events that manipulate items.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemEventArgs.#ctor(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object)">
            <summary>    Initializes a new instance of the     DataGridtemEventArgs class specifying the item     and the collection view to which it is to be added or     removed.</summary>
            <param name="collectionView">The  DataGridCollectionView to which the item will potentially be added or removed.</param>
            <param name="item">The item to add to or removed from the collectionView.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemEventArgs.CollectionView">
            <summary>Gets the  DataGridCollectionView to which the item will potentially be added or removed.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemEventArgs.Item">
            <summary>Gets the item to add to or remove from the  CollectionView.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridItemHandledEventArgs">
            <summary>    Provides information for events that can be handled     completely in an event handler.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemHandledEventArgs.#ctor(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object)">
            <summary>    Initializes a new instance of the     DataGridtemHandledEventArgs class specifying     the item and the collection view to which it is to be added or     removed.</summary>
            <param name="collectionView">The  DataGridCollectionView to which the item will potentially be added or removed.</param>
            <param name="item">The item to add to or removed from the collectionView.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemHandledEventArgs.Handled">
            <summary>Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridItemProperty">
            <summary>Represents the characteristics of a property for an item in a  DataGridCollectionView.</summary>
            <remarks>    A DataGridItemProperty will be created     for each property in the underlying data source and can be     retrieved through the      ItemProperties property of the      DataGridCollectionView,      DataGridCollectionViewSource (in XAML), or      DataGridDetailDescription classes.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor">
            <summary>Initializes a new instance of the DataGridItemProperty class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor">
            <summary>Initializes a new instance of the DataGridItemProperty class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>Initializes a new instance of the DataGridItemProperty class specifying the PropertyDescriptor that determines the characteristics of a property for an item in a  DataGridCollectionView.</summary>
            <param name="propertyDescriptor">The PropertyDescriptor that determines the characteristics of a property for an item in a  DataGridCollectionView.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor(System.String,System.ComponentModel.PropertyDescriptor)">
            <summary>Initializes a new instance of the DataGridItemProperty class specifying the name and the PropertyDescriptor that determines the characteristics of a property for an item in a  DataGridCollectionView.</summary>
            <param name="name">A string representing the name of a property in a  DataGridCollectionView.</param>
            <param name="propertyDescriptor">The PropertyDescriptor that determines the characteristics of a property for an item in a  DataGridCollectionView.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor(System.String,System.String,System.String,System.Type)">
            <summary>Initializes a new instance of the DataGridItemProperty class specifying the name of the property, its value and X paths, and its data type</summary>
            <param name="name">    Initializes a new instance of the     DataGridItemProperty class specifying the     name, data type, value, and X paths.</param>
            <param name="valueXPath">The XPath query that returns the value on the XML binding source to use</param>
            <param name="valuePath">The path to the binding source property.</param>
            <param name="dataType">The type of the data as it is to be represented by the item property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor(System.String,System.String,System.String,System.Type,System.Boolean)">
            <summary>Initializes a new instance of the DataGridItemProperty class specifying the name of the property, its value and X paths, its data type, and indicating whether it is read-only</summary>
            <param name="name">    Initializes a new instance of the     DataGridItemProperty class specifying the     name, data type, value, and X paths.</param>
            <param name="valueXPath">The XPath query that returns the value on the XML binding source to use</param>
            <param name="valuePath">The path to the binding source property.</param>
            <param name="dataType">The type of the data as it is to be represented by the item property.</param>
            <param name="isReadOnly">true if the DataGridItemProperty is read-only; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor(System.String,System.String,System.Type)">
            <summary>    Initializes a new instance of the     DataGridItemProperty class specifying the name     of the property, its value path, and its data type.</summary>
            <param name="name">A string representing the name of a property in a  DataGridCollectionView.</param>
            <param name="valuePath">A string representing the path to access the value of a property for an item in a DataGridCollectionView.</param>
            <param name="dataType">The property's data type.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor(System.String,System.String,System.Type,System.Boolean)">
            <summary>Initializes a new instance of the DataGridItemProperty class specifying the name of the property, its value path, its data type, and indicating whether it is read-only.</summary>
            <param name="name">A string representing the name of a property in a  DataGridCollectionView.</param>
            <param name="valuePath">A string representing the path to access the value of a property for an item in a DataGridCollectionView.</param>
            <param name="dataType">The property's data type.</param>
            <param name="isReadOnly">true if the DataGridItemProperty is read-only; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor(System.String,System.Type)">
            <summary>    Initializes a new instance of the     DataGridItemProperty class specifying the name     of the property and its value path.</summary>
            <param name="name">A string representing the name of a property in a  DataGridCollectionView.</param>
            <param name="dataType">The property's data type.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.#ctor(System.String,System.Type,System.Boolean)">
            <summary>    Initializes a new instance of the     DataGridItemProperty class specifying the name     of the property, its value path, and indicating whether it is     readonly.</summary>
            <param name="name">A string representing the name of a property in a  DataGridCollectionView.</param>
            <param name="dataType">The property's data type.</param>
            <param name="isReadOnly">true if the DataGridItemProperty is readonly; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.GetValue(System.Object)">
            <summary>Retrieves the current value of the property for the specified component.</summary>
            <returns>The current value for the property for the specified component.</returns>
            <remarks>The DataType property represents the type of the DataGridItemProperty and not the type of the corresponding field in the underlying data source. As such, both the  GetValue and  SetValue methods will use values of the type specified by the DataType property.</remarks>
            <param name="component">An object representing the component from which the current value of the property is retrieved.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemProperty.SetValue(System.Object,System.Object)">
            <summary>Sets the current value of the property for the specified component.</summary>
            <returns>The current value for the property for the specified component.</returns>
            <remarks>The DataType property represents the type of the DataGridItemProperty and not the type of the corresponding field in the underlying data source. As such, both the  GetValue and  SetValue methods will use values of the type specified by the DataType property.</remarks>
            <param name="component">An object representing the component from which the current value of the property is retrieved.</param>
            <param name="value">The current value for the property for the specified component.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.CalculateDistinctValues">
            <summary>Gets or sets a value indicating whether distinct values are to be calculated for the property. </summary>
            <remarks>If a column does not need to support automatic filtering, it is recommended to set its corresponding DataGridItemProperty's  CalculateDistinctValues or the DataGridCollectionViewSource's  DefaultCalculateDistinctValues properties to false.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.Converter">
            <summary>Gets or sets the converter to convert values to and from the corresponding field in the underlying data source.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.ConverterCulture">
            <summary>Gets or sets the culture in which to evaluate the converter</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.ConverterParameter">
            <summary>Gets or sets the parameter to pass to the converter</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.DataType">
            <summary>Gets or sets the property's data type</summary>
            <remarks>The DataType property represents the type of the DataGridItemProperty and not the type of the corresponding field in the underlying data source. As such, both the  GetValue and  SetValue methods will use values of the type specified by the DataType property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.IsReadOnly">
            <summary>Gets or sets a value indicating whether the property is readonly.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.MaxDistinctValues">
            <summary>Gets or sets a value indicating the maximum number of distinct values to calculate. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.Name">
            <summary>Gets or sets the name of a property in a  DataGridCollectionView.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.PropertyDescriptor">
            <summary>Gets or sets the PropertyDescriptor that determines the characteristics of a property for an item in a  DataGridCollectionView.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.SortComparer">
            <summary>Gets or sets the custom data comparer that will be used to sort the values of the data-grid item property's associated column.</summary>
            <remarks>If $$NULL$$, the default comparer will be used.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.Title">
            <summary>Gets or sets the property's title.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.ValuePath">
            <summary>Gets or sets the path to access the value of a property for an item in a DataGridCollectionView.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemProperty.ValueXPath">
            <summary>Gets or sets the XPath query that returns the value on the XML binding source to use</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DataGridItemProperty.PropertyChanged">
            <summary>Raised when the value of a property changes.</summary>
            <remarks>The PropertyChanged event can indicate all properties on the object have changed by using either $$NULL$$ or String.Empty as the property name in the PropertyChangedEventArgs.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridItemPropertyCollection">
            <summary>Contains a collection of DataGridItemProperty objects.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemPropertyCollection.#ctor">
            <summary>Initializes a new instance of the DataGridItemPropertyCollection class specifying the DataGridItemProperty objects that it will contain.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemPropertyCollection.IndexOf">
            <summary>Retrieves the index of the specified DataGridItemProperty.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemPropertyCollection.IndexOf(System.String)">
            <summary>Retrieves the index of the DataGridItemProperty with the specified name.</summary>
            <returns>The zero-based index of the DataGridItemProperty in the collection.</returns>
            <param name="name">The name of the DataGridItemProperty to retrieve.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemPropertyCollection.InsertItem(System.Int32,Xceed.Wpf.DataGrid.DataGridItemProperty)">
            <summary>Inserts a DataGridItemProperty object into the collection at the specified index.</summary>
            <param name="index">The zero-based index at which to insert the item.</param>
            <param name="item">The DataGridItemProperty object to insert at index</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemPropertyCollection.SetItem(System.Int32,Xceed.Wpf.DataGrid.DataGridItemProperty)">
            <summary>Replaces the DataGridItemProperty at the specified index.</summary>
            <param name="index">The zero-based index of the DataGridItemProperty to replace.</param>
            <param name="item">The new DataGridItemProperty.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemPropertyCollection.Item">
            <summary>Gets a DataGridItemProperty object.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemPropertyCollection.Item(System.String)">
            <summary>Gets the DataGridItemProperty object that has the specified name.</summary>
            <param name="name">A string representing the name of the DataGridItemProperty object to retrieve.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridItemRemovedEventArgs">
            <summary>Provides information on an item that was removed from a collection view.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemRemovedEventArgs.#ctor(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object,System.Int32)">
            <summary>    Initializes a new instance of the     DataGridtemRemovedEventArgs class specifying     the item and the collection view from which it was     removed.</summary>
            <param name="collectionView">The  DataGridCollectionView to which the item was removed.</param>
            <param name="item">The item that was removed.</param>
            <param name="index">The zero-based index at which the item was removed.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemRemovedEventArgs.Index">
            <summary>Gets the index at which the item was removed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridItemsHost">
            <summary>    Base class whose derived classes are used in DataGridControl     templates as a replacement for the     ItemsPresenter and that will contain the data     items as well as the items contained in     non-fixed header and footer sections and whose     containers are created from the associated      CustomItemContainerGenerator.</summary>
            <remarks>Derived classes should be used rather than providing a panel through the DataGridControl.ItemsPanel property.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemsHost.CreateChildCollection">
            <summary>Creates an empty list of UIElements that will contain the containers that are generated for data items and items contained in non-fixed header and footer sections.</summary>
            <returns>An empty IList&lt;UIElement&gt; collection that will contain the containers that are generated for data items and items contained in the non-fixed header and footer sections.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemsHost.GetVisualChild(System.Int32)">
            <summary>Gets the index of a visual child element.</summary>
            <returns>The visual child element at the specified index.</returns>
            <param name="index">The zero-based index of the visual child element to return.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemsHost.OnContainersRemoved(System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>Indicates that containers in the  CustomItemContainerGenerator will no longer be used/recycled and can be removed from the items host.</summary>
            <param name="removedContainers">A list of the containers that will no longer be used/recycled and that can be removed from the items host.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemsHost.OnItemsAdded(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32)">
            <summary>Indicates that items have been added to the data source or through the expansion of groups or details and need to be added to the items host.</summary>
            <param name="position">The GeneratorPosition at which the items were added.</param>
            <param name="index">The zero-based index at which the item was added.</param>
            <param name="itemCount">The number of items that were added.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemsHost.OnItemsMoved(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>Indicates that items have been moved in the data source and need to be repositioned in the items host.</summary>
            <param name="position">The GeneratorPosition to which the items were moved.</param>
            <param name="index">The zero-based index to which the item was moved.</param>
            <param name="oldPosition">The old GeneratorPosition from which the items were moved.</param>
            <param name="oldIndex">The old index.</param>
            <param name="itemCount">The number of items that were moved.</param>
            <param name="itemUICount">The number of containers that were moved.</param>
            <param name="affectedContainers">A list of the containers that were affected by the move.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemsHost.OnItemsRemoved(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>Indicates that items have been removed from the data source or through the collapse of groups or details and need to be removed to the items host.</summary>
            <param name="position">The new GeneratorPosition.</param>
            <param name="index">The zero-based index at which the item was removed.</param>
            <param name="oldPosition">The GeneratorPosition at which the items were removed.</param>
            <param name="oldIndex">The old index.</param>
            <param name="itemCount">The number of items that were removed.</param>
            <param name="itemUICount">The number of containers that were removed.</param>
            <param name="affectedContainers">A list of the containers that were affected by the removal of items.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemsHost.OnItemsReplaced(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>Indicates that items have been replaced in the data source and need to be removed from the items host.</summary>
            <param name="position">The new GeneratorPosition.</param>
            <param name="index">The zero-based index of the item that was replaced.</param>
            <param name="oldPosition">The GeneratorPosition at which the items were remplaced.</param>
            <param name="oldIndex">The old index.</param>
            <param name="itemCount">The number of items that were remplaced.</param>
            <param name="itemUICount">The number of containers that were replaced.</param>
            <param name="affectedContainers">A list of the containers that were affected by the replacement of the items.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridItemsHost.OnItemsReset">
            <summary>Indicates that the data source was reset and that the items host should clear its children.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemsHost.Children">
            <summary>Gets the child UIElements contained in the items host.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemsHost.CustomItemContainerGenerator">
            <summary>Gets the  CustomItemContainerGenerator that creates the containers for the data items as well as the items located in the non-fixed header and footer sections of a grid, its groups, and its details.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemsHost.LogicalChildren">
            <summary>Gets an enumerator for logical child elements of this element</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemsHost.ParentDataGridControl">
            <summary>Gets the parent DataGridControl of the items host.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridItemsHost.VisualChildrenCount">
            <summary>Gets the number of visual child elements within this element.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridRemovingItemEventArgs">
            <summary>Provides information on the new item that is about to be removed in the  RemovingItem event.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridRemovingItemEventArgs.#ctor(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the DataGridRemovingItemEventArgs class specifying the item, the collection view from which it is to be removed, and a value indicating whether the process is to be canceled.</summary>
            <param name="collectionView">The  DataGridCollectionView from which the item is to be removed.</param>
            <param name="item">The item about to be removed.</param>
            <param name="index">The zero-based index at which the item is to be removed.</param>
            <param name="cancel">true if the process is to be canceled; false otherwise.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridRemovingItemEventArgs.Index">
            <summary>Gets the index at which the item is to be removed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataGridVirtualizingPanel">
            <summary>    Arranges and virtualizes the content of a DataGridControl.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridVirtualizingPanel.GetItemIndex(System.Windows.DependencyObject)">
            <summary>Gets the index of an item contained in the DataGridVirtualizingPanel.</summary>
            <returns>The zero-based index of the index.</returns>
            <param name="obj">The item whose index to retrieve.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridVirtualizingPanel.OnClearChildren">
            <summary>Called when the collection of child elements is cleared by the panel.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridVirtualizingPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>Called when the Items collection associated with the panel's containing DataGridControl is changed.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="args">An ItemsChangedEventargs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataGridVirtualizingPanel.SetItemIndex(System.Windows.DependencyObject,System.Int32)">
            <summary>Sets the index of an item contained in the DataGridVirtualizingPanel.</summary>
            <param name="obj">The item whose index to set</param>
            <param name="value">The zero-based index of the item.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridVirtualizingPanel.CustomItemContainerGenerator">
            <summary>Gets the ItemContainerGenerator associated with this control.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataGridVirtualizingPanel.ItemCount">
            <summary>Gets a count of all the immediate child elements contained in the panel.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DataGridVirtualizingPanel.ItemIndexProperty">
            <summary>Identifies the ItemIndex attached property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataRelationDetailDescription">
            <summary>The DataRelationDetailDescription class provides information about a  DataRelation whose content will be displayed as the details of the master data items in a grid or as the data items of another detail. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRelationDetailDescription.#ctor">
            <summary>Initializes a new instance of the DataRelationDetailDescription class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRelationDetailDescription.#ctor">
            <summary>Initializes a new instance of the DataRelationDetailDescription class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRelationDetailDescription.#ctor(System.Data.DataRelation)">
            <summary>Initializes a new instance of the DataRelationDetailDescription using the specified data relation.</summary>
            <param name="relation">The DataRelation that will be used as a detail description.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRelationDetailDescription.GetDetailsForParentItem(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object)">
            <summary>    Retrieves the details for the specified parent data     item.</summary>
            <returns>An IEnumerable representing the details of the specified data item.</returns>
            <param name="parentCollectionView">    The parent      DataGridCollectionView.</param>
            <param name="parentItem">    The parent data item whose details are to be     retrieved.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRelationDetailDescription.Initialize(Xceed.Wpf.DataGrid.DataGridCollectionView)">
            <summary>    Initializes the detail using the information retrieved     from the specified parent collection view.</summary>
            <remarks>The Initialize method is usually overridden in the case where required information, such as a property descriptor, cannot be provided in XAML.</remarks>
            <param name="parentCollectionView">    A      DataGridCollectionView representing the parent collection     view from which the information to initialize the detail is     retrieved.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DataRelationDetailDescription.DataRelation">
            <summary>Gets or sets the data relation that links the detail to the parent collection view.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DataRow">
            <summary>Specialization of the Row that represents a row that contains a collection of DataCells. DataRows are the visual representation of the data items that are displayed in a grid's viewport.</summary>
            <remarks>    Because rows are virtualized, meaning that they only     exist when they are in a grid's viewport, references to them,     or one of their cells, should not be kept.     Fixed Columns vs. Templates      In order to support fixed columns when creating a new row     template for a table-view layout, the following criteria must     be met:                       The PART_CellsHost template part         must be a         FixedCellPanel.         The          FixedCellCount property of the         FixedCellPanel must be bound to the table         view's          FixedColumnCount property using a         TwoWay          ViewBinding.          The fixed-cell-panel properties listed below are also     usually bound when provided a new row template for a table-view     layout:                                SplitterStyle         (TemplateBinding         xcdg:TableView.FixedColumnSplitterStyle)                  SplitterWidth (xcdg:ViewBinding         FixedColumnSplitterWidth)                  ShowSplitter         (xcdg:ViewBinding ShowFixedColumnSplitter)                  FixedColumnDropMarkPen         (xcdg:ViewBinding FixedColumnDropMarkPen)          If a new template is provided for a DataGridControl     and fixed columns are to be supported, it is essential that a          TableViewScrollViewer be used. This scroll viewer is     responsible for preserving the     TranslateTransforms that fix and scroll     elements, as well as executing the PageLeft and PageRight     actions according to the reduced viewport. It is also     recommended that an AdornerDecorator be     located above the TableViewScrollViewer of the     templated DataGridControl to support drag and     dropping of the fixed-column splitter correctly.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRow.#ctor">
            <summary>Initializes a new instance of the DataRow class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRow.BeginEditCore">
            <summary>Called after the BeginEdit method to allow custom edit behavior.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRow.CancelEditCore">
            <summary>Called after the CancelEdit method to allow custom edit behavior.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRow.ClearContainer">
            <summary>Clears the content of the DataRow.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRow.CreateCell(Xceed.Wpf.DataGrid.Column)">
            <summary>Create a new Cell in the row.</summary>
            <returns>A reference to the newly created Cell.</returns>
            <param name="column">A reference to a Column object representing the cell's parent column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRow.EndEditCore">
            <summary>Called after the EndEdit method to allow custom edit behavior.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRow.IsValidCellType(Xceed.Wpf.DataGrid.Cell)">
            <summary>Retrieves a value indicating whether the type of the specified cell is supported by the row.</summary>
            <returns>true if the type of the cell is supported by the row; false otherwise. By default, all DataCells will return true.</returns>
            <param name="cell">A reference to the Cell whose type to verify.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRow.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DataRow.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the DataRow class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DefaultDetailConfiguration">
            <summary>Class that provides configuration information that will be applied to all the details in a grid and any descendant details when an explicit detail configuration is not provided for a specific detail relation. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.AllowDetailToggle">
            <summary>Gets or sets a value indicating whether the end user can toggle the expansion state of the child details of the details to which the default configuration is applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.DefaultGroupConfiguration">
            <summary>Gets or sets the configuration that will be applied to groups without an explicit group configuration in the details to which the default configuration is applied.</summary>
            <remarks>    Default group configurations will be applied to groups in     the case where neither a column nor group description provide a          group configuration, and when a      group-configuration selector returns $$NULL$$ (no group     configuration was selected).     A default group configuration can be provided to a          grid or      detail configuration through their corresponding     DefaultGroupConfiguration properties.     If a default group configuration is not explicitly     provided, the theme's built-in group configuration will be     used.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.DetailIndicatorStyle">
            <summary>Gets or sets the style that will be applied to the detail indicators of the details to which the default configuration is applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.Footers">
            <summary>Gets a collection that contains the items that are located in the footer sections of the details to which the default configuration is applied.</summary>
            <remarks>An item added to a header or footer section must be provided as a DataTemplate</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.GroupConfigurationSelector">
            <summary>Gets or sets a group-configuration selector that will be used to select the appropriate configuration for a group based on its information and/or content for the details to which the default configuration is applied.</summary>
            <remarks>Unlike a default group configuration, which applies to all groups, group-configuration selectors, such as the built-in  FieldNameGroupConfigurationSelector and  LevelGroupConfigurationSelector, can be used to select the appropriate configuration for a group based on its information and/or content using their respective  FieldNameGroupConfigurationSelectorItem and  LevelGroupConfigurationSelectorItem, which provide a group configuration and indicate for what specific field name or level that configuration applies.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.Headers">
            <summary>Gets a collection containing the items in the header sections of the details to which the default configuration is applied.</summary>
            <remarks>An item added to a header or footer section must be provided as a DataTemplate</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.ItemContainerStyle">
            <summary>Gets or sets the style that will be applied to the containers (DataRow) of the data items in the details to which the default configuration is applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.ItemContainerStyleSelector">
            <summary>Gets or sets a style selector that will select the appropriate style to apply to the containers (DataRow) of the data items in the detail to which the default configuration is applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.UseDefaultHeadersFooters">
            <summary>Gets or sets a value indicating whether the default headers and footers are automatically added to the header and footer sections of the details to which default the configuration is applied.</summary>
            <remarks>Default items will be added before any other items that are explicitly added to the  Headers or  Footers sections</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.AllowDetailToggleProperty">
            <summary>Identifies the  AllowDetailToggle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.DefaultGroupConfigurationProperty">
            <summary>Identifies the  DefaultGroupConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.DetailIndicatorStyleProperty">
            <summary>Identifies the  DetailIndicatorStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.FootersProperty">
            <summary>Identifies the  Footers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.GroupConfigurationSelectorProperty">
            <summary>Identifies the  GroupConfigurationSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.HeadersProperty">
            <summary>Identifies the  Headers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.ItemContainerStyleProperty">
            <summary>Identifies the  ItemContainerStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.ItemContainerStyleSelectorProperty">
            <summary>Identifies the  ItemContainerStyleSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DefaultDetailConfiguration.UseDefaultHeadersFootersProperty">
            <summary>Identifies the  UseDefaultHeadersFooters dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DetailConfiguration">
            <summary>Class that provides a detail configuration that will be applied to the details resulting from the corresponding detail description. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DetailConfiguration.BeginInit">
            <summary>Signals the beginning of a batch modification process.</summary>
            <remarks>    During a batch modification process, data will not be     loaded, sorting operations will not be done, and the visible     positions of columns will not be resequenced. All of these     operations will be accomplished once the     EndEdit method is called.     If BeginInit is called when another row     is being edited, an exception will be thrown.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DetailConfiguration.EndInit">
            <summary>Signals the end of a batch modification process.</summary>
            <remarks>    During a batch modifications process, when     EndInit is called, the data will be loaded (if     any data binding occurred during the process), data rows will     be sorted (if a sort operation was requested) and the visible     positions of columns will be resequenced (if the      VisiblePosition properties of     columns were modified).</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DetailConfiguration.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Raises the  PropertyChanged event.</summary>
            <param name="e">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.AllowDetailToggle">
            <summary>Gets or sets a value indicating whether the end user can toggle the expansion state of the child details of the details to which the configuration is applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.AutoCreateColumns">
            <summary>Gets or sets a value indicating whether the columns of the detail are automatically created.</summary>
            <remarks>Cell editors need to be explicitly provided for each column in order to support insertion when AutoCreateColumns is set to false (see  Column.CellEditor property).</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.AutoCreateDetailConfigurations">
            <summary>Gets or sets a value indicating whether the detail configurations of the detail are automatically created.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.Columns">
            <summary>Gets a list of the columns that will be displayed in the details to which the configuration is applied.</summary>
            <remarks>All columns, regardless of their state, will be contained in the collection. To retrieve the columns that are only visible in the grid's viewport, consult the  VisibleColumns property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.DefaultDetailConfiguration">
            <summary>Gets or sets the detail configuration that will be applied to the child details of the detail and any descendant details when an explicit detail configuration is not provided for a specific detail relation.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.DefaultGroupConfiguration">
            <summary>Gets or sets the default configuration that will be applied to any groups in the detail for which an explicit group configuration is not provided.</summary>
            <remarks>    Default group configurations will be applied to master     groups in the case where neither a column nor group description     provide a      group configuration, and when a      group-configuration selector returns $$NULL$$ (no group     configuration was selected).     A default group configuration can be provided to a          grid or      detail configuration through their corresponding     DefaultGroupConfiguration properties.     If a default group configuration is not explicitly     provided, the theme's built-in group configuration will be     used.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.DetailConfigurations">
            <summary>Gets the list of the detail configurations that have been explicitly provided for specific detail relations and that will be applied to any corresponding details.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.DetailIndicatorStyle">
            <summary>Gets or sets the style that will be applied to the detail indicators of the details to which the configuration is applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.Footers">
            <summary>Gets a collection that contains the items that are located in the footer sections of the details to which the configuration is applied.</summary>
            <remarks>An item added to a header or footer section must be provided as a DataTemplate</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.GroupConfigurationSelector">
            <summary>Gets or sets a group-configuration selector that will be used to select the appropriate configuration for a group based on its information and/or content for the details to which the configuration is applied.</summary>
            <remarks>Unlike a default group configuration, which applies to all groups, group-configuration selectors, such as the built-in  FieldNameGroupConfigurationSelector and  LevelGroupConfigurationSelector, can be used to select the appropriate configuration for a group based on its information and/or content using their respective  FieldNameGroupConfigurationSelectorItem and  LevelGroupConfigurationSelectorItem, which provide a group configuration and indicate for what specific field name or level that configuration applies.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.GroupLevelDescriptions">
            <summary>Gets a collection of GroupLevelDescription objects that contain information on each group level contained in the grid.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.Headers">
            <summary>Gets a collection containing the items in the header sections of the details to which the configuration is applied.</summary>
            <remarks>An item added to a header or footer section must be provided as a DataTemplate</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.ItemContainerStyle">
            <summary>Gets or sets the style that will be applied to the containers (DataRow) of the data items in the details to which the configuration is applied.</summary>
            <remarks>Changes made to the item-container style will only be applied when the detail configuration is reapplied (i.e., when a detail is re-expanded).</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.ItemContainerStyleSelector">
            <summary>Gets or sets a style selector that will select the appropriate style to apply to the containers (DataRow) of the data items in the detail to which the configuration is applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.RelationName">
            <summary>Gets or sets the name that identifies the configuration's corresponding  detail descriptions defined in the parent  DataGridCollectionView,  DataGridCollectionViewSource, or  DataGridDetailDescription.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.Title">
            <summary>Gets or sets the title that can be used to provide a user-friendly name for the configurations corresponding detail relation and  detail description.</summary>
            <remarks>By default, a detail configuration's title will be displayed in any corresponding  HierarchicalGroupByControlNode.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.TitleTemplate">
            <summary>Gets or sets the template that will be used to display the configuration's title.</summary>
            <remarks>By default, a detail configuration's title will be displayed in any corresponding  HierarchicalGroupByControlNode.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.UseDefaultHeadersFooters">
            <summary>Gets or sets a value indicating whether the default headers and footers are automatically added to the header and footer sections of the details to which the configuration is applied.</summary>
            <remarks>Default items will be added before any other items that are explicitly added to the  Headers or  Footers sections</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.Visible">
            <summary>Gets or sets a value indicating whether the details to which the configuration is applied are visible.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfiguration.VisibleColumns">
            <summary>Gets a list of the columns whose Visible property is true, ordered according to their  VisiblePositions.</summary>
            <remarks>    The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.AllowDetailToggleProperty">
            <summary>Identifies the  AllowDetailToggle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.AutoCreateColumnsProperty">
            <summary>Identifies the  AutoCreateColumns dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.AutoCreateDetailConfigurationsProperty">
            <summary>Identifies the  AutoCreateDetailConfigurations dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.ColumnsProperty">
            <summary>Identifies the  Columns dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.DefaultDetailConfigurationProperty">
            <summary>Identifies the  DefaultDetailConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.DefaultGroupConfigurationProperty">
            <summary>Identifies the  DefaultGroupConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.DetailConfigurationsProperty">
            <summary>Identifies the  DetailConfigurations dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.DetailIndicatorStyleProperty">
            <summary>Identifies the  DetailIndicatorStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.FootersProperty">
            <summary>Identifies the  Footers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.GroupConfigurationSelectorProperty">
            <summary>Identifies the  GroupConfigurationSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.GroupLevelDescriptionsProperty">
            <summary>Identifies the  GroupLevelDescriptions dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.HeadersProperty">
            <summary>Identifies the  Headers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.ItemContainerStyleProperty">
            <summary>Identifies the  ItemContainerStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.ItemContainerStyleSelectorProperty">
            <summary>Identifies the  ItemContainerStyleSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.RelationNameProperty">
            <summary>Identifies the  RelationName dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.TitleProperty">
            <summary>Identifies the  Title dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.TitleTemplateProperty">
            <summary>Identifies the  TitleTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.UseDefaultHeadersFootersProperty">
            <summary>Identifies the  UseDefaultHeadersFooters dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.VisibleColumnsProperty">
            <summary>Identifies the  VisibleColumns dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.DetailConfiguration.VisibleProperty">
            <summary>Identifies the  Visible dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DetailConfiguration.InitializingInsertionRow">
            <summary>Raised when an InsertionRow in the detail is being initialized.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.DetailConfiguration.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DetailConfigurationCollection">
            <summary>Contains a collection of DetailConfiguration objects. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DetailConfigurationCollection.#ctor">
            <summary>Initializes a new instance of the DetailConfigurationCollection class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DetailConfigurationCollection.ClearItems">
            <summary>Removes all items from the collection.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DetailConfigurationCollection.InsertItem(System.Int32,Xceed.Wpf.DataGrid.DetailConfiguration)">
            <summary>Inserts the specified DetailConfiguration into the collection at the specified index.</summary>
            <param name="index">The zero-based index at which the detail configuration is to be added.</param>
            <param name="item">The detail configuration to add.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DetailConfigurationCollection.RemoveItem(System.Int32)">
            <summary>Removes the item at the specified index.</summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfigurationCollection.Item">
            <summary>Gets a DetailConfiguration from the collection.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.DetailConfigurationCollection.Item(System.String)">
            <summary>Gets the DetailConfiguration with the specified relation name from the collection.</summary>
            <param name="relationName">The  RelationName of the DetailConfiguration to retrieve.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.DetailIndicator">
            <summary>Control that provides a visual representation of the number of detail levels in a grid and/or detail.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.DetailIndicator.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the DetailIndicator class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.EnumerableDetailDescription">
            <summary>The EnumerableDetailDescription class provides information about a detail relation whose parent data item implements IEnumerable and whose content will be displayed as the details of the master data items in a grid or as the data items of another detail. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.EnumerableDetailDescription.#ctor">
            <summary>Initializes a new instance of the EnumerableDetailDescription class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.EnumerableDetailDescription.GetDetailsForParentItem(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object)">
            <summary>    Retrieves the details for the specified parent data     item.</summary>
            <returns>An IEnumerable representing the details of the specified data item.</returns>
            <param name="parentCollectionView">    The parent      DataGridCollectionView.</param>
            <param name="parentItem">    The parent data item whose details are to be     retrieved.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.FieldNameGroupConfigurationSelector">
            <summary>Represents a group-configuration selector that selects the appropriate group configuration for a group based on the column field names provided by the  FieldNameGroupConfigurationIndictors it contains.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.FieldNameGroupConfigurationSelector.#ctor">
            <summary>Initializes a new instance of the FieldNameGroupConfigurationSelector class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.FieldNameGroupConfigurationSelector.SelectGroupConfiguration(System.Int32,System.Windows.Data.CollectionViewGroup,System.ComponentModel.GroupDescription)">
            <summary>    Selects the appropriate group configuration based on the     specified information.</summary>
            <returns>The GroupConfiguration that will be applied to the group. Can be $$NULL$$ if the selector does not have a group configuration that corresponds to the specified information.</returns>
            <remarks>    When a grid is in a table-view layout, rows located in     the      headers,      footers,      fixed headers, and      fixed footers of a grid (e.g., ColumnManagerRows,     InsertionRows)     will query the selector in order to retrieve the      GroupLevelIndicatorStyle of the appropriate group     configuration. In this case, collectionViewGroup will     be $$NULL$$. If the selector chooses group     configurations based on the specified     collectionViewGroup, a "dummy" group     configuration that provides an identical group-level-indicator     style should be returned. For example, if a group configuration     sets the width of its group-level indicator to 30, the "dummy"     group configuration should also return 30 in its     group-level-indicator style so that the items in the headers     and footers have the same indentation as the other items to     preserve cell alignment.     It is recommended that all group-level-indicator styles     return the same width to preserve the alignment of the cells     throught the grid.</remarks>
            <param name="groupLevel">The zero-based level of the group.</param>
            <param name="collectionViewGroup">    The CollectionViewGroup that represents     the group. Can be $$NULL$$ if an item located in the headers or     footers of a grid queries the selector for a group     configuration (see Remarks).</param>
            <param name="groupDescription">    The GroupDescription from which the     group was created.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.FieldNameGroupConfigurationSelector.SelectorItems">
            <summary>Gets the  FieldNameGroupConfigurationIndictors contained in this group-configuration selector.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.FieldNameGroupConfigurationSelectorItem">
            <summary>Indicates the  group configuration to apply to the groups that are created by the values of the column with the specified  field name.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.FieldNameGroupConfigurationSelectorItem.#ctor">
            <summary>Initializes a new instance of the FieldNameGroupConfigurationSelectorItem class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.FieldNameGroupConfigurationSelectorItem.FieldName">
            <summary>Gets or sets the field name of the column whose values were used to create the groups to which the  group configuration will be applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.FieldNameGroupConfigurationSelectorItem.GroupConfiguration">
            <summary>Gets or sets the group configuration that will be applied to the groups that are created by the values of the column with the specified  field name</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.FieldNameGroupConfigurationSelectorItem.IsSealed">
            <summary>Gets a value indicating whether this group-configuration indicator has been sealed (i.e., it has been added to a  FieldNameGroupConfigurationSelectorItemCollection).</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Group">
            <summary>Represents the run-time realization of a group.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.IsBottomLevel">
            <summary>Gets a value indicating whether the group is in the last group level of the group hierarchy.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.IsExpanded">
            <summary>Gets or sets a value indicating whether the group is expanded.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.ItemCount">
            <summary>Gets the number of data items contained in the group.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.Items">
            <summary>Gets the data items contained in the group.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.Level">
            <summary>Gets a value indicating the level of the group within the group hierarchy.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.ParentGroups">
            <summary>Gets a reference to the parent groups of the group.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.StatContext">
            <summary>    Gets the context from which a statistical function     retrieves the values needed to calculate its result, and that     exposes the results as properties that have the same names as     the functions'      ResultPropertyName properties. </summary>
            <remarks>    The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the     StatContext property) and all the data items     will be used to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one      AverageFunction needs to be added to the      StatFunctions collection.</remarks>
            <returns>An object representing the context from which a statistical function retrieves the values needed to calculate its result, and that exposes the results as properties that have the same names as the functions'  ResultPropertyName properties.</returns>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.Title">
            <summary>Gets the data displayed in a group's associated GroupHeaderControl.</summary>
            <remarks>The title corresponds to the column's Title property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.TitleTemplate">
            <summary>Gets the DataTemplate used to display the Title's content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.TitleTemplateSelector">
            <summary>Gets a DataTemplateSelector that provides a way to apply a different TitleTemplates based on custom logic.</summary>
            <remarks>To provide a custom DataTemplateSelector, a class that derives from the DataTemplateSelector class and overrides the SelectTemplate method to return the appropriate DataTemplate, must be created.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.Value">
            <summary>Gets an object representing the value which caused the group to be created.</summary>
            <remarks>For example, if the data items in a grid are grouped according to the values of the "ShipCountry" column, the value of the Value property will contain one of the values of the "ShipCountry" field for example, "Canada" or "Australia".</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.ValueTemplate">
            <summary>Gets the DataTemplate used to display the group's Value.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Group.ValueTemplateSelector">
            <summary>Gets a DataTemplateSelector that provides a way to apply a different ValueTemplate based on custom logic.</summary>
            <remarks>To provide a custom DataTemplateSelector, a class that derives from the DataTemplateSelector class and overrides the SelectTemplate method to return the appropriate DataTemplate, must be created.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Group.PropertyChanged">
            <summary>Raised when the value of a property changes.</summary>
            <remarks>The PropertyChanged event can indicate all properties on the object have changed by using either $$NULL$$ or String.Empty as the property name in the PropertyChangedEventArgs.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupByControl">
            <summary>Represents a control that displays information about how the data items in a grid or detail are grouped and sorted as well as allows the end user to change how the items are grouped and sorted.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByControl.GetContainerForItemOverride">
            <summary>Creates or identifies the container that is used to display an item in a grid or detail.</summary>
            <returns>A DependencyObject representing the container that is used to display an item in a grid or detail.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>    Determines if the specified item is (or is eligible to     be) its own ItemContainer.</summary>
            <returns>true if the item is (or is eligible to be) its own ItemContainer; false otherwise.</returns>
            <param name="item">The item to query.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>    Prepares the specified container to display the     item.</summary>
            <param name="element">    The container that will be used to display the specified     item.</param>
            <param name="item">The item whose container is to be prepared.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByControl.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the GroupByControl class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByControl.AllowGroupingModification">
            <summary>Gets or sets a value indicating whether modifications to groups in the corresponding grid or detail can be made by the end user through the group-by control.</summary>
            <remarks>The AllowGroupingModification property only affects end-user interaction and does not prevent grouping from being modified programmatically.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByControl.AllowSort">
            <summary>Gets or sets a value indicating whether the sort direction of the columns in the corresponding grid or detail can be modified by the end user through the group-by control.</summary>
            <remarks>The AllowSort property only affects end-user interaction and does not prevent columns from being sorted programmatically.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByControl.ConnectionLineAlignment">
            <summary>Gets or sets the alignment of the lines that connect the group-by items in the group-by control together.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByControl.ConnectionLineOffset">
            <summary>Gets or sets the offset at which to begin and end drawing the connection lines between the group-by items in the group-by control.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByControl.ConnectionLinePen">
            <summary>Gets or sets the pen that is used to draw the connection lines that connect the group-by items in the group-by control.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByControl.NoGroupContent">
            <summary>Gets or sets the content that is displayed in the group-by control when it does not contain group-by items.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByControl.StairHeight">
            <summary>Gets or sets the vertical spacing between the tops of two consecutive group-by items.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByControl.StairSpacing">
            <summary>Gets or sets the horizontal spacing between the right of a first group-by item and the left of the next group-by item.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupByControl.AllowGroupingModificationProperty">
            <summary>Identifies the  AllowGroupingModification dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupByControl.AllowSortProperty">
            <summary>Identifies the  AllowSort dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupByControl.ConnectionLineAlignmentProperty">
            <summary>Identifies the  ConnectionLineAlignment dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupByControl.ConnectionLineOffsetProperty">
            <summary>Identifies the  ConnectionLineOffset dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupByControl.ConnectionLinePenProperty">
            <summary>Identifies the  ConnectionLinePen dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupByControl.NoGroupContentProperty">
            <summary>Identifies the  NoGroupContent dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupByControl.StairHeightProperty">
            <summary>Identifies the  StairHeight dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupByControl.StairSpacingProperty">
            <summary>Identifies the  StairSpacing dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupByItem">
            <summary>Represents an item in a GroupByControl that corresponds to a column in a grid or detail by whose values the data items are grouped.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByItem.OnApplyTemplate">
            <summary>Builds the group-by item's visual tree.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByItem.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled LostMouseCapture attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonUp attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByItem.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled MouseMove attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByItem.OnPropertyChanged">
            <summary>Raises the  PropertyChanged event.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByItem.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the  PropertyChanged event with the specified event arguments.</summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupByItem.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the GroupByItem class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByItem.IsBeingDragged">
            <summary>Gets a value indicating whether the group-by item is being dragged.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupByItem.SortDirection">
            <summary>    Gets a value indicating the direction in which the values     of the corresponding column are sorted.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupByItem.IsBeingDraggedProperty">
            <summary>Identifies the  IsBeingDragged dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.GroupByItem.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupConfiguration">
            <summary>Class that provides configuration information for a corresponding group description.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupConfiguration.CreateInstanceCore">
            <summary>Creates a new instance of the GroupConfiguration.</summary>
            <returns>A reference to the new GroupConfiguration object.</returns>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupConfiguration.Footers">
            <summary>Gets a collection that contains the items that are located if the footer sections of the groups to which the configuration is applied.</summary>
            <remarks>An item added to a header or footer section must be provided as a DataTemplate.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupConfiguration.GroupLevelIndicatorStyle">
            <summary>Gets or sets the style that will be applied to the group-level indicators in the groups to which the configuration is applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupConfiguration.Headers">
            <summary>Gets a collection that contains the items that are located if the header sections of the groups to which the configuration is applied.</summary>
            <remarks>An item added to a header or footer section must be provided as a DataTemplate.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupConfiguration.InitiallyExpanded">
            <summary>Gets or sets the default expansion state of the groups to which the configuration will be applied.</summary>
            <remarks>The value of this property (by default, true) will be used by all same-level groups only when they are created or when grouping modifications are made.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupConfiguration.ItemContainerStyle">
            <summary>Gets or sets the style that will be applied to the containers (DataRow) of the data items in the groups to which the configuration is applied.</summary>
            <remarks>Changes made to the item-container style will only be applied when the group configuration is reapplied (i.e., when a group is re-expanded).</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupConfiguration.ItemContainerStyleSelector">
            <summary>Gets or sets a style selector that will select the appropriate style to apply to the containers (DataRow) of the data items in the groups to which the configuration is applied.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupConfiguration.UseDefaultHeadersFooters">
            <summary>Gets a value indicating whether the default header and footers items are automatically added to the header and footer sections of the groups to which the configuration is applied.</summary>
            <remarks>Default items will be added before any other items that are explicitly added to the  Headers and  Footers sections.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupConfiguration.FootersProperty">
            <summary>Identifies the  Footers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupConfiguration.GroupLevelIndicatorStyleProperty">
            <summary>Identifies the  GroupLevelIndicatorStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupConfiguration.HeadersProperty">
            <summary>Identifies the  Headers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupConfiguration.InitiallyExpandedProperty">
            <summary>Identifies the  InitiallyExpanded dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupConfiguration.ItemContainerStyleProperty">
            <summary>Identifies the  ItemContainerStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupConfiguration.ItemContainerStyleSelectorProperty">
            <summary>Identifies the  ItemContainerStyleSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupConfiguration.UseDefaultHeadersFootersProperty">
            <summary>Identifies the  UseDefaultHeadersFooters dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupConfigurationSelector">
            <summary>Represents a group-configuration selector that selects the appropriate group configuration for a group.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupConfigurationSelector.SelectGroupConfiguration(System.Int32,System.Windows.Data.CollectionViewGroup,System.ComponentModel.GroupDescription)">
            <summary>Selects the appropriate group configuration based on the specified information.</summary>
            <returns>The GroupConfiguration that will be applied to the group. Can be $$NULL$$ if the selector does not have a group configuration that corresponds to the specified information.</returns>
            <remarks>    When a grid is in a table-view layout, rows located in     the      headers,      footers,      fixed headers, and      fixed footers of a grid (e.g., ColumnManagerRows,     InsertionRows)     will query the selector in order to retrieve the      GroupLevelIndicatorStyle of the appropriate group     configuration. In this case, collectionViewGroup will     be $$NULL$$. If the selector chooses group     configurations based on the specified     collectionViewGroup, a "dummy" group     configuration that provides an identical group-level-indicator     style should be returned. For example, if a group configuration     sets the width of its group-level indicator to 30, the "dummy"     group configuration should also return 30 in its     group-level-indicator style so that the items in the headers     and footers have the same indentation as the other items to     preserve cell alignment.     It is recommended that all group-level-indicator styles     return the same width to preserve the alignment of the cells     throught the grid.</remarks>
            <param name="groupLevel">The zero-based level of the group.</param>
            <param name="collectionViewGroup">    The CollectionViewGroup that represents     the group. Can be $$NULL$$ if an item located in the headers or     footers of a grid queries the selector for a group     configuration (see Remarks).</param>
            <param name="groupDescription">The GroupDescription from which the group was created.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupHeaderControl">
            <summary>Represents the control used as a Group header, which is used to expand and collapsed its associated group as well as display information on the group's content.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderControl.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>    Reports a change to the     IsKeyboardFocusWithin property.</summary>
            <param name="e">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderControl.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled PreviewMouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderControl.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the GroupHeaderControl class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupHeaderControl.Group">
            <summary>Gets the GroupHeaderControl's associated Group.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.GroupHeaderControl.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupHeaderFooterItemTemplate">
            <summary>Class that represents an item in the header or footer sections of a group.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupHeaderFooterItemTemplate.#ctor">
            <summary>Initializes a new instance of the GroupHeaderFooterItemTemplate class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupHeaderFooterItemTemplate.Template">
            <summary>Gets or sets the template that is used by the GroupHeaderFooterItemTemplate to create its items.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupHeaderFooterItemTemplate.VisibleWhenCollapsed">
            <summary>Gets or sets a value indicating whether the items created by the GroupHeaderFooterItemTemplate remain visible when their parent groups are collapsed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupLevelDescription">
            <summary>Represents a description of each group level, which provides complementary information on the group descriptions that were added through the CollectionViewSource.GroupDescriptions property.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupLevelDescription.FieldName">
            <summary>Gets the field name of the column by which the data items are grouped.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupLevelDescription.Title">
            <summary>Gets the data displayed in the associated GroupHeaderControls of the groups contained in this level.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupLevelDescription.TitleTemplate">
            <summary>Gets the DataTemplate used to display the  Title's content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupLevelDescription.TitleTemplateSelector">
            <summary>Gets a DataTemplateSelector that provides a way to apply a different  TitleTemplates based on custom logic.</summary>
            <remarks>To provide a custom DataTemplateSelector, a class that derives from the DataTemplateSelector class and overrides the SelectTemplate method to return the appropriate DataTemplate, must be created.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupLevelDescription.ValueTemplate">
            <summary>Gets or sets the DataTemplate used to display the group's value.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupLevelDescription.ValueTemplateSelector">
            <summary>Gets or sets a DataTemplateSelector that provides a way to apply a different  ValueTemplate based on custom logic.</summary>
            <remarks>To provide a custom DataTemplateSelector, a class that derives from the DataTemplateSelector class and overrides the SelectTemplate method to return the appropriate DataTemplate, must be created.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupLevelDescription.ValueTemplateProperty">
            <summary>Identifies the  ValueTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupLevelDescription.ValueTemplateSelectorProperty">
            <summary>Identifies the  ValueTemplateSelector dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.GroupLevelDescription.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupLevelDescriptionCollection">
            <summary>Contains a collection of GroupLevelDescription objects.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelDescriptionCollection.#ctor">
            <summary>Initializes a new instance of the  GroupLevelDescriptionCollection class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupLevelIndicator">
            <summary>Control that provides a visual representation of the number of group levels in a grid and/or detail.</summary>
            <remarks>    A GroupLevelIndicator is displayed for     each group level in the      GroupLevelIndicatorPane. Notably, the indicators are     displayed to the left of a DataRow when     grouping is applied to a grid (see red highlights in Figure 1).     As a side-effect, they provide DataRows with     grouping indentation.          Figure 1: GroupLevelIndicators (red) and     GroupLevelIndicatorPane (orange)</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicator.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the GroupLevelIndicator class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane">
            <summary>The GroupLevelIndicatorPane class represents a control that contains group-level indicators that indicate the group-level in which an item is located.</summary>
            <remarks> Figure 1: GroupLevelIndicators (red) and GroupLevleIndicatorPane (orang)</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.GetGroupLevel(System.Windows.DependencyObject)">
            <summary>    Gets the group-level for which the group-level-indicator     pane is displayed.</summary>
            <returns>    A zero-based value indicating the group-level for which     the group-level-indicator pane is displayed.</returns>
            <param name="obj">The element from which to retrieve the property value.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.GetShowIndicators(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether the group-level indicators contained in the group-level-indicator pane are shown.</summary>
            <returns>true if group-level indicators are shown; false otherwise.</returns>
            <param name="obj">The element from which to retrieve the property value.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.GetShowVerticalBorder(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether the vertical borders of the group-level-indicator pane are displayed.</summary>
            <returns>true if the vertical borders of the group-level-indicator pane are displayed; false otherwise.</returns>
            <param name="obj">The element from which to retrieve the property value.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.MeasureOverride(System.Windows.Size)">
            <summary>Called to remeasure a control.</summary>
            <returns>The size of the control.</returns>
            <param name="availableSize">    Measurement constraints, a control cannot return a size     larger than the constraint.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Raises the PropertyChanged event.</summary>
            <param name="e">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.SetGroupLevel(System.Windows.DependencyObject,System.Int32)">
            <summary>Sets the group-level for which the group-level-indicator pane is displayed.</summary>
            <param name="obj">The element to which to assign the property value.</param>
            <param name="value">A zero-based value indicating the group-level for which the group-level-indicator pane is displayed.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.SetShowIndicators(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether the group-level indicators contained in the group-level-indicator pane are shown.</summary>
            <param name="obj">The element to which to assign the property value.</param>
            <param name="value">true if group-level indicators are shown; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.SetShowVerticalBorder(System.Windows.DependencyObject,System.Boolean)">
            <summary>Gets a value indicating whether the vertical borders of the group-level-indicator pane are displayed.</summary>
            <param name="obj">The element to which to assign the property value.</param>
            <param name="value">true if the vertical borders of the group-level-indicator pane are displayed; false otherwise.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.CurrentIndicatorCount">
            <summary>Gets a value indicating the number of child indicators contained in the GroupLevelIndicatorPane.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.Indented">
            <summary>Gets or sets a value indicating whether the group-level indicator pane is indented.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.IsLeaf">
            <summary>Gets a value indicating whether the GroupLevelIndicatorPane displays group-level indicators for the context of the item in which it is contained.</summary>
            <remarks>    GroupLevelIndicatorPanes that display     group-level indicators for the context of the item in which     they are contained are considered leaf panes. These     leaf panes are always located outside of      HierarchicalGroupLevelIndicatorPanes, which contain     GroupLevelIndicatorPanes that display     information about an item's parent contexts and detail-level     indicators, which correspond to a parent detail.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.CurrentIndicatorCountProperty">
            <summary>Identifies the  CurrentIndicatorCount dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.GroupLevelProperty">
            <summary>Identifies the GroupLevel attached property.</summary>
            <remarks>The GroupLevel attached property indicates the number of group-level indicators displayed by the group-level-indicator pane. This property is automatically set by the item generator; however, in some cases it might be desirable to modify the default behavior (e.g., group-header control in a card-view layout).</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.IndentedProperty">
            <summary>    Identifies the      Indented dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.IsLeafProperty">
            <summary>Identifies the  IsLeaf dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.ShowIndicatorsProperty">
            <summary>Identifies the ShowIndicators attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.GroupLevelIndicatorPane.ShowVerticalBorderProperty">
            <summary>Identifies the ShowVerticalBorder attached property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.HierarchicalGroupByControl">
            <summary>Represents a control that displays hierarchical information about how the data items in a grid and any of its child details are grouped and sorted as well as allows the end user to change how the items are grouped and sorted.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the HierarchicalGroupByControl class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.AllowGroupingModification">
            <summary>    Gets or sets a value indicating whether modifications to     groups in the corresponding grid or detail can be made by the     end user through the group-by control.</summary>
            <remarks>The AllowGroupingModification property only affects end-user interaction and does not prevent grouping from being modified programmatically.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.AllowSort">
            <summary>    Gets or sets a value indicating whether the sort     direction of the columns in the corresponding grid or detail     can be modified by the end user through the group-by     control.</summary>
            <remarks>The AllowSort property only affects end-user interaction and does not prevent columns from being sorted programmatically.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.ConnectionLineAlignment">
            <summary>    Gets or sets the alignment of the lines that connect the     group-by items in the group-by control together.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.ConnectionLineOffset">
            <summary>    Gets or sets the offset at which to begin and end drawing     the connection lines between the group-by items in the group-by     control.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.ConnectionLinePen">
            <summary>    Gets or sets the pen that is used to draw the connection     lines that connect the group-by items in the group-by     control.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.HasGroups">
            <summary>Gets a value indicating whether the hierarchical group-by control contains group-by items, which display information about the groups that exist in the corresponding grid or detail.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.NoGroupContent">
            <summary>Gets or sets the content that is displayed in the group-by control when it does not contain group-by items.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.StairHeight">
            <summary>    Gets or sets the vertical spacing between the tops of two     consecutive group-by items.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.StairSpacing">
            <summary>    Gets or sets the horizontal spacing between the right of     a first group-by item and the left of the next group-by     item.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.AllowGroupingModificationProperty">
            <summary>Identifies the  AllowGroupingModification dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.AllowSortProperty">
            <summary>Identifies the  AllowSort dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.ConnectionLineAlignmentProperty">
            <summary>Identifies the  ConnectionLineAlignment dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.ConnectionLineOffsetProperty">
            <summary>Identifies the  ConnectionLineOffset dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.ConnectionLinePenProperty">
            <summary>Identifies the  ConnectionLinePen dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.NoGroupContentProperty">
            <summary>Identifies the  NoGroupContent dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.StairHeightProperty">
            <summary>Identifies the  StairHeight dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.StairSpacingProperty">
            <summary>Identifies the  StairSpacing dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.HierarchicalGroupByControl.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode">
            <summary>Represents a control that displays information in a  HierarchicalGroupByControl about how the data items in a grid or detail are grouped and sorted as well as allows the end user to change how the items are grouped and sorted.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.GetContainerForItemOverride">
            <summary>Creates or identifies the container that is used to display an item in a detail.</summary>
            <returns>A DependencyObject representing the container that is used to display an item in a detail.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.IsItemItsOwnContainerOverride(System.Object)">
            <summary>Determines if the specified item is (or is eligible to be) its own ItemContainer.</summary>
            <returns>true if the item is (or is eligible to be) its own ItemContainer; false otherwise.</returns>
            <param name="item">The item to query.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>Prepares the specified container to display the item.</summary>
            <param name="element">The container that will be used to display the specified item.</param>
            <param name="item">The item whose container is to be prepared.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the HierarchicalGroupByControlNode class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.AllowGroupingModification">
            <summary>Gets or sets a value indicating whether modifications to groups in the corresponding grid or detail can be made by the end user through the hierarchical group-by control node.</summary>
            <remarks>The AllowGroupingModification property only affects end-user interaction and does not prevent grouping from being modified programmatically.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.AllowSort">
            <summary>Gets or sets a value indicating whether the sort direction of the columns in the corresponding grid or detail can be modified by the end user through the hierarchical group-by control node.</summary>
            <remarks>The AllowSort property only affects end-user interaction and does not prevent columns from being sorted programmatically.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.ConnectionLineAlignment">
            <summary>Gets or sets the alignment of the lines that connect the group-by items in the hierarchical group-by control node together.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.ConnectionLineOffset">
            <summary>Gets or sets the offset at which to begin and end drawing the connection lines between the group-by items in the hierarchical group-by control node.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.ConnectionLinePen">
            <summary>Gets or sets the pen that is used to draw the connection lines that connect the group-by items in the hierarchical group-by control node.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.NoGroupContent">
            <summary>Gets or sets the content that is displayed in the hierarchical group-by control node when it does not contain hierarchical group-by items.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.StairHeight">
            <summary>    Gets or sets the vertical spacing between the tops of two     consecutive group-by items.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.StairSpacing">
            <summary>    Gets or sets the horizontal spacing between the right of     a first group-by item and the left of the next group-by     item.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.Title">
            <summary>Gets or sets the title of the hierarchical group-by control node.</summary>
            <remarks>The title of the hierarchical group-by control node corresponds to the  Title property of the grid or detail configuration it represents.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.AllowGroupingModificationProperty">
            <summary>Identifies the  AllowGroupingModication dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.AllowSortProperty">
            <summary>Identifies the  AllowSort dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.ConnectionLineAlignmentProperty">
            <summary>Identifies the  ConnectionLineAlignment dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.ConnectionLineOffsetProperty">
            <summary>Identifies the  ConnectionLineOffset dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.ConnectionLinePenProperty">
            <summary>Identifies the  ConnectionLinePen dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.NoGroupContentProperty">
            <summary>Identifies the  NoGroupContent dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.StairHeightProperty">
            <summary>Identifies the  StairHeight dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.StairSpacingProperty">
            <summary>Identifies the  StairSpacing dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByControlNode.TitleProperty">
            <summary>Identifies the  Title dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.HierarchicalGroupByItem">
            <summary>    Represents an item in a      HierarchicalGroupByControlNode that corresponds to a column     in a grid or detail by whose values the data items are     grouped.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.OnApplyTemplate">
            <summary>Builds the group-by item's visual tree.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled LostMouseCaptured attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonUp attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled MouseMove attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.OnPropertyChanged">
            <summary>Raises the  PropertyChanged event.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the  PropertyChanged event with the specified PropertyChangedEventArgs.</summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the HierarchicalGroupByItem class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.IsBeingDragged">
            <summary>Gets a value indicating whether the group-by item is being dragged.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.SortDirection">
            <summary>Gets a value indicating the direction in which the values of the corresponding column are sorted.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.IsBeingDraggedProperty">
            <summary>Identifies the  IsBeingDragged dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.HierarchicalGroupByItem.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.HierarchicalGroupLevelIndicatorPane">
            <summary>    The HierarchicalGroupLevelIndicatorPane     class represents a control that contains group-level-indicator     panes and detail-level indicators that indicate the group and     detail levels in which an item is located.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupLevelIndicatorPane.MeasureOverride(System.Windows.Size)">
            <summary>Called to remeasure a control.</summary>
            <returns>The size of the control.</returns>
            <param name="availableSize">    Measurement constraints, a control cannot return a size     larger than the constraint.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.HierarchicalGroupLevelIndicatorPane.OnApplyTemplate">
            <summary>Builds the visual tree for this element.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.InitializingInsertionRowEventArgs">
            <summary>Provides information on the InsertionRow being initialized.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InitializingInsertionRowEventArgs.#ctor(Xceed.Wpf.DataGrid.InsertionRow)">
            <summary>Initializes a new instance of the  InitializingInsertionRowEventArgs class specifying the InsertionRow to initialize.</summary>
            <param name="insertionRow">A reference to the InsertionRow to initialize.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.InitializingInsertionRowEventArgs.InsertionRow">
            <summary>Gets or sets the InsertionRow to initialize.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.InsertionCell">
            <summary>Represents a cell contained in an InsertionRow.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionCell.InitializeCore(Xceed.Wpf.DataGrid.DataGridContext,Xceed.Wpf.DataGrid.Row,Xceed.Wpf.DataGrid.Column)">
            <summary>Called after the Initialize method to allow custom initialization.</summary>
            <param name="dataGridContext"> A reference to the cell's DataGridContext.</param>
            <param name="parentRow"> A reference to the cell's parent Row.</param>
            <param name="parentColumn"> A reference to the cell's parent Column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionCell.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the InsertionCell class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionCell.SetupDisplayMemberBinding(Xceed.Wpf.DataGrid.DataGridContext)">
            <summary>This method is reserved for internal use and is not intendede to be used directly from your code.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.InsertionRow">
            <summary>Specialization of the Row class, which allows new data items to be added to a grid.</summary>
            <remarks>    Because rows are virtualized, meaning that they only     exist when they are in a grid's viewport, references to them,     or one of their cells, should not be kept.     Insertion and modification (read/write) of the data items     contained in a grid will only function if     TwoWay binding mode is used. For more     information, refer to the Binding.Mode     property topic in the Microsoft Windows SDK.     Fixed Columns vs. Templates      In order to support fixed columns when creating a new row     template for a table-view layout, the following criteria must     be met:                       The PART_CellsHost template part         must be a         FixedCellPanel.         The          FixedCellCount property of the         FixedCellPanel must be bound to the table         view's          FixedColumnCount property using a         TwoWay          ViewBinding.          The fixed-cell-panel properties listed below are also     usually bound when provided a new row template for a table-view     layout:                                SplitterStyle         (TemplateBinding         xcdg:TableView.FixedColumnSplitterStyle)                  SplitterWidth (xcdg:ViewBinding         FixedColumnSplitterWidth)                  ShowSplitter         (xcdg:ViewBinding ShowFixedColumnSplitter)                  FixedColumnDropMarkPen         (xcdg:ViewBinding FixedColumnDropMarkPen)          If a new template is provided for a DataGridControl     and fixed columns are to be supported, it is essential that a          TableViewScrollViewer be used. This scroll viewer is     responsible for preserving the     TranslateTransforms that fix and scroll     elements, as well as executing the PageLeft and PageRight     actions according to the reduced viewport. It is also     recommended that an AdornerDecorator be     located above the TableViewScrollViewer of the     templated DataGridControl to support drag and     dropping of the fixed-column splitter correctly.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionRow.#ctor">
            <summary>Initializes a new instance of the InsertionRow class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionRow.BeginEditCore">
            <summary>    Called after the BeginEdit     method to allow custom edit behavior.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionRow.CancelEditCore">
            <summary>    Called after the CancelEdit     method to allow custom edit behavior.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionRow.CreateCell(Xceed.Wpf.DataGrid.Column)">
            <summary>Creates a new InsertionCell in the row.</summary>
            <returns>A reference to the newly created Cell.</returns>
            <param name="column">A reference to a Column object representing the cell's parent column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionRow.EndEditCore">
            <summary>    Called after the EndEdit     method to allow custom edit behavior.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionRow.IsValidCellType(Xceed.Wpf.DataGrid.Cell)">
            <summary>Retrieves a value indicating whether the type of the specified cell is supported by the row.</summary>
            <returns>true if the type of the cell is supported by the row; false otherwise. By default, all InsertionCells will return true.</returns>
            <param name="cell">A reference to the Cell whose type to verify</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.InsertionRow.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the InsertionRow class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.KeyActivationGesture">
            <summary>Represents a key gesture that causes an element to enter edit mode.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.KeyActivationGesture.#ctor">
            <summary>Initializes a new instance of the KeyActivationGesture class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.KeyActivationGesture.IsActivationKey(System.Windows.Input.Key,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
            <summary>Retrieves a value indicating whether the specified key is a supported activation key for this gesture.</summary>
            <returns>true if the key is a supported activation key for this gesture; false otherwise.</returns>
            <param name="key">The key to verify.</param>
            <param name="systemKey">A System.Windows.Input.Key value representing the key to verify</param>
            <param name="modifiers">Any modifier keys (ALT, SHIFT, or CTRL).</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.KeyActivationGesture.Key">
            <summary>Gets or sets the key to verify.</summary>
            <remarks>Key and  SystemKey will always be equal unless the ALT modifier key is pressed. In that case, Key will be equal to Key.SystemKey,  Modifiers will be equal to ALT, and SystemKey will be equal to the key that was pressed.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.KeyActivationGesture.Modifiers">
            <summary>Gets or sets any modifier keys (ALT, SHIFT, or CTRL).</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.KeyActivationGesture.SystemKey">
            <summary>Gets or sets the key to verify.</summary>
            <remarks> Key and SystemKey will always be equal unless the ALT modifier key is pressed. In that case, Key will be equal to Key.SystemKey,  Modifiers will be equal to ALT, and SystemKey will be equal to the key that was pressed.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.LevelGroupConfigurationSelector">
            <summary>Represents a group-configuration selector that selects the appropriate group configuration for a group based on the group levels provided by the  LevelGroupConfigurationIndicators it contains.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.LevelGroupConfigurationSelector.#ctor">
            <summary>Initializes a new instance of the LevelGroupConfigurationSelector class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.LevelGroupConfigurationSelector.SelectGroupConfiguration(System.Int32,System.Windows.Data.CollectionViewGroup,System.ComponentModel.GroupDescription)">
            <summary>    Selects the appropriate group configuration based on the     specified information.</summary>
            <returns>The GroupConfiguration that will be applied to the group. Can be $$NULL$$ if the selector does not have a group configuration that corresponds to the specified information.</returns>
            <remarks>    When a grid is in a table-view layout, rows located in     the      headers,      footers,      fixed headers, and      fixed footers of a grid (e.g., ColumnManagerRows,     InsertionRows)     will query the selector in order to retrieve the      GroupLevelIndicatorStyle of the appropriate group     configuration. In this case, collectionViewGroup will     be $$NULL$$. If the selector chooses group     configurations based on the specified     collectionViewGroup, a "dummy" group     configuration that provides an identical group-level-indicator     style should be returned. For example, if a group configuration     sets the width of its group-level indicator to 30, the "dummy"     group configuration should also return 30 in its     group-level-indicator style so that the items in the headers     and footers have the same indentation as the other items to     preserve cell alignment.     It is recommended that all group-level-indicator styles     return the same width to preserve the alignment of the cells     throught the grid.</remarks>
            <param name="groupLevel">The zero-based level of the group.</param>
            <param name="collectionViewGroup">    The CollectionViewGroup that represents     the group. Can be $$NULL$$ if an item located in the headers or     footers of a grid queries the selector for a group     configuration (see Remarks).</param>
            <param name="groupDescription">    The GroupDescription from which the     group was created.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.LevelGroupConfigurationSelector.SelectorItems">
            <summary>Gets the  LevelGroupConfigurationIndicators contained in this group-configuration selector.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.LevelGroupConfigurationSelectorItem">
            <summary>Indicates the  group configuration to apply to the groups of the specified  group level.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.LevelGroupConfigurationSelectorItem.#ctor">
            <summary>Initializes a new instance of the LevelGroupConfigurationIndicator class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.LevelGroupConfigurationSelectorItem.GroupConfiguration">
            <summary>Gets or sets the group configuration that will be applied to the groups of the specified  level.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.LevelGroupConfigurationSelectorItem.IsSealed">
            <summary>Gets a value indicating whether this group-configuration indicator has been sealed (i.e., it has been added to a  LevelGroupConfigurationIndicatorCollection).</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.LevelGroupConfigurationSelectorItem.Level">
            <summary>Get or sets the level of the groups to which the  group configuration will be applied.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Licenser">
            <summary>Class that registers the classes defined in the Xceed.Wpf.DataGrid assembly.</summary>
            <remarks>    It is recommended that the      LicenseKey property be set in one of the following     locations:                                            Application.OnStartup                 method                 Preferred location                                           Form.Loaded event                 The LicenseKey                 property can be set in this event as long as the                 startup form is known and invariable.                                Setting the      LicenseKey property of the Licenser     class defined in the Xceed.Wpf.DataGrid assembly will     automatically license the classes in the Xceed.Wpf.Controls     assembly.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Licenser.LicenseKey">
            <summary>Gets or sets the license key used to license the classes contained in the Xceed.Wpf.DataGrid assembly.</summary>
            <remarks>    It is recommended that the      LicenseKey property be set in one of the following     locations:                                            Application.OnStartup                 method                 Preferred location                                           Form.Loaded event                 The LicenseKey                 property can be set in this event as long as the                 startup form is known and invariable.                                Setting the      LicenseKey property of the Licenser     class defined in the Xceed.Wpf.DataGrid assembly will     automatically license the classes in the Xceed.Wpf.Controls     assembly.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ListSourceDetailDescription">
            <summary>The ListSourceDetailDescription class provides information about a detail relation whose parent data item implements IListSource and whose content will be displayed as the details of the master data items in a grid or as the data items of another detail. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ListSourceDetailDescription.#ctor">
            <summary>Initializes a new instance of th e ListSourceDetailDescription class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ListSourceDetailDescription.GetDetailsForParentItem(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object)">
            <summary>    Retrieves the details for the specified parent data     item.</summary>
            <returns>An IEnumerable representing the details of the specified data item.</returns>
            <param name="parentCollectionView">    The parent      DataGridCollectionView.</param>
            <param name="parentItem">    The parent data item whose details are to be     retrieved.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.PropertyDetailDescription">
            <summary>The PropertyDetailDescription class provides information about a property whose content will be displayed as the details of the data items in a grid or detail. </summary>
            <remarks>    A PropertyDetailDescription will be     created for all IEnumerable and     IListSource properties.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.PropertyDetailDescription.#ctor">
            <summary>Initializes a new instance of the PropertyDetailDescription class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.PropertyDetailDescription.#ctor">
            <summary>Initializes a new instance of the PropertyDetailDescription class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.PropertyDetailDescription.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>    Initializes a new instance of the     PropertyDetailDescription class specifying the          PropertyDescriptor whose corresponding property's content     will be displayed as the details of the master     data items in a grid or as the data items of another     detail.</summary>
            <param name="relation">The  PropertyDescriptor whose corresponding property's content will be displayed as the details of the master data items in a grid or as the data items of another detail.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.PropertyDetailDescription.GetDetailsForParentItem(Xceed.Wpf.DataGrid.DataGridCollectionView,System.Object)">
            <summary>    Retrieves the details for the specified parent data     item.</summary>
            <returns>An IEnumerable representing the details of the specified data item.</returns>
            <param name="parentCollectionView">         The parent      DataGridCollectionView.</param>
            <param name="parentItem">         The parent data item whose details are to be     retrieved.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.PropertyDetailDescription.Initialize(Xceed.Wpf.DataGrid.DataGridCollectionView)">
            <summary>    Initializes the detail using the information retrieved     from the specified parent collection view.</summary>
            <remarks>The Initialize method is usually overridden in the case where required information, such as a property descriptor, cannot be provided in XAML.</remarks>
            <param name="parentCollectionView">    A      DataGridCollectionView representing the parent collection     view from which the information to initialize the detail is     retrieved.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.PropertyDetailDescription.PropertyDescriptor">
            <summary>Gets or sets the  PropertyDescriptor whose corresponding property's content will be displayed as the details of the master data items in a grid or as the data items of another detail.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Row">
            <summary>Represents any type of row in a grid. The DataRow and InsertionRow class derive from this class.</summary>
            <remarks>    Because rows are virtualized, meaning that they only     exist when they are in a grid's viewport, references to them,     or one of their cells, should not be kept.     Fixed Columns vs. Templates      In order to support fixed columns when creating a new row     template for a table-view layout, the following criteria must     be met:                       The PART_CellsHost template part         must be a         FixedCellPanel.         The          FixedCellCount property of the         FixedCellPanel must be bound to the table         view's          FixedColumnCount property using a         TwoWay          ViewBinding.          The fixed-cell-panel properties listed below are also     usually bound when provided a new row template for a table-view     layout:                                SplitterStyle         (TemplateBinding         xcdg:TableView.FixedColumnSplitterStyle)                  SplitterWidth (xcdg:ViewBinding         FixedColumnSplitterWidth)                  ShowSplitter         (xcdg:ViewBinding ShowFixedColumnSplitter)                  FixedColumnDropMarkPen         (xcdg:ViewBinding FixedColumnDropMarkPen)          If a new template is provided for a DataGridControl     and fixed columns are to be supported, it is essential that a          TableViewScrollViewer be used. This scroll viewer is     responsible for preserving the     TranslateTransforms that fix and scroll     elements, as well as executing the PageLeft and PageRight     actions according to the reduced viewport. It is also     recommended that an AdornerDecorator be     located above the TableViewScrollViewer of the     templated DataGridControl to support drag and     dropping of the fixed-column splitter correctly.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.BeginEdit">
            <summary>Places the row in edit mode.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the EndEdit method is called. If the CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.BeginEditCore">
            <summary>    Called after the BeginEdit     method to allow custom edit behavior.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.CancelEdit">
            <summary>Cancels the edit process.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the EndEdit method is called. If the CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.CancelEditCore">
            <summary>    Called after the CancelEdit     method to allow custom edit behavior.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.ClearContainer">
            <summary>Clears the content of the Row.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.CreateCell(Xceed.Wpf.DataGrid.Column)">
            <returns>A reference to the newly created Cell.</returns>
            <param name="column">A reference to a Column object representing the cell's parent column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.EndEdit">
            <summary>Ends the edit process and allows the row to exit edit mode.</summary>
            <remarks>Modifications made to the content of the cells contained in the row will only be committed once the EndEdit method is called. If the CancelEdit method is called, modifications will be discarded.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.EndEditCore">
            <summary>    Called after the EndEdit     method to allow custom edit behavior.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.IsValidCellType(Xceed.Wpf.DataGrid.Cell)">
            <summary>Retrieves a value indicating whether the type of the specified cell is supported by the row. This method is abstract.</summary>
            <returns>Classes that override this method should return true if the type of the cell is supported by the row; false otherwise.</returns>
            <param name="cell">A reference to the Cell whose type to verify.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnEditBeginning(Xceed.Wpf.DataGrid.CancelRoutedEventArgs)">
            <summary>Raises the EditBeginning event, which signals that the edit process is about to begin.</summary>
            <param name="e">A CancelRoutedEventArgs that contains the event data and that can prevent the edit process from beginning.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnEditBegun">
            <summary>Raises the EditBegun event, which signals that the edit process has begun.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnEditCanceled">
            <summary>Raises the EditCanceled event, which signals that the edit process has been canceled.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnEditCanceling">
            <summary>Raises the EditCanceling event, which signals that the edit process is being canceled.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnEditEnded">
            <summary>Raises the EditEnded event, which signals that the edit process has ended.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnEditEnding(Xceed.Wpf.DataGrid.CancelRoutedEventArgs)">
            <summary>Raises the EditEnding event, which signals that the edit process is about to end.</summary>
            <param name="e">A CancelRoutedEventArgs that contains the event data and that can prevent the edit process from ending.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>Invoked when an unhandled GotKeyboardFocus attached event reaches this element in its route.</summary>
            <param name="e">A KeyboardFocusChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>    Reports a change to the     IsKeyboardFocusWithin property.</summary>
            <param name="e">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled MouseEnter attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled MouseLeave attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.PrepareContainer(Xceed.Wpf.DataGrid.DataGridContext,System.Object)">
            <summary>Prepares a container in the specified DataGridContext for the item.</summary>
            <param name="dataGridContext">A reference to the DataGridContextShippin in which to prepare the container.</param>
            <param name="item">The item for which to prepare the container.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Row.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the Row class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.CellEditorDisplayConditions">
            <summary>Gets or sets a value indicating under what conditions the editors for the cells are displayed.</summary>
            <remarks>    Including Always when setting the     CellEditorDisplayConditions property will have     a significant negative impact on performance.     If MouseOverCell and/or     MouseOverRow are included, the "blinking"     effect that can occur if a cell editor's height is larger than     the cell or row height, can be prevented by setting the cell or     row's MinHeight property, via a style, to the     height of the largest cell editor.     Setting the CellEditorDisplayConditions     property at the row level will override the value of the     DataGridControl.CellEditorDisplayConditions     property for the specific row only.     " blankformat="variable:name=defaultmemberrequirements" --></remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.CellErrorStyle">
            <summary>Gets or sets the style that will be used by the cells contained in the row when their content fails the validation process.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.Cells">
            <summary>Gets a collection of the cells contained in the row.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.EditTriggers">
            <summary>Gets or sets a value indicating what triggers will cause cells to enter edit mode.  " --></summary>
            <remarks>             The conditions under which cell editors are         displayed are determined by the value of         the          CellEditorDisplayConditions         Property, which can be defined for the entire         grid or per row. The EditTriggers and         CellEditorDisplayConditions properties         work independently of each other. For example, if the         EditTriggers property is set to         None and the         CellEditorDisplayConditions property is         set to CellIsCurrent, when a cell becomes         current, its editor will be displayed and the content of         the cell can be edited when focus is given to the cell         editor.         A cell editor can be displayed without it         being in edit mode.                   Setting the EditTriggers property at         the row level will override the value of the         DataGridControl.EditTriggers         property for the specific row only.          " blankformat="variable:name=defaultmemberrequirements" --></remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.HasValidationError">
            <summary>Gets a value indicating whether the content of one of the cells contained in the row failed the validation process.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.InactiveSelectionBackground">
            <summary>Get or sets the background of the  selected rows when a grid does not have the focus.</summary>
            <remarks>The InactiveSelectionBackground is applied to the  selected rows when the  HideSelection property is set to false and a grid does not have the focus.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.InactiveSelectionForeground">
            <summary>Get or sets the foreground of the  selected rows when a grid does not have the focus.</summary>
            <remarks>The InactiveSelectionForeground is applied to the  selected rows when the  HideSelection property is set to false and a grid does not have the focus.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.IsBeingEdited">
            <summary>Gets a value indicating whether the row is being edited.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.IsCurrent">
            <summary>Gets a value indicating whether the row is the  current item.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.IsDirty">
            <summary>Gets a value indicating whether the content of one of the cells in the row has been modified.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.IsSelected">
            <summary>Gets a value indicating whether the row is selected.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.IsValidationErrorRestrictive">
            <summary>Gets or sets a value indicating whether the validation rule that failed prevents the focus from moving to another row until the error is fixed.</summary>
            <remarks>Currently, only errors reported through IDataErrorInfo are considered non-restrictive.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.NavigationBehavior">
            <summary>Gets or sets a value indicating how the focus navigates from one element to another in a grid.</summary>
            <remarks>    Setting the NavigationBehavior property     at the row level will override the value of the     DataGridControl.NavigationBehavior     that specific row only.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.ReadOnly">
            <summary>Gets or sets a value indicating whether the row is read-only.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.SelectionBackground">
            <summary>Get or sets the background of the  selected rows when a grid is focused.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.SelectionForeground">
            <summary>Get or sets the foreground of the  selected rows when a grid is focused.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Row.ValidationError">
            <summary>Gets or sets information about the validation rule that failed the validation process.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.CellErrorStyleProperty">
            <summary>Identifies the CellErrorStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.CellsProperty">
            <summary>Identifies the Cells dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.EditBeginningEvent">
            <summary>Identifies the EditBeginning routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.EditBegunEvent">
            <summary>Identifies the EditBegun routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.EditCanceledEvent">
            <summary>Identifies the EditCanceled routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.EditCancelingEvent">
            <summary>Identifies the EditCanceling routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.EditEndedEvent">
            <summary>Identifies the EditEnded routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.EditEndingEvent">
            <summary>Identifies the EditEnding routed event.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.EditTriggersProperty">
            <summary>Identifies the EditTriggers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.HasValidationErrorProperty">
            <summary>Identifies the  HasValidationError dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.InactiveSelectionBackgroundProperty">
            <summary>Identifies the  InactiveSelectionBackground dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.InactiveSelectionForegroundProperty">
            <summary>Identifies the  InactiveSelectionForeground dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.IsBeingEditedProperty">
            <summary>Identifies the IsBeingEdited dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.IsCurrentProperty">
            <summary>Identifies the IsCurrent dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.IsDirtyProperty">
            <summary>Identifies the IsDirty dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.IsSelectedProperty">
            <summary>Identifies the IsSelected dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.IsValidationErrorRestrictiveProperty">
            <summary>Identifies the  IsValidationErrorRestrictive dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.NavigationBehaviorProperty">
            <summary>Identifies the  NavigationBehavior dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.ReadOnlyProperty">
            <summary>Identifies the ReadOnly dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.SelectionBackgroundProperty">
            <summary>Identifies the  SelectionBackground dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.SelectionForegroundProperty">
            <summary>Identifies the  SelectionForeground dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Row.ValidationErrorProperty">
            <summary>Identifies the ValidationError dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Row.EditBeginning">
            <summary>Raised when the BeginEdit method has been called to signal that the edit process is about to begin.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Row.EditBegun">
            <summary>Raised after the EditBeginning event to signal that the edit process has begun.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Row.EditCanceled">
            <summary>Raised after the EditCanceling event to signal that the edit process has been canceled.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Row.EditCanceling">
            <summary>Raised when the CancelEdit method has been called to signal that the edit process is being canceled.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Row.EditEnded">
            <summary>Raised after the EditEnding event to signal that the edit process has ended.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Row.EditEnding">
            <summary>Raised when the EndEdit method has been called to signal that the edit process is about to end.</summary>
            <remarks>The EditBeginning and EditEnding events are raised immediately after their respective BeginEdit and EndEdit methods are called to allow the process to be canceled. In the EditBeginning event, if the  Cancel property of the CancelRoutedEventArgs received as a parameter is set to true, the cell or row that raised the event will be prevented from entering edit mode. Likewise, if Cancel is set to true in the EditEnding event, the cell or row will be prevented from exiting edit mode.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.RowSelector">
            <summary>Represents a control used to select a row.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.GetRowSelectorStyle(System.Windows.DependencyObject)">
            <summary>Gets the style that will be applied to row selectors.</summary>
            <returns>The Style that will be applied to row selectors.</returns>
            <param name="d"> The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.GetVisible(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether the row selectors are visible.</summary>
            <returns>true if the row selectors are visible; false otherwise. By default, true.</returns>
            <param name="d"> The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled LostMouseCapture attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonDown attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>Invoked when an unhandled MouseLeftButtonUp attached event reaches this element in its route.</summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>Invoked when an unhandled MouseMove attached event reaches this element in its route.</summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Raises the  PropertyChanged event.Invoked whenever the effective value of any dependency property on this element has been updated. The specific dependency property that changed is reported in the arguments parameter. Raises the  PropertyChanged event.</summary>
            <param name="e">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.SetRowSelectorStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>Sets the style that will be applied to row selectors.</summary>
            <param name="d"> The dependency object to which the attached property is written.</param>
            <param name="value">The Style that will be applied to row selectors.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelector.SetVisible(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether the row selectors are visible.</summary>
            <param name="d"> The dependency object to which the attached property is written.</param>
            <param name="value">true if the row selectors are visible; false otherwise. By default, true.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowSelector.ContainerRect">
            <summary>Gets the row selector's container Rect.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowSelector.HasValidationError">
            <summary>Gets a value indicating whether the row selector's associated row has a validation error.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowSelector.IsBeingEdited">
            <summary>Gets or sets a value indicating whether the row selector's associated data item is being edited.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowSelector.IsCurrent">
            <summary>Gets or sets a value indicating whether the row selector's associated row is current.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowSelector.IsPressed">
            <summary>Gets or sets a value indicating whether the RowSelector is pressed.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowSelector.ItemIndex">
            <summary>Gets the index of the RowSelector's associated data item.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowSelector.Orientation">
            <summary>Gets or sets the orientation of the RowSelector.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowSelector.RowType">
            <summary>Gets the type of the row associated with the row selector.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.ContainerRectProperty">
            <summary>Identifies the  ContainerRect dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.HasValidationErrorProperty">
            <summary>Identifies the  HasValidationError dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.IsBeingEditedProperty">
            <summary>Identifies the  IsBeingEdited dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.IsCurrentProperty">
            <summary>Identifies the IsCurrent dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.IsPressedProperty">
            <summary>Identifies the IsPressed dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.ItemIndexProperty">
            <summary>Identifies the ItemIndex dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.OrientationProperty">
            <summary>Identifies the  Orientation dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.RowSelectorStyleProperty">
            <summary>Identifies the  RowSelectorStyle attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.RowTypeProperty">
            <summary>Identifies the RowType dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelector.VisibleProperty">
            <summary>Identifies the  Visible attached property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.RowSelector.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.RowSelectorPane">
            <summary>Represents the Canvas in which the RowSelectors are painted.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelectorPane.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the contents of a row-selector pane.</summary>
            <returns>The size of the row-selector pane.</returns>
            <param name="finalSize">The Size this element uses to arrange its child elements.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowSelectorPane.MeasureOverride(System.Windows.Size)">
            <summary>Measures the child elements in anticipation of arranging them during the ArrangeOverride pass.</summary>
            <returns>The Size that represents the desired size of the element.</returns>
            <param name="availableSize">An upper limit Size that should not be exceeded.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowSelectorPane.Orientation">
            <summary>Gets or sets the orientation of the RowSelectorPane.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.RowSelectorPane.OrientationProperty">
            <summary>Identifies the  Orientation dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.RowValidationError">
            <summary>Represents the error that is provided when the value of a cell fails the binding-level validation process.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.RowValidationError.#ctor(System.Windows.Controls.ValidationRule,Xceed.Wpf.DataGrid.Row,System.Object,System.Exception)">
            <summary>Initializes a new instance of the RowValidationError class specifying various information on the validation rule that caused the caused the value to fail the validation process.</summary>
            <param name="ruleInError">    The      CellValidationRule that     contains the validation rule that failed.</param>
            <param name="rowInError">    The row whose value(s) failed the validation     process.</param>
            <param name="errorContent">    An object containing the content to display when an error     occurs.</param>
            <param name="exception">    The exception that was raised when the value failed the     validation process. Can be $$NULL$$.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowValidationError.ErrorContent">
            <summary>Gets an object containing the error content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowValidationError.Exception">
            <summary>    Gets the exception that was raised when the value failed     the binding-level validation process.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowValidationError.RowInError">
            <summary>    Gets the row whose value(s) failed the binding-level     validation process.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.RowValidationError.RuleInError">
            <summary>    Gets the validation rule that caused the value to fail     the binding-level validation process.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ScrollTip">
            <summary>Represents a content control that displays the value of one or more cells in the first visible row when a grid is scrolled.</summary>
            <remarks>    By default, the content of the cell in the first visible     row whose parent column is the      main column will be displayed, using the same template     defined by the column's      CellContentTemplate property.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ScrollTip.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ScrollTip.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the ScrollTip class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.StaircasePanel">
            <summary>Represents a panel whose child elements are laid out in a staircase pattern.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StaircasePanel.#ctor">
            <summary>Initializes a new instance of the StaircasePanel class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StaircasePanel.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the content of a StaircasePanel element.</summary>
            <returns>The Size that represents the arranged size of this StaircasePanel element and its children.</returns>
            <param name="finalSize">The Size that this element should use to arrange its child elements.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StaircasePanel.MeasureOverride(System.Windows.Size)">
            <summary>Measures the children of a StaircasePanel in anticipation of arranging them during the  ArrangeOverride pass.</summary>
            <returns>The Size that represents the desired size of the element.</returns>
            <param name="availableSize">An upper limit Size that should not be exceeded.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StaircasePanel.OnChildDesiredSizeChanged(System.Windows.UIElement)">
            <summary>Suspends layout behavior when a child element is resized.</summary>
            <param name="child">The child element that is being resized.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StaircasePanel.OnRender(System.Windows.Media.DrawingContext)">
            <summary>Draws the content of a DrawingContext object during the render pass of a StaircasePanel element.</summary>
            <param name="drawingContext">The DrawingContext object to draw.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StaircasePanel.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>Invoked when the VisualCollection of a visual object is modified.</summary>
            <remarks>ZIndex values are automatically recalculated when child elements are added to or removed from the collection.</remarks>
            <param name="visualAdded">The Visual that was added to the collection.</param>
            <param name="visualRemoved">The Visual that was removed from the collection.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.StaircasePanel.ConnectionLineAlignment">
            <summary>Gets or sets the alignment of the lines that connect the elements in the StaircasePanel together.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.StaircasePanel.ConnectionLineOffset">
            <summary>Gets or sets a value representing the offset at which to being and end drawing the connection lines between the elements in the StaircasePanel.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.StaircasePanel.ConnectionLinePen">
            <summary>Gets or sets the Pen that is used to draw the connection lines that connect the elements in the StaircasePanel.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.StaircasePanel.StairHeight">
            <summary>Gets or sets the vertical spacing between the tops of two consecutive elements.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.StaircasePanel.StairSpacing">
            <summary>Gets or sets the horizontal spacing between the right of a first element and the left of the next element.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.StaircasePanel.ConnectionLineAlignmentProperty">
            <summary>Identifies the  ConnectionLineAlignment dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.StaircasePanel.ConnectionLineOffsetProperty">
            <summary>Identifies the  ConnectionLineOffset dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.StaircasePanel.ConnectionLinePenProperty">
            <summary>Identifies the  ConnectionLinePen dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.StaircasePanel.StairHeightProperty">
            <summary>Identifies the  StairHeight dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.StaircasePanel.StairSpacingProperty">
            <summary>Identifies the  StairSpacing dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.StatCell">
            <summary>Represents a cell contained in a StatRow that can display the results of a statistical function. </summary>
            <remarks>    To display the results of a statistical function it is     suggested to set the      ResultPropertyName of the StatCell rather     than binding the content.     Although the result of a statistical function can be     displayed in other elements (e.g., TextBlock),     using a StatRow allows the results of     statistical functions to be arranged in a similar fashion as     the other cells in a grid.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StatCell.#ctor">
            <summary>Initializes a new instance of the StatCell class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StatCell.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the StatCell class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.StatCell.ResultConverter">
            <summary>Gets or sets the converter that will be used to convert the content of a StatCell.</summary>
            <remarks>    The messages returned by a     StatResultConverter when an exception occurs     during the calculation of a statistical function's result     depend on the type of the exception that was thrown. The     following table provides a list of exceptions for which default     messages have been provided:                                            Exception                 Default message                                           DivideByZeroException                 #DIV/0#                                           Exception                 #[Exception.Message]#                                                            InvalidSourcePropertyNameException                                  #[InvalidSourcePropertyNameException.SourcePropertyName]#                                                            InvalidValueException                 #VALUE#                                           OverflowException                 #OVER#                           </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.StatCell.ResultConverterCulture">
            <summary>Gets or sets the CultureInfo used by the  ResultConverter.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.StatCell.ResultConverterParameter">
            <summary>Gets or sets the parameter used by the  ResultConverter.</summary>
            <remarks>    Composite format strings use braces ("{}") to identify     place-holders, which causes an issue when providing a format     string to a StatResultConverter in XAML. As a     result, a StatResultConverter supports square     brackets ("[]") as a substitute for braces. For example, if     normally {0:#0.0} would have been used, it would be replaced     with [#0.0] when using a StatResultConverter.     If braces are preferred, the format string must be preceded     with a closing brace (e.g.,     ConverterParameter={}{0:#0.0}}).              When using square brackets, the 0: that represents the         place-holder must be omitted otherwise an         exception will be thrown.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.StatCell.ResultPropertyName">
            <summary>Gets or sets the property name from which the result of a statistical function can be retrieved.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.StatCell.ResultConverterCultureProperty">
            <summary>Identifies the  ResultConverterCulture dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.StatCell.ResultConverterParameterProperty">
            <summary>Identifies the  ResultConverterParameter dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.StatCell.ResultConverterProperty">
            <summary>Identifies the  ResultConverter dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.StatCell.ResultPropertyNameProperty">
            <summary>Identifies the  ResultPropertyName dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.StatRow">
            <summary>Specialization of the Row class, which allows the results of statistical functions to be displayed. </summary>
            <remarks>    Although the result of a statistical function can be     displayed in other elements (e.g., TextBlock),     using a StatRow allows the results of     statistical functions to be aligned with the column(s) from     whose values the result is calculated.     Although StatRows can be used in a     card-view layout, it is usually more appropriate (visually) to     use a custom visual tree that contains the elements that will     display the results be created.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StatRow.#ctor">
            <summary>Initializes a new instance of the StatRow class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StatRow.CreateCell(Xceed.Wpf.DataGrid.Column)">
            <summary>Creates a new StatCell in the row.</summary>
            <param name="column">A reference to a Column object representing the cell's parent column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StatRow.IsValidCellType(Xceed.Wpf.DataGrid.Cell)">
            <summary>Retrieves a value indicating whether the type of the specified cell is supported by the row.</summary>
            <param name="cell">A reference to the Cell whose type to verify</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.StatRow.PrepareDefaultStyleKey(Xceed.Wpf.DataGrid.Views.ViewBase)">
            <summary>When deriving from the StatRow class, PrepareDefaultStyleKey must be overridden in order to support dynamic style (view or theme modifications) changes.</summary>
            <param name="view">The view from which to retrieve the current style key.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.TextInputActivationGesture">
            <summary>Represents a text input gesture that causes an element to enter edit mode.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.TextInputActivationGesture.#ctor">
            <summary>Initializes a new instance of the  TextInputActivationGesture class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.CancelRoutedEventHandler">
            <summary>Represents the method that will handle cancelable routed events.</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A CancelRoutedEventArgs that contains the event data.</param>
        </member>
        <member name="N:Xceed.Wpf.DataGrid.Converters">
            <summary>The Xceed.Wpf.DataGrid.Converters namespace regroups all the converter classes.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.ThicknessConverter+ThicknessSides">
            <summary>Value representing the sides of a Thickness structure.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Converters.ThicknessConverter+ThicknessSides.Left">
            <summary>The left Thickness side.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Converters.ThicknessConverter+ThicknessSides.Top">
            <summary>The top Thickness side.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Converters.ThicknessConverter+ThicknessSides.Right">
            <summary>The right Thickness side.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Converters.ThicknessConverter+ThicknessSides.Bottom">
            <summary>The bottom Thickness side.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Converters.ThicknessConverter+ThicknessSides.All">
            <summary>All the Thickness sides.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter">
            <summary>Converter used to convert to and from a ColumnWidth structure.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter.#ctor">
            <summary>Initializes a new instance of the ColumnWidthConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter.CanConvertFrom">
            <summary>Retrieves a value indicating whether the specified type can be converted to a ColumnWidth structure.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Retrieves a value indicating whether the specified type can be converted to a ColumnWidth structure, using the provided context.</summary>
            <returns>true if the specified sourceType can be converted to a ColumnWidth structure; false otherwise.</returns>
            <param name="context">An ITypeDescriptorContext that provides the format context to use.</param>
            <param name="sourceType">The type to convert from.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter.CanConvertTo">
            <summary>Retrieves a value indicating whether the converter can convert a ColumnWidth structure to the specified type.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Retrieves a value indicating whether the converter can convert a ColumnWidth structure to the specified type, using the provided context.</summary>
            <returns>true if a ColumnWidth structure can be converted to the specified destinationType; false otherwise.</returns>
            <param name="context">An ITypeDescriptorContext that provides the format context to use.</param>
            <param name="destinationType">The type to convert to.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter.ConvertFrom">
            <summary>Converts the specified value to a ColumnWidth structure.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the specified type to a ColumnWidth structure, using the provided context and culture information.</summary>
            <param name="context">An ITypeDescriptorContext that provides the format context to use.</param>
            <param name="culture">The CultureInfo to use.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter.ConvertTo">
            <summary>Converts the given ColumnWidth structure to the specified type.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ColumnWidthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Converts the given ColumnWidth structure to the specified type, using the provided context and culture information.</summary>
            <param name="context">An ITypeDescriptorContext that provides the format context to use.</param>
            <param name="culture">The CultureInfo to use.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert to.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.CurrencyConverter">
            <summary>Convert that converts decimal and double values to and from a currency-formatted string.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.CurrencyConverter.#ctor">
            <summary>Initializes a new instance of the CurrencyConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.CurrencyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a decimal or double value to a currency-formatted string.</summary>
            <param name="value">    The decimal or double     value to convert.</param>
            <param name="targetType">string</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.CurrencyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a currency-formatted string to a double.</summary>
            <param name="value">The currency-formatted string to convert.</param>
            <param name="targetType">double</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.DateTimeToStringConverter">
            <summary>Converts the specified DateTime value to a string using the DateTimeMaskMode received as a parameter.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.DateTimeToStringConverter.#ctor">
            <summary>Initializes a new instance of the DateTimeToStringConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.DateTimeToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts the specified DateTime value to a string using the DateTimeMaskMode received as a parameter.</summary>
            <returns>A string representing the DateTime value that was converted to a string using the DateTimeMaskMode received as a parameter.</returns>
            <param name="value">The DateTime value to convert.</param>
            <param name="targetType">string</param>
            <param name="parameter">The DateTimeMaskMode value to which the string will be converter. By default, DateTimeMaskMode.ShortDate.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.DateTimeToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts the specified string value to a DateTime value.</summary>
            <returns>A DateTime value representing the converted string.i</returns>
            <param name="value">The DateTime value to convert.</param>
            <param name="targetType">DateTime</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.GreaterThanZeroConverter">
            <summary>Converter used to determine if a value is greater than zero.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.GreaterThanZeroConverter.#ctor">
            <summary>Initializes a new instance of the GreaterThanZeroConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.GreaterThanZeroConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts the specified value to a boolean value indicating whether it is greater than zero.</summary>
            <returns>true if the value is greater than zero; false otherwise.</returns>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.GreaterThanZeroConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>The ConvertBack method is not supported by the GreaterThanZeroConverter class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.IndexToOddConverter">
            <summary>Converter used to covert a value to a boolean value indicating whether it is odd or even.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.IndexToOddConverter.#ctor">
            <summary>Initializes a new instance of the IndexToOddConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.IndexToOddConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts the specified value to a boolean value indicating whether it is odd or not.</summary>
            <returns>true if value is odd; false if it is even.</returns>
            <param name="value">The Int32 value to convert.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.IndexToOddConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>The ConvertBack method is not supported by the IndexToOddConverter class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.IntAdditionConverter">
            <summary>Represents a value converter used to add the value of the  parameter to the value of  object. This converter applies only to Int32 values.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.IntAdditionConverter.#ctor">
            <summary>Initializes a new instance of the  IntAdditionConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.IntAdditionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>    Converts a value. The data binding engine calls this     method when it propagates a value from the binding source to     the binding target. This method only supports     Int32 values.</summary>
            <returns>The converted value.</returns>
            <param name="value">The value produced by the  binding source.</param>
            <param name="targetType">The type of the  binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.IntAdditionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Reverts a converted value. The data binding engine calls this method when it propagates a value from the binding target to the  binding source. This method only supports Int32 values.</summary>
            <returns>The converted value.</returns>
            <param name="value">    The value that is produced by the      binding     target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.InverseBooleanConverter">
            <summary>Represents a converter that inverses a boolean value.</summary>
            <remarks>This converter is used in XAML to convert a boolean value to its opposite value; true to false, and false to true.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.InverseBooleanConverter.#ctor">
            <summary>Initializes a new instance of the InverseBooleanConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts the boolean value.</summary>
            <param name="value">The boolean value to convert.</param>
            <param name="targetType">Boolean.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Reverts a converted boolean value.</summary>
            <param name="value">    The boolean value that is produced by the      binding     target.</param>
            <param name="targetType">Boolean.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.LevelToOpacityConverter">
            <summary>Represents a value converter used to convert Int32 values into percentages.</summary>
            <remarks>This converter is used in XAML to transform group levels into opacities. For example, if "0.2" is passed as the  parameter, 0 will be equal to 1.0, 1 to 0.8, so on, and so forth.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.LevelToOpacityConverter.#ctor">
            <summary>Initializes a new instance of the  LevelToOpacityConverter class.Initializes a new instance of the  LevelToOpacityConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.LevelToOpacityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>    Converts a value. The data binding engine calls this     method when it propagates a value from the binding source to     the binding target. This method can only convert     Int32 values.</summary>
            <returns>The converted value.</returns>
            <param name="value">The value produced by the  binding source.</param>
            <param name="targetType">    The type of the      binding     target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.LevelToOpacityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Reverts a converted value. The data binding engine calls this method when it propagates a value from the binding target to the  binding source. This method only supports Double values.</summary>
            <returns>The converted value.</returns>
            <param name="value">The value that is produced by the  binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.MultimodalResultConverter">
            <summary>Represents a converter that can be used to format the multimodal result of a Mode statistical function. </summary>
            <remarks>    By default, the result of a      Mode statistical function will be unimodal. To enable     multimodal results, the      AllowMultimodal property must be set to     true.     In the case where AllowMultimodal is set     to true, a MultimodalResultConverter must be     used to display the result, which will always be an array, even     if the result is not multimodal. If false and     a multimodal result occurs, only one of the mode will be     returned. Ex. : [1, 2, 2, 6, 6] is bimodal (2 and 6) and the     function will return either 2 or 6.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.MultimodalResultConverter.#ctor">
            <summary>Initializes a new instance of the MultimodalResultConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.MultimodalResultConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts an array of multimodal results to a comma-separated string (default).</summary>
            <remarks>    By default, the result of a Mode statistical function     will be unimodal. To enable multimodal results, the      AllowMultimodal property must be set to     true.     In the case where AllowMultimodal is set     to true, a MultimodalResultConverter must be     used to display the result, which will always be an array, even     if the result is not multimodal. If false and     a multimodal result occurs, only one of the mode will be     returned. Ex. : [1, 2, 2, 6, 6] is bimodal (2 and 6) and the     function will return either 2 or 6.</remarks>
            <returns>A comma-separated string representing the multimodal result. The separator can be modified by setting the  Separator property.</returns>
            <param name="value">The array of multimodal results to convert.</param>
            <param name="targetType">    The type of the      binding     target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.MultimodalResultConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>The ConvertBack method is not supported by the MultimodalResultConverter class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Converters.MultimodalResultConverter.Separator">
            <summary>Gets or sets the separator that will delimit each result in a multimodal result.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.NegativeDoubleConverter">
            <summary>Represents a value converter used to convert Double values to their opposite negative or positive value.</summary>
            <remarks>For example, if 500 is passed, it will be converted to -500.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.NegativeDoubleConverter.#ctor">
            <summary>Initializes a new instance of the  NegativeDoubleConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.NegativeDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>    Converts a value. The data binding engine calls this     method when it propagates a value from the binding source to     the binding target. This method only supports     Double values.</summary>
            <returns>The converted value.</returns>
            <param name="value">    The value produced by the      binding     source.</param>
            <param name="targetType">    The type of the      binding     target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.NegativeDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>    Reverts a converted value. The data binding engine calls     this method when it propagates a value from the binding target     to the      binding     source. This method only supports     Double values.</summary>
            <returns>The converted value.</returns>
            <param name="value">The value that is produced by the  binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.NullToBooleanConverter">
            <summary>Represents a value converter used to convert $$NULL$$ to a boolean value.</summary>
            <remarks>This converter will return true if $$NULL$$; false otherwise.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.NullToBooleanConverter.#ctor">
            <summary>Initializes a new instance of the  NullToBooleanConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.NullToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>    Converts a value. The data binding engine calls this     method when it propagates a value from the binding source to     the binding target.</summary>
            <returns>The converted value.</returns>
            <param name="value">    The value produced by the      binding     source.</param>
            <param name="targetType">    The type of the      binding     target property.</param>
            <param name="parameter">The converter parameter to use. If true and value is $$NULL$$, true will be returned. If false and value is $$NULL$$, false will be returned.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.NullToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>This method is not supported by the NullToBooleanConverter class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.SourceDataConverter">
            <summary>Converts a value of a field in a source to the target type.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.SourceDataConverter.#ctor">
            <summary>Initializes a new instance of the SourceDataConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.SourceDataConverter.#ctor">
            <summary>Initializes a new instance of the SourceDataConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.SourceDataConverter.#ctor(System.Boolean)">
            <summary>Initializes a new instance of the SourceDataConverte class specifying a value indicating whether the source supports DBNull values.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.SourceDataConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts the sourceValue to the targetType using the provided culture info.</summary>
            <returns>The converted value.</returns>
            <param name="sourceValue">The value in the source.</param>
            <param name="targetType">The Type to which to convert sourceValue.</param>
            <param name="targetCulture">The CultureInfo to use when converting the value.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.SourceDataConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts the targetValue to the sourceType using the provided culture info.</summary>
            <returns>The converted value.</returns>
            <param name="targetValue">The target value.</param>
            <param name="sourceType">The Type to which to convert targetValue.</param>
            <param name="targetCulture">The CultureInfo to use when converting the value.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Converters.SourceDataConverter.SourceSupportsDBNull">
            <summary>Gets or sets a value indicating whether the source supports DBNull values.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.StatResultConverter">
            <summary>Represents a converter that can be used to format the result of a statistical function, as well as display a user-friendly message when an exception occurs within the function during the calculation of its result. </summary>
            <remarks>    The messages returned by a     StatResultConverter when an exception occurs     during the calculation of a statistical function's result     depend on the type of the exception that was thrown. The     following table provides a list of exceptions for which default     messages have been provided:                                            Exception                 Default message                                           DivideByZeroException                 #DIV/0#                                           Exception                 #[Exception.Message]#                                                            InvalidSourcePropertyNameException                                  #[InvalidSourcePropertyNameException.SourcePropertyName]#                                                            InvalidValueException                 #VALUE#                                           OverflowException                 #OVER#                                         Composite format strings use braces ("{}") to         identify place-holders, which causes an issue when         providing a format string to a         StatResultConverter in XAML; therefore,         the StatResultConverter supports square         brackets ("[]") as a substitute for braces. For example, if         normally {0:#0.0} would have been used, it would be         replaced with [#0.0] when using a         StatResultConverter. If braces are         preferred, the format string must be preceded with a         closing brace (e.g.,         ConverterParameter={}{0:#0.0}}).                      When using square brackets, the 0: that represents the             place-holder must be omitted otherwise             an exception will be thrown.              </remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.StatResultConverter.#ctor">
            <summary>Initializes a new instance of the StatResultConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.StatResultConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts the specified value using the composite format string specified as parameter.</summary>
            <returns>The converted value.</returns>
            <remarks>    The messages returned by a     StatResultConverter when an exception occurs     during the calculation of a statistical function's result     depend on the type of the exception that was thrown. The     following table provides a list of exceptions for which default     messages have been provided:                                            Exception                 Default message                                           DivideByZeroException                 #DIV/0#                                           Exception                 #[Exception.Message]#                                                            InvalidSourcePropertyNameException                                  #[InvalidSourcePropertyNameException.SourcePropertyName]#                                                            InvalidValueException                 #VALUE#                                           OverflowException                 #OVER#                           </remarks>
            <param name="value">The result of a statistical function.</param>
            <param name="targetType">The target type is ignored by the StatResultConverter.</param>
            <param name="parameter">    A composite format string. If a      FormatProvider has been provided, it will be used in     combination with the format string to convert the     value (see also Composite Formatting     topic in Windows SDK).     If parameter is $$NULL$$, value will be     returned unmodified.     Composite format strings use braces ("{}") to identify     place-holders, which causes an issue when providing a format     string to a StatResultConverter in XAML;     therefore, the StatResultConverter supports     square brackets ("[]") as a substitute for braces. For example,     if normally {0:#0.0} would have been used, it would be replaced     with [#0.0] when using a StatResultConverter.     If braces are preferred, the format string must be preceded     with a closing brace (e.g.,     ConverterParameter={}{0:#0.0}}).              When using square brackets, the 0: that represents the         place-holder must be omitted otherwise an         exception will be thrown.     </param>
            <param name="culture">The culture info is ignored by the StatResultConverter.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Converters.StatResultConverter.DivisionByZeroMessage">
            <summary>Gets or sets the message that is returned by a StatResultConverter when a DivideByZeroException occurs during the calculation of a statistical function's result.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Converters.StatResultConverter.InvalidValueMessage">
            <summary>Gets or sets the message that is returned by a StatResultConverter when an  InvalidValueException occurs during the calculation of a statistical function's result.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Converters.StatResultConverter.OverflowMessage">
            <summary>Gets or sets the message that is returned by a StatResultConverter when an OverflowException occurs during the calculation of a statistical function's result.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.StringFormatConverter">
            <summary>Represents a converter that converts a value to a string using composite formatting</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.StringFormatConverter.#ctor">
            <summary>Initializes a new instance of the StringFormatConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a value to a string using the specified composite string format.</summary>
            <param name="value">The value to convert.</param>
            <param name="targetType">The target type is ignored by the StringFormatConverter.</param>
            <param name="parameter">    A composite format string. If a      FormatProvider has been provided, it will be used in     combination with the format string to convert the     value (see also Composite Formatting     topic in Windows SDK).     If parameter is $$NULL$$, value will be     returned unmodified.</param>
            <param name="culture">The culture info is ignored by the StringFormatConverter.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>The ConvertBack method is not supported by the StringFormatConverter class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Converters.StringFormatConverter.FormatProvider">
            <summary>Gets or sets an object used to provide culture-specific formatting information.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.ThicknessConverter">
            <summary>Represents a converter used to convert a Double to a Thickness structure.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ThicknessConverter.#ctor">
            <summary>Initializes a new instance of the  ThicknessConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>    Converts a value. The data binding engine calls this     method when it propagates a value from the binding source to     the binding target. This method only supports     Double values.</summary>
            <returns>The converter value. All sides to the Thickness will have the same value.</returns>
            <param name="value">The value produced by the  binding source.</param>
            <param name="targetType">    The type of the      binding     target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>This method is not supported by the ThicknessConverter class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Converters.ThicknessConverter.InverseValue">
            <summary>Gets or sets a value indicating whether the inverse of the converted value is returned by the  Convert method.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.TypeToBooleanConverter">
            <summary>Converter that determines if a type is assignable from the type of the value to convert.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.TypeToBooleanConverter.#ctor">
            <summary>Initializes a new instance of the TypeToBooleanConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.TypeToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Determines if the type specified as a parameter is assignable from the type of the specified value.</summary>
            <returns>true if the type specified as a parameter is assignable from the type of the specified value; false otherwise.</returns>
            <param name="value">The value whose type to verify.</param>
            <param name="parameter">The type to validate.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.TypeToVisibilityConverter">
            <summary>Converts a Type to a Visibility value.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.TypeToVisibilityConverter.#ctor">
            <summary>Initializes a new instance of the TypeToVisibilityConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.TypeToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a Type to a Visibility value.</summary>
            <returns>The value of the  Visibility property when value and parameter are the same or when they are not, according to the value of the  SetVisibilityWhenTrue property.</returns>
            <param name="value">The Type to convert.</param>
            <param name="targetType">Visibility</param>
            <param name="parameter">The Type to which to compare.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.TypeToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>The ConvertBack method is not supported by the TypeToVisibilityConverter class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Converters.TypeToVisibilityConverter.SetVisibilityWhenTrue">
            <summary>Gets or sets a value indicating whether the value of the  Visibility property is set when the types are the same or when they are different.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Converters.TypeToVisibilityConverter.Visibility">
            <summary>Gets or sets the Visibility value that will be used.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Converters.ValueToMaskedTextConverter">
            <summary>Converts a value to a masked text string.</summary>
            <remarks>For more information, refer to the  MaskedTextProvider Class topic in the Windows SDK documentation.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ValueToMaskedTextConverter.#ctor">
            <summary>Initializes a new instance of the ValueToMaskedTextConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Converters.ValueToMaskedTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a value to a masked text string.</summary>
            <param name="value">The string to convert.</param>
            <param name="parameter">A string representation of the mask.</param>
        </member>
        <member name="N:Xceed.Wpf.DataGrid.Markup">
            <summary>The Xceed.Wpf.DataGrid.Markup namespace regroups the XAML-specific classes.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Markup.CellContentBindingExtension">
            <summary>    Links the cell's     content to the value of some other property exposed on the     control template, for example, the Content     property of the ContentPresenter.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.CellContentBindingExtension.#ctor">
            <summary>Initializes a new instance of the  CellContentBinding class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.CellContentBindingExtension.ProvideValue(System.IServiceProvider)">
            <summary>Returns an object that is set as the value of the target property for this markup extension.</summary>
            <returns>The value to set on the  binding target property.</returns>
            <param name="serviceProvider">Object that can provide services for the markup extension</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.CellContentBindingExtension.Converter">
            <summary>Gets or sets the converter used by the CellContentBindingExtension class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.CellContentBindingExtension.ConverterCulture">
            <summary>    Gets or sets the culture used by the      Converter.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.CellContentBindingExtension.ConverterParameter">
            <summary>    Gets or sets the parameters used by the      Converter.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Markup.CellEditorBindingExtension">
            <summary>    Interprets and creates the binding required between a     cell and     its editor     at runtime.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.CellEditorBindingExtension.#ctor">
            <summary>Initializes a new instance of the  CellEditorBinding class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.CellEditorBindingExtension.ProvideValue(System.IServiceProvider)">
            <summary>Returns an object that is set as the value of the target property for this markup extension.</summary>
            <returns/>
            <param name="serviceProvider">Object that can provide services for the markup extension</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.CellEditorBindingExtension.Converter">
            <summary>Gets or sets the converter used by the CellEditorBindingExtension class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.CellEditorBindingExtension.ConverterCulture">
            <summary>    Gets or sets the culture used by the      Converter.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.CellEditorBindingExtension.ConverterParameter">
            <summary>    Gets or sets the parameters used by the      Converter.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.CellEditorBindingExtension.NotifyOnSourceUpdated">
            <summary> Gets or sets a value indicating whether to provide notification when a value is transferred from the binding target to the binding source.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.CellEditorBindingExtension.NotifyOnTargetUpdated">
            <summary> Gets or sets a value indicating whether to provide notification when a value is transferred from the binding source to the binding target.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.CellEditorBindingExtension.NotifyOnValidationError">
            <summary> Gets or sets a value indicating whether to provide notification when a validation error occurs.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Markup.ThemeConverter">
            <summary>Initializes a new instance of the ThemeConverter class.Provides a type converter to convert Themes to and from various other representations.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeConverter.#ctor">
            <summary>Initializes a new instance of the ThemeConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeConverter.CanConvertFrom">
            <summary>Returns whether this converter can convert an object of one type to the type of this converter.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Gets a value indicating whether this converter can convert an object in the given source type to a Theme using the specified context.</summary>
            <returns>true the conversion can be performed; false otherwise.</returns>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type to convert from.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeConverter.CanConvertTo">
            <summary>Returns whether this converter can convert the object to the specified type.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Returns whether this converter can convert the object to the specified type, using the specified context.</summary>
            <returns>true if the conversion can be performed; false otherwise.</returns>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type to convert to.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeConverter.ConvertFrom">
            <summary>Converts the given value object to a Theme.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Converts the given value object to a Theme.</summary>
            <returns>An object that represents the converted value.</returns>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo that specifies the culture to which to convert.</param>
            <param name="value">The object to convert.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Markup.ThemeKey">
            <summary>Represents a key that provides a unique identifier for each style. Each style associates its key with a view, a theme, and an element.</summary>
            <remarks>The ThemeKey will be used in conjunction with the x:Key markup extension.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeKey.#ctor">
            <summary>Initializes a new instance of the ThemeKey class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeKey.#ctor">
            <summary>Initializes a new instance of the ThemeKey class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeKey.#ctor(System.Type,System.Type)">
            <summary>Initializes a new instance of the ThemeKey class specifying the Type of the view and element to which the style applies.</summary>
            <param name="targetViewType">The Type of the view to which the style applies.</param>
            <param name="targetElementType">The Type of the element to which the style applies.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeKey.#ctor(System.Type,System.Type,System.Type)">
            <summary>Initializes a new instance of the ThemeKey specifying the Type of the view, type, and element to which the style applies.</summary>
            <param name="targetViewType">The Type of the view to which the style is associated.</param>
            <param name="themeType">The Type of the theme to which the style is associated.</param>
            <param name="targetElementType">The Type of the element to which the style is associated.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeKey.Equals(System.Object)">
            <summary>Retrieves a value indicating whether the specified object is the same as the current object.</summary>
            <returns>true if the specified object is the same as the current object; false otherwise.</returns>
            <param name="obj">The object to compare.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ThemeKey.GetHashCode">
            <returns/>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.ThemeKey.Assembly">
            <summary>Gets an assembly object that indicates which assembly's dictionary to look in for the value associated with this key.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.ThemeKey.TargetElementType">
            <summary>Gets or sets the Type of the element to which the style applies.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.ThemeKey.TargetViewType">
            <summary>Gets or sets the Type of the view to which the style applies.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.ThemeKey.ThemeType">
            <summary>Gets or sets the Type of the theme to which the style applies.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension">
            <summary>    Interprets and creates the binding between an element and     the      view applied to a grid.</summary>
            <remarks>A ViewBinding can not be used in a trigger; however, it can be used as the value of a setter property in a style or assigned directly to the value of a property in a template.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension.#ctor">
            <summary>Initializes a new instance of the  ViewBinding class.Initializes a new instance of the ViewBinding class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension.#ctor">
            <summary>Initializes a new instance of the  ViewBinding class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension.#ctor(System.String)">
            <summary>Initializes a new instance of the  ViewBinding class specifying the path to the binding source property.</summary>
            <param name="path">A string representing the path to the binding source property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension.ProvideValue(System.IServiceProvider)">
            <summary>Returns an object that is set as the value of the target property for this markup extension.</summary>
            <returns>The object value to set on the property where the extension is applied.</returns>
            <param name="serviceProvider">    Object that can provide services for the markup     extension.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension.Converter">
            <summary>Gets or sets the converter to use.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension.ConverterCulture">
            <summary>Gets or sets the culture in which to evaluate the converter.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension.ConverterParameter">
            <summary>Gets or sets the parameter to pass to the  Converter.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension.Mode">
            <summary>Gets or sets a value that indicates the direction of the data flow in the binding.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Markup.ViewBindingExtension.Path">
            <summary>Gets or sets the path to the  binding source property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Markup.ViewConverter">
            <summary>Allows for a view and theme to be assigned to the View property of a DataGridControl through attribute syntax.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewConverter.#ctor">
            <summary>Initializes a new instance of the ViewConverter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewConverter.CanConvertFrom">
            <summary>Determines whether an object of the specified type can be converted to an instance of ViewConverter.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>Determines whether an object of the specified type can be converted to an instance of ViewConverter, using the specified context.</summary>
            <returns>true if the object can be converted; false otherwise.</returns>
            <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
            <param name="sourceType">The type being evaluated for conversion.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewConverter.ConvertFrom">
            <summary>Attempts to convert the specified object to a ViewConverter.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>Attempts to convert the specified object to a ViewConverter, using the specified context.</summary>
            <returns>The converted object.</returns>
            <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
            <param name="culture">Culture specific information.</param>
            <param name="value">The object to convert</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewConverter.ConvertTo">
            <summary>Attempts to convert the ViewConverter to the specified type.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Markup.ViewConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>Attempts to convert a ViewConverter to the specified type, using the specified context.</summary>
            <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
            <param name="culture">Culture specific information.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to</param>
        </member>
        <member name="N:Xceed.Wpf.DataGrid.Print">
            <summary>The Xceed.Wpf.DataGrid.Print namespace regroups all the printing-related classes.</summary>
            <remarks>The views that can be used when printing are defined in the Xceed.Wpf.DataGrid.Views namespace.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Print.PagePrintOrder">
            <summary>Value representing the order in which the pages are printed (see Remarks). </summary>
            <remarks>When PagePrintOrder is set to Horizontal, the columns of the rows fitting on a given page will be printed on subsequent pages until all columns of those rows have been completely printed. When PagePrintOrder is set to Vertical, the same columns will be printed on subsequent pages to the end of the columns being printed. So for example, given a grid with 10 columns, where only five columns can fit on a printed page, when PagePrintOrder is set to Horizontal, the first page will contain the first five columns, whereas the second page will contain the remaining five columns of those rows. In other words, all of the columns of the first group of rows being printed will be completed before moving on to the next group of rows. On the other hand, when PagePrintOrder is set to Vertical, the first page will contain the first five columns of the first group of rows, the second page will contain the first five columns of the second group of rows, and so on until the first five columns of a grid are printed in their entirety.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Print.PagePrintOrder.Horizontal">
            <summary>The pages will be printed horizontally (see Remarks).</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Print.PagePrintOrder.Vertical">
            <summary>The pages will be printed vertically (see Remarks).</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Print.DataGridPageControl">
            <summary>A control that determines the layout of the printed pages when a DataGridControl is printed or exported. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPageControl.#ctor(Xceed.Wpf.DataGrid.DataGridControl)">
            <summary>Initializes a new instance of the DataGridPageControl class specifying the DataGridControl that will be printed.</summary>
            <param name="dataGridControl">A reference to a DataGridControl object representing the grid that will be printed.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPageControl.GetIsDataGridHost(System.Windows.DependencyObject)">
            <summary>Gets a value that, when set by a panel, identifies that panel as the host that will contain the DataGridControl.</summary>
            <returns>true if a panel is used as a grid host; false otherwise.</returns>
            <remarks>This method represents the "get" portion of the IsDataGridHost attached property.</remarks>
            <param name="obj">The panel identified as the host that will contain the DataGridControl.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPageControl.GetIsPageFootersHost(System.Windows.DependencyObject)">
            <summary>Gets a value that, when set by a panel, identifies that panel as the host that will contain all elements added to a page's footers through the  PageFooters property.</summary>
            <returns>true if a panel is used as the page-footers host; false otherwise.</returns>
            <remarks>This method represents the "get" portion of the IsPageFootersHost attached property.</remarks>
            <param name="obj">The panel identified as the host that will contain all elements added to a page's footers through the  PageFooters property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPageControl.GetIsPageHeadersHost(System.Windows.DependencyObject)">
            <summary>Gets a value that, when set by a panel, identifies that panel as the host that will contain all elements added to a page's headers through the  PageHeaders property.</summary>
            <returns>true if a panel is used as the page-headers host; false otherwise.</returns>
            <remarks>This method represents the "get" portion of the IsPageHeadersHost attached property.</remarks>
            <param name="obj">The panel identified as the host that will contain all elements added to a page's headers through the  PageHeaders property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPageControl.SetIsDataGridHost(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value that, when set by a panel, identifies that panel as the host that will contain the DataGridControl.</summary>
            <remarks>This method represents the "set" portion of the IsDataGridHost attached property.</remarks>
            <param name="obj">The panel identified as the host that will contain the DataGridControl.</param>
            <param name="value">true to identify a panel as a grid host; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPageControl.SetIsPageFootersHost(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value that, when set by a panel, identifies that panel as the host that will contain all elements added to a page's footers through the  PageFooters property.</summary>
            <remarks>This method represents the "set" portion of the IsPageFootersHost attached property.</remarks>
            <param name="obj">The panel identified as the host that will contain all elements added to a page's footers through the  PageFooters property.</param>
            <param name="value">true to identify a panel as the page-footers host; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPageControl.SetIsPageHeadersHost(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value that, when set by a panel, identifies that panel as the host that will contain all elements added to a page's headers through the  PageHeaders property.</summary>
            <remarks>This method represents the "set" portion of the IsPageHeadersHost attached property.</remarks>
            <param name="obj">The panel identified as the host that will contain all elements added to a page's headers through the  PageHeaders property.</param>
            <param name="value">true to identify a panel as the page-headers host; false otherwise.</param>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Print.DataGridPageControl.IsDataGridHostProperty">
            <summary>Identifies the IsDataGridHost attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Print.DataGridPageControl.IsPageFootersHostProperty">
            <summary>Identifies the IsPageFootersHost attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Print.DataGridPageControl.IsPageHeadersHostProperty">
            <summary>Identifies the IsPageHeadersHost attached property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Print.DataGridPaginator">
            <summary>Class that creates a multiple-page element from a DataGridControl object. </summary>
            <remarks>A new paginator can be created using the  DataGridControl.CreateDocumentPaginator method.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPaginator.GetPage(System.Int32)">
            <summary>Retrieves the page at the specified index.</summary>
            <returns>A DocumentPage representing the page at the specified index.</returns>
            <param name="pageIndex">The zero-based index of the page to retrieve.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPaginator.InitializeSettings">
            <summary>Initializes the paginator settings.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPaginator.InitializeSettings(System.Windows.Controls.PrintDialog)">
            <summary>Initializes the paginator settings using the values provided by the specified PrintDialog.</summary>
            <remarks>When running in XBAP, the InitializeSettings method will not throw; however, if not running using FullTrust permissions the chosen print queue's options cannot be extrapolated, therefore a safe assumption of 36.0d for the printer margins will be made.</remarks>
            <param name="printDialog">A PrintDialog that containing the values used to initialize the paginator settings.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPaginator.InitializeSettings(System.Printing.PrintQueue)">
            <summary>Initializes the paginator settings using the values provided by the specified PrintQueue.</summary>
            <param name="printQueue">A PrintQueue that containing the values used to initialize the paginator settings.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPaginator.InitializeSettings(System.Printing.PrintQueue,System.Printing.PrintTicket)">
            <summary>Initializes the paginator settings using the values provided by the specified PrintQueue and PrintTicket.</summary>
            <param name="printQueue">A PrintQueue that containing the values used to initialize the paginator settings.</param>
            <param name="printTicket">A PrintTicket that containing the values used to initialize the paginator settings.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPaginator.OnProgress(Xceed.Wpf.DataGrid.Print.ProgressEventArgs)">
            <summary>Raises the  Progress event.</summary>
            <param name="e">A  ProgressEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.DataGridPaginator.ToString">
            <summary>Returns the string representation of the DataGridPaginator.</summary>
            <returns>The string representation of the DataGridPaginator.</returns>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.DataGridPaginator.ImageableArea">
            <summary>Gets or sets the imageable area of each page.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.DataGridPaginator.IsPageCountValid">
            <summary>Gets a value indicating whether  PageCount is the total number of pages.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.DataGridPaginator.PageCount">
            <summary>Gets the number of pages that are currently formatted.</summary>
            <remarks>If  IsPageCountValid returns true, pagination is complete and PageCount is the total number of pages in the document. If false, pagination is in progress and PageCount is the number of pages currently formatted (not the total). This value may change if the  PageSize or content changes since these events would force a repagination.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.DataGridPaginator.PageOrientation">
            <summary>Gets or sets the orientation of each page.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.DataGridPaginator.PageRange">
            <summary>Gets or sets the range of the pages to be formatted.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.DataGridPaginator.PageSize">
            <summary>Gets or sets the suggested width and height of each page.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.DataGridPaginator.ProgressInfo">
            <summary>Gets progress information on the content of a grid that is being printed or exported.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.DataGridPaginator.Source">
            <summary>Gets the element being paginated.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Print.DataGridPaginator.Progress">
            <summary>Raised to provide progress information during the printing or exporting process.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel">
            <summary>Arranges and virtualizes content to be printed on a single line that is oriented either horizontally or vertically. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.#ctor">
            <summary>Initializes a new instance of the PrintVirtualizingStackPanel class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the child elements of the panel. </summary>
            <param name="finalSize">The Size this element uses to arrange its child elements.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.BringIndexIntoView(System.Int32)">
            <summary>Generates the item at the specified index position and brings it into view.</summary>
            <param name="index">The position of the item to generate and make visible.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.LineDown">
            <summary>Scrolls down within content by one logical unit.   " --></summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.LineLeft">
            <summary>Scrolls left within content by one logical unit. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.LineRight">
            <summary>Scrolls right within content by one logical unit.   " --></summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.LineUp">
            <summary>Scrolls up within content by one logical unit. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>Forces content to scroll until the coordinate space of a Visual object is visible. </summary>
            <param name="visual">             A Visual that becomes visible.     </param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.MeasureOverride(System.Windows.Size)">
            <summary>Measures the child elements in anticipation of arranging them during the  ArrangeOverride pass.   " --></summary>
            <returns>The Size that represents the desired size of the element.</returns>
            <param name="availableSize">             An upper limit Size that should not be exceeded.                  $$GenericArguments$$filtereditemlist" -->$$Return_Type$$comment" blankformat="" -->     </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.MouseWheelDown">
            <summary>Scrolls down within content after a user clicks the wheel button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.MouseWheelLeft">
            <summary>Scrolls left within content after a user clicks the wheel button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.MouseWheelRight">
            <summary>Scrolls right within content after a user clicks the wheel button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.MouseWheelUp">
            <summary>Scrolls up within content after a user clicks the wheel button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.OnClearChildren">
            <summary>Called when the collection of child elements is cleared by the panel.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.PageDown">
            <summary>Scrolls down within content by one page.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.PageLeft">
            <summary>Scrolls left within content by one page</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.PageRight">
            <summary>Scrolls right within content by one page</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.PageUp">
            <summary>Scrolls up within content by one page</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.SetHorizontalOffset(System.Double)">
            <summary>Sets the amount of horizontal offset.</summary>
            <param name="offset">The degree to which content is horizontally offset from the containing viewport. </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.SetVerticalOffset(System.Double)">
            <summary>Sets the amount of vertical offset. </summary>
            <param name="offset">The degree to which content is vertically offset from the containing viewport.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.CanHorizontallyScroll">
            <summary>Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.CanVerticallyScroll">
            <summary>Gets or sets a value that indicates whether scrolling on the vertical axis is possible.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.ExtentHeight">
            <summary>Gets the vertical size of the extent. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.ExtentWidth">
            <summary>Gets the horizontal size of the extent. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.HorizontalOffset">
            <summary>Gets the horizontal  offset of the scrolled content.</summary>
            <remarks>             The value assigned to this property must be greater than or         equal to zero, and less than          ExtentWidth minus          ViewportWidth.          " BlankFormat="" -->" blankformat="variable:name=defaultmemberrequirements" --></remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.Orientation">
            <summary>Gets or sets a value that describes the horizontal or vertical content orientation.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.ScrollOwner">
            <summary>Gets or sets a ScrollViewer element that controls the scrolling behavior of the panel. " --></summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.VerticalOffset">
            <summary>Gets the vertical offset of the scrolled content.  " --></summary>
            <remarks>The value assigned to this property must be greater than or equal to zero, and less than  ExtentHeight minus  ViewportHeight.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.ViewportHeight">
            <summary>Gets the vertical size of the viewport for this content. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.ViewportWidth">
            <summary>Gets the horizontal size of the viewport for this content.   " --></summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Print.PrintVirtualizingStackPanel.OrientationProperty">
            <summary>Identifies the  Orientation dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Print.ProgressEventArgs">
            <summary>Provides progress information during printing or exporting operations. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.ProgressEventArgs.#ctor(Xceed.Wpf.DataGrid.Print.ProgressInfo)">
            <summary>Initializes a new instance of the PrintProgressionEventArgs class specifying progression information.</summary>
            <param name="progressInfo">An reference to a ProgressInfo object containing information on the content of a grid that is being printed or exported.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.ProgressEventArgs.ProgressInfo">
            <summary>Gets progress information on the content of a grid that is being printed or exported.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Print.ProgressInfo">
            <summary>Class that provides information on the content of a grid is being printed or exported. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Print.ProgressInfo.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raises the  PropertyChanged event.</summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.ProgressInfo.CurrentPageNumber">
            <summary>Gets the number of the page currently being printed or exported.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.ProgressInfo.Description">
            <summary>Gets or sets the descriptive information displayed in the progress window when the content of a grid is being printed or exported.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Print.ProgressInfo.PercentCompleted">
            <summary>Gets a value representing the percentage of the printing or exporting process that has been completed.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Print.ProgressInfo.PropertyChanged">
            <summary>Raised when the value of a property is changed.</summary>
        </member>
        <member name="N:Xceed.Wpf.DataGrid.Stats">
            <summary>The Xceed.Wpf.DataGrid.Stats namespace regroups all the statistical-related classes. The StatRow and StatCell class are located in the main Xceed.Wpf.DataGrid namespace.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.AverageFunction">
            <summary>    Class that represents the Average statistical function,     which is the measure of central tendancy of a set of values     computed by dividing the sum of the values by their number;     commonly called the arithmetic mean or the average. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.AverageFunction.#ctor">
            <summary>Initializes a new instance of the AverageFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.AverageFunction.#ctor">
            <summary>Initializes a new instance of the AverageFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.AverageFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the AverageFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.AverageFunction.Accumulate(System.Object[])">
            <summary>This method is not implemented by the Average statistical function. Only the prerequisite functions are required to calculate the result.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.AverageFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
            <remarks/>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.AverageFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types of the columns specified by the  SourcePropertyName property.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.AverageFunction.InitializePrerequisites(Xceed.Wpf.DataGrid.Stats.StatResult[])">
            <summary>Initializes the prerequisite statistical functions defined by the  PrerequisiteFunctions property.</summary>
            <param name="prerequisitesValues">    An array of StatResult objects     representing the results of the prerequisite functions. The     results will be returned in the same order as the statistical     functions defined by the      PrerequisiteFunctions property. The following table     provides a list of the prerequisite statistical functions for     this function.                                            Index                 Prerequisite statistical                 function                                           0                                  SumFunction                                           1                                  CountFunction                           </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.AverageFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.AverageFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Average statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.AverageFunction.PrerequisiteFunctions">
            <summary>Gets a list of the statistical functions whose results are required by the current statistical function in order to calculate its own result.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.AverageFunction.RequiresAccumulation">
            <summary>Gets a value indicating whether the statistical function needs to accumulate its own results.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction">
            <summary>    Class the represents the Correlation Coefficient     statistical function, which represents the quantity that gives     the quality of a least squares fitting to the original data.     Also known as cross-correlation coefficient. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.#ctor">
            <summary>Initializes a new instance of the CorrelationCoefficientFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.#ctor">
            <summary>Initializes a new instance of the CorrelationCoefficientFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the CorrelationCoefficientFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function. </summary>
            <param name="values">An array of values that will be accumulated to calculate the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types of the columns specified by the  SourcePropertyName property.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.InitializePrerequisites(Xceed.Wpf.DataGrid.Stats.StatResult[])">
            <summary>Initializes the prerequisite statistical functions defined by the  PrerequisiteFunctions property. </summary>
            <param name="prerequisitesValues">    An array of StatResult objects     representing the results of the prerequisite functions. The     results will be returned in the same order as the statistical     functions defined by the      PrerequisiteFunctions property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Correlation Coefficient statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains 2 names.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.CorrelationCoefficientFunction.PrerequisiteFunctions">
            <summary>Gets a list of the statistical functions whose results are required by the current statistical function in order to calculate its own result.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.CountFunction">
            <summary>    Class that represents the Count statistical function,     which is the result of a tally that reveals the number of items     in a set. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.#ctor">
            <summary>Initializes a new instance of the Count statistical function.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.#ctor">
            <summary>Initializes a new instance of the Count statistical function.</summary>
            <remarks>Any $$NULL$$ and DbNull values will be excluded from the count. To include them, the  IncludeNullValues must be set to true,</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the CountFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <remarks>Any $$NULL$$ and DbNull values will be excluded from the count. To include them, the  IncludeNullValues must be set to true,</remarks>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.#ctor(System.String,System.String,System.Boolean)">
            <summary>Initializes a new instance of the CountFunction class specifying the unique property name from which the result of the function can be retrieved, the name of the column whose values will be used to calculate the result, and indicating whether $$NULL$$ and DbNull values are included.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
            <param name="includeNullValues">true if $$NULL$ and DbNull values are included in the count; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function. The values will be accumulated in an Int64.</summary>
            <param name="values">    An array of values that will be accumulated to calculate     the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.AccumulateChildResult(Xceed.Wpf.DataGrid.Stats.StatResult)">
            <summary>Accumulates the values required to calculate the result of the statistical function from the results of a child group. The values will be accumulated in an Int64. </summary>
            <remarks>    In cases where it is not possible to accumulate child     results (e.g., the statistical function is accumulating values     on a last level group),      Accumulate will be called instead for every data item in     the group.</remarks>
            <param name="childResult">A StatResult containing the accumulation of the necessary values from the child groups.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.GetEquivalenceKey">
            <summary>Retrieves a value that represents the statistical function's unique equivalence key</summary>
            <returns>A value representing the statistical function's unique equivalence key. " -->" --></returns>
            <remarks>A new equivalence key has been provided for the CountFunction because of the addition of the  IncludeNullValues property, which can affect the result of the statistical function.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.GetResult">
            <summary>Retrieves the result of the statistical function.   " --></summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.InitializeFromInstance(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>A reference to the StatFunction whose property values will be copied to the current instance of the same-type statistical function.</summary>
            <remarks>InitializeFromInstance will be called only when child results are calculated.</remarks>
            <param name="source">A reference to the StatFunction whose property values will be copied to the current instance of the same-type statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.IsEquivalent(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Retrieves a value indicating whether a statistical function is the equivalent of the current statistical function such that both statistical functions will return the same result for the same set of values.</summary>
            <returns>true of the specified statistical function is the equivalent of the current statistical function; false otherwise. " -->" --></returns>
            <remarks>A new implementation for the IsEquivalent method has been provided for the CountFunction because of the addition of the  AcceptNullValues property, which can affect the result of the statistical function.</remarks>
            <param name="statFunction">             The statistical function to verify.         $$GenericArguments$$filtereditemlist" -->$$Return_Type$$comment" blankformat="" -->     </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CountFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Count statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.CountFunction.IncludeNullValues">
            <summary>Gets or sets a value indicating whether $$NULL$$ and DbNull values are included in the count.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.CovarianceFunction">
            <summary>    Class that represents the Covariance statistical     function, which is the measure of the strength of the     correlation between two sets of random variates. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.#ctor">
            <summary>Initializes a new instance of the CovarianceFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.#ctor">
            <summary>Initializes a new instance of the CovarianceFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the CovarianceFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result. </summary>
            <remarks>Multiple source property names can be provided by separating the names with commas (,). The order in which the names are listed will determine the order of the values in the array when the  Accumulate and  Initialize methods are called.</remarks>
            <param name="resultPropertyName">             The unique, case-sensitive property name from which the         result of the function can be retrieved.     </param>
            <param name="sourcePropertyName">             The name of the column whose values will be used to         calculate the result. The provided name must correspond to         the          FieldName property of a column.     </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function. </summary>
            <param name="values">An array of values that will be accumulated to calculate the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types of the columns specified by the  SourcePropertyName property.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.InitializePrerequisites(Xceed.Wpf.DataGrid.Stats.StatResult[])">
            <summary>Initializes the prerequisite statistical functions defined by the  PrerequisiteFunctions property. </summary>
            <param name="prerequisitesValues">    An array of StatResult objects     representing the results of the prerequisite functions. The     results will be returned in the same order as the statistical     functions defined by the      PrerequisiteFunctions property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Covariance statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains 2 names.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.CovarianceFunction.PrerequisiteFunctions">
            <summary>Gets a list of the statistical functions whose results are required by the current statistical function in order to calculate its own result.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.CumulativeStatFunction">
            <summary>Base class for statistical functions that accumulates the values required to calculate the result of the statistical function from the result of a child group. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.CumulativeStatFunction.AccumulateChildResult(Xceed.Wpf.DataGrid.Stats.StatResult)">
            <summary>Accumulates the values required to calculate the result of the statistical function from the results of a child group.</summary>
            <remarks>    If it is not possible to accumulate child results (e.g.,     the statistical function is accumulating values on a last level     group),      Accumulate will be called instead for every data item in     the group.     If      RequiresAccumulation is false,     AccumulateChildResult will never be     called.</remarks>
            <param name="childResult">A  StatResult containing the accumulation of the values from the child groups.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction">
            <summary>    Class that represents the Geometric Mean statistical     function, which is defined as the product of all the members of     a set of positive data, raised to a power equal to the     reciprocal of the number of members. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.#ctor">
            <summary>Initializes a new instance of the GeometricMeanFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.#ctor">
            <summary>Initializes a new instance of the GeometricMeanFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the GeometricMeanFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <param name="values">    An array of values that will be accumulated to calculate     the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.AccumulateChildResult(Xceed.Wpf.DataGrid.Stats.StatResult)">
            <summary>Accumulates the values required to calculate the result of the statistical function from the results of a child group.</summary>
            <remarks>    In cases where it is not possible to     accumulate child results (e.g., the statistical function is     accumulating values on a last level group), Accumulate will be     called instead for every data item in the group.</remarks>
            <param name="childResult">A StatResult containing the accumulation of the necessary values from the child groups.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types of the columns specified by the  SourcePropertyName property.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.InitializePrerequisites(Xceed.Wpf.DataGrid.Stats.StatResult[])">
            <summary>Initializes the prerequisite statistical functions defined by the  PrerequisiteFunctions property. </summary>
            <param name="prerequisitesValues">    An array of StatResult     objects representing the results of the prerequisite functions.     The results will be returned in the same order as the     statistical functions defined by the      PrerequisiteFunctions property. The following table     provides a list of the prerequisite statistical functions for     this function.                                            Index                 Prerequisite statistical                 function                                           0                                  CountFunction                           </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.   " --></summary>
            <remarks>The Geometric Mean statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.GeometricMeanFunction.PrerequisiteFunctions">
            <summary>Gets a list of the statistical functions whose results are required by the current statistical function in order to calculate its own result.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction">
            <summary>    Class that represents the Harmonic Mean statistical     function, which represents Gets </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction.#ctor">
            <summary>Initializes a new instance of the HarmonicMeanFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction.#ctor">
            <summary>Initializes a new instance of the HarmonicMeanFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the HarmonicMeanFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <param name="values">    An array of values that will be accumulated to calculate     the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction.AccumulateChildResult(Xceed.Wpf.DataGrid.Stats.StatResult)">
            <summary>Accumulates the values required to calculate the result of the statistical function from the results of a child group.</summary>
            <remarks>    In cases where it is not possible to     accumulate child results (e.g., the statistical function is     accumulating values on a last level group), Accumulate will be     called instead for every data item in the group.</remarks>
            <param name="childResult">A StatResult containing the accumulation of the necessary values from the child groups.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types of the columns specified by the  SourcePropertyName property.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.HarmonicMeanFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.   " --></summary>
            <remarks>The Harmonic Mean statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.InvalidSourcePropertyNameException">
            <summary>Exception that is thrown when an invalid property name is specified in the  SourcePropertyName property. </summary>
            <remarks>    If an InvalidSourcePropertyNameException     is thrown it will be caught by a grid and its message     (#[InvalidSourcePropertyNameException.SourcePropertyName]#)     returned as the result.     A      StatResultConverter can be used to display and/or format     the value returned by a statistical function.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidSourcePropertyNameException.#ctor">
            <summary>Initializes a new instance of the InvalidSourcePropertyNameException class using the specified error message and indicating the invalid source property name.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidSourcePropertyNameException.#ctor">
            <summary>Initializes a new instance of the InvalidSourcePropertyNameException class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidSourcePropertyNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>    Initializes a new instance of the     InvalidSourcePropertyNameException class using     serialized data.</summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidSourcePropertyNameException.#ctor(System.String)">
            <summary>Initializes a new instance of the InvalidSourcePropertyNameException class with a specified error message.</summary>
            <param name="message">    The error message that explains the reason for the     exception.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidSourcePropertyNameException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidSourcePropertyNameException class with a specified error message and the inner exception that is the case of this exception.</summary>
            <param name="message">    The error message that explains the reason for the     exception.</param>
            <param name="innerException">    The exception that is the cause of the current exception,     or $$NULL$$ if no inner exception has been specified.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidSourcePropertyNameException.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the InvalidSourcePropertyNameException class with a specified error message and the invalid property name that caused the exception.</summary>
            <param name="message">    The error message that explains the reason for the     exception.</param>
            <param name="sourcePropertyName">A string representing the invalid property name that was specified by a statistical function's  SourcePropertyName property</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidSourcePropertyNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the SerializationInfo object with the parameter name and additional exception information.</summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">    The contextual information about the source or     destination.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.InvalidSourcePropertyNameException.SourcePropertyName">
            <summary>Gets or sets the name of the invalid source property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.InvalidValueException">
            <summary>Exception that is thrown when a statistical function encounters an invalid value during the calculation of its result. </summary>
            <remarks>    If an InvalidValueException is thrown it     will be caught by a grid and its message returned as the     result.     The message returned when an     InvalidValueException is thrown can be     modified through the      InvalidValueMessage of a      StatResultConverter, which can then be used to display     and/or format the value returned by the statistical function     through the      ResultPropertyName property.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidValueException.#ctor">
            <summary>Initializes a new instance of the InvalidValueException class using the specified error message.Initializes a new instance of the InvalidValueException class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidValueException.#ctor">
            <summary>Initializes a new instance of the InvalidValueException class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the InvalidValueException class using serialized data.</summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidValueException.#ctor(System.String)">
            <summary>Initializes a new instance of the InvalidValueException class with a specified error message.</summary>
            <param name="message">    The error message that explains the reason for the     exception.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.InvalidValueException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the InvalidValueException class with a specified error message and the inner exception that is the case of this exception.</summary>
            <param name="message">    The error message that explains the reason for the     exception.</param>
            <param name="innerException">    The exception that is the cause of the current exception,     or $$NULL$$ if no inner exception has been specified.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.MaximumFunction">
            <summary>    Class that represents the Maximum statistical function,     which the highest value among a set of items. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MaximumFunction.#ctor">
            <summary>Initializes a new instance of the MaximumFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MaximumFunction.#ctor">
            <summary>Initializes a new instance of the MaximumFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MaximumFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the MaximumFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MaximumFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <param name="values">    An array of values that will be accumulated to calculate     the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MaximumFunction.AccumulateChildResult(Xceed.Wpf.DataGrid.Stats.StatResult)">
            <summary>Accumulates the values required to calculate the result of the statistical function from the results of a child group.</summary>
            <remarks>    In cases where it is not possible to accumulate child     results (e.g., the statistical function is accumulating values     on a last level group), Accumulate will be called instead for     every data item in the group.</remarks>
            <param name="childResult">A StatResult containing the accumulation of the necessary values from the child groups.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MaximumFunction.GetResult">
            <summary>Retrieves the result of the statistical function.   " --></summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MaximumFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MaximumFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Maximum statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.MedianFunction">
            <summary>    Class that represents the Median statistical function,     which is the middle number in a set of ordered data. If the set     contains an even number of items, the arithmetic mean of the 2     middle values will be returned. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MedianFunction.#ctor">
            <summary>Initializes a new instance of the MedianFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MedianFunction.#ctor">
            <summary>Initializes a new instance of the MedianFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MedianFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the MedianFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MedianFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <param name="values">    An array of values that will be accumulated to calculate     the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MedianFunction.GetResult">
            <summary>Retrieves the result of the statistical function.   " --></summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MedianFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types of the columns specified by the  SourcePropertyName property.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MedianFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MedianFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Median statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.MinimumFunction">
            <summary>    Class that represents the Minimum statistical function,     which is the lowest value among a set of items. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MinimumFunction.#ctor">
            <summary>Initializes a new instance of the MinimumFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MinimumFunction.#ctor">
            <summary>Initializes a new instance of the MinimumFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MinimumFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the MinimumFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MinimumFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <param name="values">    An array of values that will be accumulated to calculate     the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MinimumFunction.AccumulateChildResult(Xceed.Wpf.DataGrid.Stats.StatResult)">
            <summary>Accumulates the values required to calculate the result of the statistical function from the results of a child group.</summary>
            <remarks>    In cases where it is not possible to accumulate child     results (e.g., the statistical function is accumulating values     on a last level group), Accumulate will be called instead for     every data item in the group.</remarks>
            <param name="childResult">A StatResult containing the accumulation of the necessary values from the child groups.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MinimumFunction.GetResult">
            <summary>Retrieves the result of the statistical function.   " --></summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MinimumFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.MinimumFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Minimum statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.ModeFunction">
            <summary>    Class that represents the Mode statistical function,     which is the value that has the largest number of observations,     namely the most frequent value or values. The mode is not     necessarily unique, unlike the arithmetic mean. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.#ctor">
            <summary>Initializes a new instance of the ModeFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.#ctor">
            <summary>Initializes a new instance of the ModeFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the ModeFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <param name="values">    An array of values that will be accumulated to calculate     the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.GetEquivalenceKey">
            <summary>Retrieves a value that represents the statistical function's unique equivalence key.</summary>
            <returns>A value representing the statistical function's unique equivalence key.</returns>
            <remarks>A new equivalence key has been provided for the ModeFunction because of the addition of the  AllowMultimodal property, which can affect the result of the statistical function.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.InitializeFromInstance(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>A reference to the StatFunction whose property values will be copied to the current instance of the same-type statistical function.</summary>
            <remarks>InitializeFromInstance will be called, only when necessary when child results are calculated.</remarks>
            <param name="source">A reference to the StatFunction whose property values will be copied to the current instance of the same-type statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.IsEquivalent(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Retrieves a value indicating whether a statistical function is the equivalent of the current statistical function such that both statistical functions will return the same result for the same set of values.</summary>
            <returns>true of the specified statistical function is the equivalent of the current statistical function; false otherwise.</returns>
            <remarks>A new equivalence key has been provided for the ModeFunction because of the addition of the  AllowMultimodal property, which can affect the result of the statistical function.</remarks>
            <param name="statFunction">             The statistical function to verify.     </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.ModeFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Variance statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.ModeFunction.AllowMultimodal">
            <summary>Gets or sets a value indicating whether the result of the Mode statistical function can be multimodal.</summary>
            <remarks>    By default, the result will be unimodal. To enable     multimodal results, the      AllowMultimodal property must be set to     true.     In the case where AllowMultimodal is set     to true, a      MultimodalResultConverter must be used to display the     result, which will always be an array, even if the result is     not multimodal. If false and a multimodal     result occurs, only one of the mode will be returned. Ex. : [1,     2, 2, 6, 6] is bimodal (2 and 6) and the function will return     either 2 or 6.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction">
            <summary>    Class that represents the Root-Mean-Square statistical     function, which is the square root of the arithmetical average     of a set of squared instantaneous values. The root mean square     is also known as the quadratic mean. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction.#ctor">
            <summary>Initializes a new instance of the RootMeanSquareFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction.#ctor">
            <summary>Initializes a new instance of the RootMeanSquareFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the RootMeanSquareFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <param name="values">    An array of values that will be accumulated to calculate     the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction.AccumulateChildResult(Xceed.Wpf.DataGrid.Stats.StatResult)">
            <summary>Accumulates the values required to calculate the result of the statistical function from the results of a child group.</summary>
            <remarks>    In cases where it is not possible to     accumulate child results (e.g., the statistical function is     accumulating values on a last level group),      Accumulate will be called instead for every data item in     the group.</remarks>
            <param name="childResult">A StatResult containing the accumulation of the necessary values from the child groups.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types of the columns specified by the  SourcePropertyName property.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.RootMeanSquareFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.   " --></summary>
            <remarks>The Root-Mean-Square statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction">
            <summary>    Class that represents the Standard Deviation statistical     function, which is the measure of the degree of dispersion of     sample or population data from the mean value. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.#ctor">
            <summary>Initializes a new instance of the StandardDeviationFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.#ctor">
            <summary>Initializes a new instance of the StandardDeviationFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the StandardDeviationFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.#ctor(System.String,System.String,System.Boolean)">
            <summary>Initializes a new instance of the StandardDeviationFunction class specifying the unique property name from which the result of the function can be retrieved, the name of the column whose values will be used to calculate the result, as well as indicating whether the result is calculated for an entire population</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
            <param name="entirePopulation">Indicates whether the result is calculated for an entire population.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.Accumulate(System.Object[])">
            <summary>This method is not implemented by the Standard Deviation statistical function. Only the prerequisite functions are required to calculate the result.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.GetEquivalenceKey">
            <summary>Retrieves a value that represents the statistical function's unique equivalence key.</summary>
            <remarks>A new equivalence key has been provided for the StandardDeviationFunction because of the addition of the  EntirePopulation property, which can affect the result of the statistical function.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.InitializeFromInstance(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Initializes the properties of the current instance of the same-type statistical function when child results are being calculated.</summary>
            <remarks>InitializeFromInstance will be called, only when necessary when child results are calculated.</remarks>
            <param name="source">A reference to the StatFunction whose property values will be copied to the current instance of the same-type statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.InitializePrerequisites(Xceed.Wpf.DataGrid.Stats.StatResult[])">
            <summary>Initializes the prerequisite statistical functions defined by the  PrerequisiteFunctions property.</summary>
            <param name="prerequisitesValues">    An array of StatResult objects     representing the results of the prerequisite functions. The     results will be returned in the same order as the statistical     functions defined by the      PrerequisiteFunctions property. The following table     provides a list of the prerequisite statistical functions for     this function.                                            Index                 Prerequisite statistical                 function                                           0                                  VarianceFunction                           </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.IsEquivalent(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Retrieves a value indicating whether a statistical function is the equivalent of the current statistical function such that both statistical functions will return the same result for the same set of values.</summary>
            <remarks>A new implementation of the IsEquivalent method has been provided for the StandardDeviationFunction because of the addition of the  EntirePopulation property, which can affect the result of the statistical function.</remarks>
            <param name="statFunction">true of the specified statistical function is the equivalent of the current statistical function; false otherwise.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Standard Deviation statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.EntirePopulation">
            <summary>Gets or sets a value indicating whether the variance is calculated for an entire population.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.PrerequisiteFunctions">
            <summary>Gets a list of the statistical functions whose results are required by the current statistical function in order to calculate its own result.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StandardDeviationFunction.RequiresAccumulation">
            <summary>Gets a value indicating whether the statistical function needs to accumulate its own results.</summary>
            <remarks>false since the Standard Deviation statistical function does not require accumulation.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.StatFunction">
            <summary>Base class for statistical functions. </summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <remarks>If  RequiresAccumulation is false, Accumulate will never be called.</remarks>
            <param name="values">An array of values that will be accumulated to calculate the result of the statistical function. The order in which the values are provided corresponds to the order of the names specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.CheckSealed">
            <summary>Checks whether this object is read-only and cannot be changed.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.GetEquivalenceKey">
            <summary>Retrieves a value that represents the statistical function's unique equivalence key.</summary>
            <returns>A value representing the statistical function's unique equivalence key.</returns>
            <remarks>    The      IsEquivalent and      GetEquivalenceKey methods are similar to the     Equals and GetHashCode     methods and are used by the engine behind the     StatFunctions.          GetEquivalenceKey should return the same value     for two      StatFunction instances that would return the same result     for the same value list. All StatFunction     properties that have an impact on the result should be     reflected in the override. If a property does not impact the     result, it should not modify the equivalence key.          IsEquivalent should compare each property that     affects the StatFunction result and return     true if they are all equal.          For instance, the GetEquivalenceKey method of          CountFunction will return a combination of     typeof(CountFunction).GetHashCode(),     SourcePropertyName.GetHashCode(), and     IncludeNullValues.GetHashCode(). This means     that two CountFunction having the same          SourcePropertyName and the      IncludeNullValues value will return the same equivalence     key. A hypothetical "LogResult" property that does not have an     effect on the result would not be considered in this     override.          Similarly, the IsEquivalent method will return     false if any of these 3 criteria (StatFunction     type, SourcePropertyName, or     IncludeNullValues) are different when compared     with the specified StatFunction     parameter.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.GetResult">
            <summary>Retrieves the result of the statistical function.</summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types in which the values will be accumulated.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.InitializeFromInstance(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Initializes the properties of the current instance of the same-type statistical function when a new instance of the same function needs to be created.</summary>
            <remarks>InitializeFromInstance will only be called when child results are calculated.</remarks>
            <param name="source">A reference to the StatFunction whose property values will be copied to the current instance of the same-type statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.InitializePrerequisites(Xceed.Wpf.DataGrid.Stats.StatResult[])">
            <summary>Initializes the prerequisite statistical functions defined by the  PrerequisiteFunctions property.</summary>
            <param name="prerequisitesValues">An array of StatResult objects representing the results of the prerequisite functions. The results will be returned in the same order as the statistical functions defined by the  PrerequisiteFunctions property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.IsEquivalent(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Retrieves a value indicating whether a statistical function is the equivalent of the current statistical function such that both statistical functions will return the same result for the same set of values.</summary>
            <returns>true of the specified statistical function is the equivalent of the current statistical function; false otherwise.</returns>
            <remarks>    By default, this method verifies if the type of the statistical     functions and the values of the      SourcePropertyName properties are identical.     The      IsEquivalent and      GetEquivalenceKey methods are similar to the     Equals and GetHashCode     methods and are used by the engine behind the     StatFunctions.          GetEquivalenceKey should return the same value     for two      StatFunction instances that would return the same result     for the same value list. All StatFunction     properties that have an impact on the result should be     reflected in the override. If a property does not impact the     result, it should not modify the equivalence key.          IsEquivalent should compare each property that     affects the StatFunction result and return     true if they are all equal.          For instance, the GetEquivalenceKey method of          CountFunction will return a combination of     typeof(CountFunction).GetHashCode(),     SourcePropertyName.GetHashCode(), and     IncludeNullValues.GetHashCode(). This means     that two CountFunction having the same          SourcePropertyName and the      IncludeNullValues value will return the same equivalence     key. A hypothetical "LogResult" property that does not have an     effect on the result would not be considered in this     override.          Similarly, the IsEquivalent method will return     false if any of these 3 criteria (StatFunction     type, SourcePropertyName, or     IncludeNullValues) are different when compared     with the specified StatFunction     parameter.</remarks>
            <param name="statFunction">The statistical function to verify.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.Reset">
            <summary>Resets the statistical function to its original state.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>By default, only the  ResultPropertyName is validated.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StatFunction.IsInitialized">
            <summary>Gets a value indicating whether  Initialize method has been called, indicating that the types in which the values will be accumulated have been initialized.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StatFunction.IsSealed">
            <summary>Gets a value indicating whether this instance is in an immutable state.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StatFunction.PrerequisiteFunctions">
            <summary>Gets a list of the statistical functions whose results are required by the current statistical function in order to calculate its own result.</summary>
            <remarks>Although the  ResultPropertyName of the prerequisite statistical functions must be specified, it will not be used.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StatFunction.RequiresAccumulation">
            <summary>Gets a value indicating whether the statistical function needs to accumulate its own results.</summary>
            <remarks>If false,  Accumulate will never be called.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StatFunction.ResultPropertyName">
            <summary>Gets or sets the unique, case-sensitive property name from which the result of the function can be retrieved.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StatFunction.SourcePropertyName">
            <summary>Gets or sets the name of the column whose values will be used to calculate the result.</summary>
            <remarks>Multiple source property names can be provided by separating the names with commas (,). The order in which the names are listed will determine the order of the values in the array when the  Accumulate and  Initialize methods are called.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.StatFunctionCollection">
            <summary>Contains a collection of statistical functions. </summary>
            <remarks>The statistical functions contained in this collection must each have a unique  ResultPropertyName.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunctionCollection.Contains">
            <summary>Determines whether a statistical function is contained in the collection.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunctionCollection.Contains(System.String)">
            <summary>Determines whether a statistical function with the specified result property name is contained in the collection.</summary>
            <returns>true if the statistical function with the specified result property name is contained in the collection; false otherwise.</returns>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved. Cannot be $$NULL$ or empty.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunctionCollection.InsertItem(System.Int32,Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Inserts a statistical function into the collection at the specified index.</summary>
            <param name="index">The zero-based index at which to add the statistical function.</param>
            <param name="item">The statistical function to add to the collection.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatFunctionCollection.SetItem(System.Int32,Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Replaces the statistical function at the specified index.</summary>
            <param name="index">The zero-based index of the statistical function to replace.</param>
            <param name="item">The new statistical function.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StatFunctionCollection.Item">
            <summary>Gets or sets the statistical function at the specified index.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StatFunctionCollection.Item(System.String)">
            <summary>Gets or sets the statistical function with the specified result property name.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved. Cannot be $$NULL$ or empty.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.StatResult">
            <summary>Class that represents the result of a statistical function. </summary>
            <remarks>If an exception occurs in the  Accumulate,  AccumulateChildResult, or  GetResult methods, it will be caught by a grid and returned as the result of the statistical function. In some cases, such as when the statistical function's required parameters are being validated in the  Validate method, the exception will not be caught since if the validation fails the statistical function is not able to calculate its result.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.StatResult.#ctor(System.Object)">
            <summary>Initializes a new instance of the StatResult class.Initializes a new instance of the StatResult class specifying the value it will contain.</summary>
            <param name="value">An object representing the value of the statistical result.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.StatResult.Value">
            <summary>Gets the value of the statistical result.</summary>
            <remarks>If an exception occurs in the  Accumulate,  AccumulateChildResult, or  GetResult methods, it will be caught by a grid and returned as the result of the statistical function. In some cases, such as when the statistical function's required parameters are being validated in the  Validate method, the exception will not be caught since if the validation fails the statistical function is not able to calculate its result.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.SumFunction">
            <summary>    Class that represents the Sum statistical function, which     is the result of the addition of the values of a set of     items.</summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.SumFunction.#ctor">
            <summary>Initializes a new instance of the SumFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.SumFunction.#ctor">
            <summary>Initializes a new instance of the SumFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.SumFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the SumFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.SumFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <param name="values">             An array of values that will be accumulated to         calculate the result of the statistical function.     </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.SumFunction.AccumulateChildResult(Xceed.Wpf.DataGrid.Stats.StatResult)">
            <summary>Accumulates the values required to calculate the result of the statistical function from the results of a child group.</summary>
            <remarks>    In cases where it is not possible to accumulate child     results (e.g., the statistical function is accumulating values     on a last level group), Accumulate will be called instead for     every data item in the group.</remarks>
            <param name="childResult">A StatResult containing the accumulation of the necessary values from the child groups.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.SumFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.SumFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types of the columns specified by the  SourcePropertyName property.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.SumFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.SumFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Sum statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Stats.VarianceFunction">
            <summary>    Class that represents the Variance statistical function.     The variance of a random sample or population variable is a     non-negative number which gives an idea of how widely spread     the values of the random variable are likely to be; the larger     the variance, the more scattered the observations on     average.</summary>
            <remarks>    Only the statistical functions that are added to the          StatFunctions collection of a      DataGridCollectionView or      DataGridCollectionViewSource can be used.     The values used to calculate the results of a statistical     function are retrieved from its statistical context. For     example, if an element that displays the results of a     statistical function is contained in a group footer, the     element's statistical context will be the group, and the     results of the statistical function will be calculated     according to the values of the data items in the group. If the     same element is placed in the footers of a grid, then its     statistical context is provided by a grid (through the      StatContext property) and all the data items will be used     to calculate the results.     The same statistical function can be used by more than     one element, regardless of the statistical context. For     example, if the average of a column is to be displayed in both     the footers of a group and a grid, only one     AverageFunction needs to be added to the     StatFunctions collection.     Statistical functions that are calculated for a specific     detail-level cannot be accessed by parent, child, or sibling     detail-levels nor can they be accessed by a master grid and     vice-versa.     With the exception of the      CountFuntion, $$NULL$$ and DBNull values     will be ignored.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.#ctor">
            <summary>Initializes a new instance of the VarianceFunction class.Initializes a new instance of the VarianceFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.#ctor">
            <summary>Initializes a new instance of the VarianceFunction class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.#ctor(System.String,System.String)">
            <summary>Initializes a new instance of the VarianceFunction class specifying the unique property name from which the result of the function can be retrieved as well as the name of the column whose values will be used to calculate the result.</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.#ctor(System.String,System.String,System.Boolean)">
            <summary>Initializes a new instance of the VarianceFunction class specifying the unique property name from which the result of the function can be retrieved, the name of the column whose values will be used to calculate the result, as well as indicating whether the result is calculated for an entire population</summary>
            <param name="resultPropertyName">The unique, case-sensitive property name from which the result of the function can be retrieved.</param>
            <param name="sourcePropertyName">The name of the column whose values will be used to calculate the result. The provided name must correspond to the FieldName property of a column.</param>
            <param name="entirePopulation">Indicates whether the result is calculated for an entire population.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.Accumulate(System.Object[])">
            <summary>Accumulates the values required to calculate the result of the statistical function.</summary>
            <param name="values">An array of values that will be accumulated to calculate the result of the statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.GetEquivalenceKey">
            <summary>Retrieves a value that represents the statistical function's unique equivalence key.</summary>
            <returns>A value representing the statistical function's unique equivalence key.</returns>
            <remarks>A new equivalence key has been provided for the VarianceFunction because of the addition of the  EntirePopulation property, which can affect the result of the statistical function.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.GetResult">
            <summary>Retrieves the result of the statistical function. </summary>
            <returns>A StatResult containing the result of the statistical function.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.Initialize(System.Type[])">
            <summary>Initializes the statistical function specifying the types of the columns specified by the  SourcePropertyName property.</summary>
            <param name="sourcePropertyTypes">A Type array containing the types of the columns specified by the  SourcePropertyName property.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.InitializeFromInstance(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Initializes the properties of the current instance of the same-type statistical function when child results are being calculated.</summary>
            <remarks>InitializeFromInstance will be called, only when necessary when child results are calculated.</remarks>
            <param name="source">A reference to the StatFunction whose property values will be copied to the current instance of the same-type statistical function.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.InitializePrerequisites(Xceed.Wpf.DataGrid.Stats.StatResult[])">
            <summary>Initializes the prerequisite statistical functions defined by the  PrerequisiteFunctions property.</summary>
            <param name="prerequisitesValues">    An array of StatResult objects     representing the results of the prerequisite functions. The     results will be returned in the same order as the statistical     functions defined by the      PrerequisiteFunctions property. The following table     provides a list of the prerequisite statistical functions for     this function.                                            Index                 Prerequisite statistical                 function                                           0                                  AverageFunction                                           1                                  CountFunction                           </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.IsEquivalent(Xceed.Wpf.DataGrid.Stats.StatFunction)">
            <summary>Retrieves a value indicating whether a statistical function is the equivalent of the current statistical function such that both statistical functions will return the same result for the same set of values.</summary>
            <returns>true of the specified statistical function is the equivalent of the current statistical function; false otherwise.</returns>
            <remarks>A new equivalence key has been provided for the VarianceFunction because of the addition of the  EntirePopulation property, which can affect the result of the statistical function.</remarks>
            <param name="statFunction">             The statistical function to verify.     </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.Reset">
            <summary>Resets the statistical function to its original state. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Stats.VarianceFunction.Validate">
            <summary>Validates the statistical function to ensure that it is able to calculate its result.</summary>
            <remarks>The Variance statistical function validates that the  ResultPropertyName property is not $$NULL$$ and that the  SourcePropertyName property contains only 1 name.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.VarianceFunction.EntirePopulation">
            <summary>Gets or sets a value indicating whether the variance is calculated for an entire population.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Stats.VarianceFunction.PrerequisiteFunctions">
            <summary>Gets a list of the statistical functions whose results are required by the current statistical function in order to calculate its own result.</summary>
        </member>
        <member name="N:Xceed.Wpf.DataGrid.ValidationRules">
            <summary>The Xceed.Wpf.DataGrid.ValidationRules namespace regroups all the validation rule classes.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ValidationRules.CellValidationRule">
            <summary>Represents a rule that validates cell content.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ValidationRules.CellValidationRule.Validate(System.Object,System.Globalization.CultureInfo,Xceed.Wpf.DataGrid.CellValidationContext)">
            <summary>Validates the specified value using the provided information.</summary>
            <returns>A ValidationResult indicating whether the value passed the validation process.</returns>
            <param name="value">The value to validate.</param>
            <param name="culture">The CultureInfo of the value.</param>
            <param name="context">The validation context of the value to validate. The validation context includes both the associated cell and data item.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ValidationRules.EventCellValidationRule">
            <summary>Represents a rule that validates  cell content through its  Validating event.</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ValidationRules.EventCellValidationRule.#ctor">
            <summary>Initializes a new instance of the  EventCellValidationRule class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ValidationRules.EventCellValidationRule.Validate(System.Object,System.Globalization.CultureInfo,Xceed.Wpf.DataGrid.CellValidationContext)">
            <summary>Validates the specified value using the provided information.</summary>
            <returns>A ValidationResult indicating whether the value passed the validation process.</returns>
            <param name="value">The value to validate</param>
            <param name="culture">The CultureInfo of the value.</param>
            <param name="context">The validation context of the value to validate. The validation context includes both the associated cell and data item.</param>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.ValidationRules.EventCellValidationRule.Validating">
            <summary>Raised after the  Validate method to provide additional validation, or, if no validation has been provided in the Validate method, to validate cell content.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ValidationRules.PassthroughCellValidationRule">
            <summary>Represents a pass-through  CellValidationRule, wrapping a multi-purpose ValidationRule to expose it as a CellValidationRule</summary>
            <remarks>When the value of a cell fails the validation process, its  HasValidationError property will return true and its ValidationError property will contain a CellValidationError, which provides information on the cell in error, the error content, the exception (if one was thrown), and the validation rule that failed. If the validation rule that failed is a binding-level ValidationRule, it will be wrapped in a  PassthroughCellValidationRule. Validation errors will also be reported by a row when the value of one or more of its cells fails the validation process. Like cells, when a row contains validation errors, its  HasValidationError property will return true and its ValidationError property will contain a RowValidationError, which provides information on the row in error, the error content, the exception, and the validation rule that failed.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ValidationRules.PassthroughCellValidationRule.#ctor">
            <summary>Initializes a new instance  PassthroughCellValidationRule class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ValidationRules.PassthroughCellValidationRule.#ctor">
            <summary>Initializes a new instance of the  PassthroughCellValidationRule class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ValidationRules.PassthroughCellValidationRule.#ctor(System.Windows.Controls.ValidationRule)">
            <summary>Initializes a new instance of the  PassthroughCellValidationRule class specifying the ValidationRule that will be wrapped as a  CellValidationRule.</summary>
            <param name="validationRule">The ValidationRule that will be wrapped as a  CellValidationRule.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ValidationRules.PassthroughCellValidationRule.Validate(System.Object,System.Globalization.CultureInfo,Xceed.Wpf.DataGrid.CellValidationContext)">
            <summary>Validates the specified value using the provided information.</summary>
            <returns>A ValidationResult indicating whether the value passed the validation process.</returns>
            <param name="value">The value to validate.</param>
            <param name="culture">The CultureInfo of the value.</param>
            <param name="context">The validation context of the value to validate. The validation context includes both the associated cell and data item.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.ValidationRules.PassthroughCellValidationRule.ValidationRule">
            <summary>Gets or sets the ValidationRule to be wrapped as a  CellValidationRule.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.ValidationRules.SourceDataConverterValidationRule">
            <summary>Represents a validation rule that validates type conversion of values to and from a source.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ValidationRules.SourceDataConverterValidationRule.#ctor(System.Boolean,System.Type)">
            <summary>Initializes a new instance of the SourceDataConverterValidationRule class specifying whether the source supports DBNull values and the type to which values are to be converted.</summary>
            <param name="sourceSupportDBNull">true if the source supports DBNull values, false otherwise.</param>
            <param name="targetType">The Type to which values are to be converter.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.ValidationRules.SourceDataConverterValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>Validates the specified value using the provided information.</summary>
            <returns>A ValidationResult indicating whether the value passed the validation process.</returns>
            <param name="value">The value to validate.</param>
            <param name="culture">The CultureInfo of the value.</param>
        </member>
        <member name="N:Xceed.Wpf.DataGrid.Views">
            <summary>The Xceed.Wpf.DataGrid.Views namespace regroups all the classes which are required to apply views and themes to a DataGridControl.</summary>
            <remarks>As of version 1.1, "Theme Packs" that contain new themes have been added to Xceed DataGrid for WPF. Theme Pack #1 provides the Office 2007 (Blue, Black, and Silver) and Windows Media Player 11 themes. The theme-pack assembly (Xceed.Wpf.DataGrid.ThemePack.1.dll) should also be included in your references in order to use the new themes.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.ColumnStretchMode">
            <summary>Value indicating how the widths of the columns in a grid are stretched.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ColumnStretchMode.None">
            <summary>The widths of the columns are not stretched.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ColumnStretchMode.First">
            <summary>Only the width of the first column is stretched.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ColumnStretchMode.Last">
            <summary>Only the width of the last column is stretched.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ColumnStretchMode.All">
            <summary>The widths of all the columns are stretched so that they evenly occupy the available space.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.DropMarkOrientation">
            <summary>Value representing the orientation of the drop-mark in the ColumnManagerRow and GroupByControl.</summary>
            <remarks>    The drop-mark is displayed when a      ColumnManagerCell or      GroupByItem is moved.     If left at its default value, the drop-mark will have a     horizontal orientation when a grid is in      TableView, and a vertical orientation when the grid is in     CardView     or      CompactCardView.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.DropMarkOrientation.Default">
            <summary>The orientation of the drop-mark will be the default orientation depending on a grid's view.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.DropMarkOrientation.Vertical">
            <summary>The drop-mark will have a vertical orientation.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.DropMarkOrientation.Horizontal">
            <summary>The drop-mark will have a horizontal orientation.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.PassiveLayoutAxis">
            <summary>Value representing on which axis a  PassiveLayoutDecorator's size will be provided by its parent.</summary>
            <remarks>For example, if the content of a GroupHeaderControl, whose template root is a PassiveLayoutDecorator with an  Axis property set to Horizontal, is larger than the combined width of the columns, its width will be restrained and not exceed the total column width.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PassiveLayoutAxis.Vertical">
            <summary>The height of a  PassiveLayoutDecorator will be determined by its parent.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PassiveLayoutAxis.Horizontal">
            <summary>The width of a  PassiveLayoutDecorator will be determined by its parent.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PassiveLayoutAxis.Both">
            <summary>The height and width of a  PassiveLayoutDecorator will be determined by its parent.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewerPosition">
            <summary>Value representing the position of the  DataGridScrollViewer to indicate if navigation in the fixed header or footer sections is permitted.</summary>
            <remarks>If the  DataGridScrollViewer is scrolled to the top and the fixed header or footer sections are located above the DataGridScrollViewer, navigation will move from the DataGridScrollViewer to the header or footer section located above.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewerPosition.Top">
            <summary>The  DataGridScrollViewer is scrolled to the top indicating that navigation in the fixed header or footer sections is permitted.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewerPosition.Bottom">
            <summary>The  DataGridScrollViewer is scrolled to the bottom indicating that navigation in the fixed header or footer sections is permitted.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewerPosition.Left">
            <summary>The  DataGridScrollViewer is scrolled to the left indicating that navigation in the fixed header or footer sections is permitted.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewerPosition.Right">
            <summary>The  DataGridScrollViewer is scrolled to the right indicating that navigation in the fixed header or footer sections is permitted.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewerPosition.None">
            <summary>The  DataGridScrollViewer is not scrolled to one of its extremities indicating that navigation in the fixed header or footer sections is not permitted.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.ViewPropertyMode">
            <summary>Value that determines how or if the property on which the  ViewPropertyAttribute is set can be accessed through a  ViewBinding.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewPropertyMode.None">
            <summary>The property on which the  ViewPropertyAttribute is set cannot be accessed through a  ViewBinding.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewPropertyMode.ViewOnly">
            <summary>The property on which the  ViewPropertyAttribute is set will be accessible through a  ViewBinding. If defined on a table-view property, it will not be possible to provide an alternate value for DetailConfigurations.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewPropertyMode.Routed">
            <summary>    The attached property on which the          ViewPropertyAttribute is set will be accessible through a          ViewBinding and will redirect to the appropriate     DetailConfigurations for its value, when applicable.     If a detail configuration does not explicitly define a     value for the property, the view's default property value will     be used.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewPropertyMode.RoutedNoFallback">
            <summary>    The attached property on which the          ViewPropertyAttribute is set will be accessible through a          ViewBinding and will redirect to the appropriate     DetailConfigurations for its value, when applicable.     If a detail configuration does not explicitly define a     value for the property, the view's default property value will     NOT be used.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.AeroNormalColorTheme">
            <summary>Represents the Aero normal-color theme.</summary>
            <remarks>    Views and themes can be set through attribute syntax (see     Example 1) or property element syntax (see Example 2). To     change the default view and/or theme using attribute syntax,     the name of the view to use (e.g., CardView) must be provided,     optionally followed by the name of the theme class (e.g.,     NormalColorTheme), or the name of the class without the "Theme"     portion. Using property element syntax, the name of the class     (e.g., AeroNormalColorTheme) must be used.     When using themes provided in external Theme Packs (e.g.,     Windows Media Player 11), property element syntax     must be used.          Figure 1: Table view in Aero system     theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.AeroNormalColorTheme.#ctor">
            <summary>Initializes a new instance of the  AeroNormalColorTheme class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.CardBackgroundBrushes">
            <summary>Static class that provides a variety of brushes that were designed to be used as card backgrounds.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardBackgroundBrushes.Pebbles">
            <summary>The Pebble texture can be added to cards and is applied to their backgrounds, giving them a unique look and feel.</summary>
            <remarks> Figure 1: Pebbles background texture brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardBackgroundBrushes.Retro">
            <summary>The Retro texture can be added to cards and is applied to their backgrounds, giving them a unique look and feel.</summary>
            <remarks> Figure 1: Retro background texture brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardBackgroundBrushes.Sunrise">
            <summary>The Sunrise texture can be added to cards and is applied to their backgrounds, giving them a unique look and feel.</summary>
            <remarks> Figure 1: Sunrise background texture brush</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.CardView">
            <summary>Represents a card-view layout.</summary>
            <remarks>    The      View property of the DataGridControl     class determines which view is applied to a grid. If the     View property is left to its default value,     null (Nothing in Visual     Basic), or explicitly set to null, the default     table-view layout will be used with the system color scheme.     The      Theme property of the View class can be     set to change the color scheme applied to a grid's elements. If     left to its default value, null, the system     color scheme will be used. In either case, if the system-color     theme is not recognized (e.g., a third-party color scheme is     being used), the Aero normal-color theme will be used.              Views and themes can be set through attribute syntax or         property element syntax. To change the default view and/or         theme using attribute syntax, the name of the view to use         (e.g., CardView) must be provided, optionally followed by         the name of the theme class (e.g., NormalColorTheme), or         the name of the class without the "Theme" portion. If the         theme is omitted, the default Aero normal-color theme will         be used.     </remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardView.#ctor">
            <summary>Initializes a new instance of the CardView class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardView.AddDefaultHeadersFooters">
            <summary>Adds the default items to the  header,  footer,  fixed headers, and  fixed footer sections of a grid when it is in a card-view layout.</summary>
            <remarks>    By default, a grid contains a GroupByControl     and a ColumnManagerRow     in its      FixedHeaders that are added before any other elements that     are explicitly added to the section.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardView.AllowCardResize">
            <summary>Gets or sets a value indicating whether the width of the cards can be resized by the end user.</summary>
            <remarks>Resizing one card will result in all cards being resized. The same result can be accomplished programmatically by setting  CardWidth property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardView.CardTitleBackground">
            <summary>Gets or sets the brush used to paint the background of the card titles.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardView.CardTitleForeground">
            <summary>Gets or sets the brush used to paint the foreground of the card titles.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardView.CardTitleTemplate">
            <summary>Gets or sets the DataTemplate used to display the card titles.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardView.CardWidth">
            <summary>Gets or sets a value indicating the width of the cards.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardView.HideEmptyCells">
            <summary>Gets or sets a value indicating whether cells which do not have a content should be hidden.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardView.InsertionCardTitleTemplate">
            <summary>Gets or sets the DataTemplate used to display the insertion card titles.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardView.SeparatorLinePen">
            <summary>Gets or sets the Pen used to draw the line between a "column" of cards.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardView.StatCardTitleTemplate">
            <summary>Gets or sets the DataTemplate used to display the statistical-result card titles. </summary>
            <remarks>    How the results of statistical functions are displayed     can vary according to the view that is used to lay out a grid.     When a grid is in a table-view layout, aligning the results of     statistical functions with the columns whose values were used     to calculate the result, is a common scenario that can be     accomplished using a StatRow.     To display the result of a statistical function in a     StatRow, the      ResultPropertyName property of the cell (StatCell)     that has the same field name as the column whose values were     used to calculate the result, can be set to the     ResultPropertyName of the desired     function.     Although StatRows can be used in a     card-view layout, it is recommended that a custom visual tree     that contains the elements that will display the results be     created.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardView.AllowCardResizeProperty">
            <summary>Identifies the  AllowCardResizing dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardView.CardTitleBackgroundProperty">
            <summary>Identifies the  CardTitleBackground attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardView.CardTitleForegroundProperty">
            <summary>Identifies the  CardTitleForeground attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardView.CardTitleTemplateProperty">
            <summary>Identifies the  CardTitleTemplate attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardView.CardWidthProperty">
            <summary>Identifies the  CardWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardView.HideEmptyCellsProperty">
            <summary>    Identifies the      HideEmptyCells attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardView.InsertionCardTitleTemplateProperty">
            <summary>Identifies the  InsertionCardTitleTemplate attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardView.SeparatorLinePenProperty">
            <summary>Identifies the  SeparatorLinePen dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardView.StatCardTitleTemplateProperty">
            <summary>Identifies the  StatCardTitleTemplate attached property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.CardViewItemsHost">
            <summary>    Class used in DataGridControl     templates as a replacement for the     ItemsPresenter when a grid is in a card-view     layout and that will contain the data items as well as the     items contained in non-fixed header and footer     sections and whose containers are created from the associated          CustomItemContainerGenerator.</summary>
            <remarks>This class should be used rather than providing a panel through the DataGridControl.ItemsPanel property when creating a card view</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.#ctor">
            <summary>Initializes a new instance of the CardViewItemsHost class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the content of the items.</summary>
            <param name="finalSize">    The final area within the parent that this element should     use to arrange itself and its children.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.LineDown">
            <summary>Scrolls down within content by one logical unit.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.LineLeft">
            <summary>Scrolls left within content by one logical unit.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.LineRight">
            <summary>Scrolls right within content by one logical unit.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.LineUp">
            <summary>Scrolls up within content by one logical unit.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.MakeVisible">
            <summary>Forces content to scroll until the coordinate space of a Visual object is visible.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.MakeVisible(System.Int32,System.Windows.Rect)">
            <summary>Forces content to scroll until the element at the specified index is visible</summary>
            <param name="index">The index of the element.</param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>Forces content to scroll until the coordinate space of a Visual object is visible</summary>
            <param name="visual">A Visual that becomes visible.</param>
            <param name="rectangle">             A bounding rectangle that identifies the coordinate         space to make visible.     </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.MeasureOverride(System.Windows.Size)">
            <summary>Measures the child elements in anticipation of arranging them during the  ArrangeOverride pass</summary>
            <returns>The Size that represents the desired size of the element.</returns>
            <param name="availableSize">An upper limit Size that should not be exceeded.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.MouseWheelDown">
            <summary>Scrolls down within content after a user clicks the wheel button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.MouseWheelLeft">
            <summary>Scrolls left within content after a user clicks the wheel button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.MouseWheelRight">
            <summary>Scrolls right within content after a user clicks the wheel button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.MouseWheelUp">
            <summary>Scrolls up within content after a user clicks the wheel button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.OnContainersRemoved(System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>    Indicates that containers in the      CustomItemContainerGenerator will no longer be     used/recycled and can be removed from the items host.</summary>
            <param name="removedContainers">    A list of the containers that will no longer be     used/recycled and that can be removed from the items     host.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.OnItemsAdded(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32)">
            <summary>    Indicates that items have been added to the data source     or through the expansion of groups or details and need to be     added to the items host.</summary>
            <param name="position">    The GeneratorPosition at which the items     were added.</param>
            <param name="index">The zero-based index at which the item was added.</param>
            <param name="itemCount">The number of items that were added.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.OnItemsMoved(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>    Indicates that items have been moved in the data source     and need to be repositioned in the items host.</summary>
            <param name="position">    The GeneratorPosition to which the items     were moved.</param>
            <param name="index">The zero-based index to which the item was moved.</param>
            <param name="oldPosition">    The old GeneratorPosition from which the     items were moved.</param>
            <param name="oldIndex">The old index.</param>
            <param name="itemCount">The number of items that were moved.</param>
            <param name="itemUICount">The number of containers that were moved.</param>
            <param name="affectedContainers">    A list of the containers that were affected by the     move.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.OnItemsRemoved(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>    Indicates that items have been removed from the data     source or through the collapse of groups or details and need to     be removed to the items host.</summary>
            <param name="position">The new GeneratorPosition.</param>
            <param name="index">    The zero-based index at which the item was     removed.</param>
            <param name="oldPosition">    The GeneratorPosition at which the items     were removed.</param>
            <param name="oldIndex">The old index.</param>
            <param name="itemCount">The number of items that were removed.</param>
            <param name="itemUICount">The number of containers that were removed.</param>
            <param name="affectedContainers">    A list of the containers that were affected by the     removal of items.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.OnItemsReplaced(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>    Indicates that items have been replaced in the data     source and need to be removed from the items host.</summary>
            <param name="position">The new GeneratorPosition.</param>
            <param name="index">    The zero-based index of the item that was     replaced.</param>
            <param name="oldPosition">    The GeneratorPosition at which the items     were remplaced.</param>
            <param name="oldIndex">The old index.</param>
            <param name="itemCount">The number of items that were remplaced.</param>
            <param name="itemUICount">The number of containers that were replaced.</param>
            <param name="affectedContainers">    A list of the containers that were affected by the     replacement of the items.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.OnItemsReset">
            <summary>    Indicates that the data source was reset and that the     items host should clear its children.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.OnRender(System.Windows.Media.DrawingContext)">
            <summary>Draws the content of a DrawingContext object during the render pass of the panel.</summary>
            <param name="drawingContext">             The DrawingContext to draw.     </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.PageDown">
            <summary>Scrolls down within content by one page.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.PageLeft">
            <summary>Scrolls left within content by one page.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.PageRight">
            <summary>Scrolls right within content by one page.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.PageUp">
            <summary>Scrolls up within content by one page.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.SetHorizontalOffset(System.Double)">
            <summary>Sets the amount of horizontal offset.</summary>
            <param name="offset">The degree to which content is horizontally  offset from the containing  viewport.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.SetVerticalOffset(System.Double)">
            <summary>Sets the amount of vertical offset.</summary>
            <param name="offset">The degree to which content is vertically  offset from the containing  viewport.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.AllowCardResize">
            <summary>Gets or sets a value indicating whether the width of the cards can be resized by the end user.</summary>
            <remarks>             Resizing one card will result in all cards being resized.         The same result can be accomplished programmatically by         setting          CardWidth property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.CanHorizontallyScroll">
            <summary>Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.CanVerticallyScroll">
            <summary>Gets or sets a value that indicates whether scrolling on the vertical axis is possible.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.ExtentHeight">
            <summary>Gets the vertical size of the extent. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.ExtentWidth">
            <summary>Gets the horizontal size of the extent. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.FixedSize">
            <summary>Gets or sets, depending to the item layout, the fixed width or height of the items contained in the items host.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.HorizontalOffset">
            <summary>Gets the horizontal  offset of the scrolled content.</summary>
            <remarks>The value assigned to this property must be greater than or equal to zero, and less than  ExtentWidth minus  ViewportWidth</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.Orientation">
            <summary>Gets or sets a value that describes the horizontal or vertical content orientation.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.ScrollOwner">
            <summary>Gets or sets a ScrollViewer element that controls the scrolling behavior of the items host.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.SeparatorLinePen">
            <summary>Gets or sets the Pen used to draw the separator lines.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.VerticalOffset">
            <summary>Gets the vertical offset of the scrolled content.</summary>
            <remarks>             The value assigned to this property must be greater than or         equal to zero, and less than          ExtentHeight minus          ViewportHeight.          Requirements</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.ViewportHeight">
            <summary>Gets the vertical size of the viewport for this content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.ViewportWidth">
            <summary>Gets the horizontal size of the viewport for this content.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.AllowCardResizeProperty">
            <summary>Identifies the  AllowCardResize dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.FixedSizeProperty">
            <summary>Identifies the  FixedSize dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.OrientationProperty">
            <summary>Identifies the  Orientation dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.CardViewItemsHost.SeparatorLinePenProperty">
            <summary>Identifies the  SeparatorLinePen dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.CardViewScrollViewer">
            <summary>Represents a scrollable area that can contain cards.</summary>
            <remarks>The CardViewScrollViewer is used when a grid is in a card-view layout.</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.ClassicSystemColorTheme">
            <summary>Represents the Windows Classic, system-colors theme.</summary>
            <remarks>    Views and themes can be set through attribute syntax (see     Example 1) or property element syntax (see Example 2). To     change the default view and/or theme using attribute syntax,     the name of the view to use (e.g., CardView) must be provided,     optionally followed by the name of the theme class (e.g.,     NormalColorTheme), or the name of the class without the "Theme"     portion. Using property element syntax, the name of the class     (e.g., AeroNormalColorTheme) must be used.     When using themes provided in external Theme Packs (e.g.,     Windows Media Player 11), property element syntax     must be used.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.ClassicSystemColorTheme.#ctor">
            <summary>Initializes a new instance o the  ClassicSystemColorTheme class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.CompactCardView">
            <summary>Represents a compact card-view layout. The compact card-view layout applies well when a database has many columns but few of the fields contain data. In this case, the fields that do not contain data will not be displayed in the cards, giving them a more compact appearance.</summary>
            <remarks>    The      View property of the DataGridControl     class determines which view is applied to a grid. If the     View property is left to its default value,     null (Nothing in Visual     Basic), or explicitly set to null, the default     table-view layout will be used with the system color scheme.     The      Theme property of the View class can be     set to change the color scheme applied to a grid's elements. If     left to its default value, null, the system     color scheme will be used. In either case, if the system-color     theme is not recognized (e.g., a third-party color scheme is     being used), the Aero normal-color theme will be used.              Views and themes can be set through attribute syntax or         property element syntax. To change the default view and/or         theme using attribute syntax, the name of the view to use         (e.g., CardView) must be provided, optionally followed by         the name of the theme class (e.g., NormalColorTheme), or         the name of the class without the "Theme" portion. If the         theme is omitted, the default Aero normal-color theme will         be used.     </remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes">
            <summary>Static class that provides a variety of brushes that were designed to be used as data-grid backgrounds.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.AuroraBlue">
            <summary>    Evoking the dancing light shows of Earth’s polar zones,     the Aurora Blue background provides a bright display of color     to your application.</summary>
            <remarks> Figure 1: Blue Aurora background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.AuroraPink">
            <summary>    Evoking the dancing light shows of Earth’s polar zones,     the Aurora Pink background provides a bright display of color     to your application.</summary>
            <remarks> Figure 1: Pink Aurora background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.AuroraRed">
            <summary>    Evoking the dancing light shows of Earth’s polar zones,     the Aurora Red background provides a bright display of color to     your application.</summary>
            <remarks> Figure 1: Red Aurora background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.ElementalBlack">
            <summary>Designed for the black Elemental and Office 2007 themes, this simple yet classy background subtly adds the black color-scheme of Office 2007 to your datagrid.</summary>
            <remarks> Figure 1: Black Elemental background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.ElementalBlue">
            <summary>Designed for the blue Elemental and Office 2007 themes, this simple yet classy background subtly adds the blue color-scheme of Office 2007 to your datagrid.</summary>
            <remarks> Figure 1: Blue Elemental background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.ElementalSilver">
            <summary>Designed for the silver Elemental and Office 2007 themes, this simple yet classy background subtly adds the silver color-scheme of Office 2007 to your datagrid.</summary>
            <remarks> Figure 1: Silver Elemental background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.HorizonBlue">
            <summary>You can see further with Xceed DataGrid for WPF, and this blue horizon background will inspire your end-users to do the same</summary>
            <remarks> Figure 1: Blue Horizon background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.HorizonOrange">
            <summary>You can see further with Xceed DataGrid for WPF, and this orange horizon background will inspire your end-users to do the same</summary>
            <remarks> Figure 1: Orange horizon background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.NightFog">
            <summary>Add some mysterious nighttime mist to your application with this evocative background.</summary>
            <remarks> Figure 1: NightFog background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.SunBlack">
            <summary>    Bring a ray of sunshine into the end-user experience     using this not-so-bright and cheery black background.</summary>
            <remarks> Figure 1: Black Sun background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.SunBlue">
            <summary>    Bring a ray of sunshine into the end-user experience     using this bright and cheery blue background.</summary>
            <remarks>         Figure 1: Blue Sun background     brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.SunOrange">
            <summary>    Bring a ray of sunshine into the end-user experience     using this bright and cheery orange background.</summary>
            <remarks>         Figure 1: Orange Sun     background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.Sunrise">
            <summary>Greet your end-users with the sunrise of a new day (or a sunset if they’re working late) when you decorate your application with the yellow Sunrise background.</summary>
            <remarks> Figure 1: Yellow Sunrise background brush</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridControlBackgroundBrushes.SunriseBlue">
            <summary>Greet your end-users with the sunrise of a new day (or a sunset if they’re working late) when you decorate your application with the blue Sunrise background.</summary>
            <remarks> Fugure 1: Blue Sunrise background brush</remarks>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.DataGridScrollViewer">
            <summary>Represents a scrollable area of a DataGridControl object that can contain other visible elements.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.DataGridScrollViewer.GetSynchronizedScrollViewerPosition(System.Windows.DependencyObject)">
            <summary>Gets the value of the SynchronizedScrollViewerPosition attached property for the specified dependency object (see Remarks).</summary>
            <returns>    The      SynchronizeScrollViewerPosition value for the dependency     object.                                            Member                 Description                                           Top                 The                  SynchronizedScrollViewer is                 scrolled to the top indicating that navigation in                 the fixed header or footer sections is                 permitted.                                           Bottom                 The                  SynchronizedScrollViewer is                 scrolled to the bottom indicating that navigation                 in the fixed header or footer sections is                 permitted.                                           Left                 The                  SynchronizedScrollViewer is                 scrolled to the left indicating that navigation in                 the fixed header or footer sections is                 permitted.                                           Right                 The                  SynchronizedScrollViewer is                 scrolled to the right indicating that navigation in                 the fixed header or footer sections is                 permitted.                                           None                 The                  SynchronizedScrollViewer is                 not scrolled to one of its extremities indicating                 that navigation in the fixed header or footer                 sections is not permitted.                           </returns>
            <remarks>                          Member             Description                               Top             The              SynchronizedScrollViewer is             scrolled to the top indicating that navigation in the             fixed header or footer sections is             permitted.                               Bottom             The              SynchronizedScrollViewer is             scrolled to the bottom indicating that navigation in             the fixed header or footer sections is             permitted.                               Left             The              SynchronizedScrollViewer is             scrolled to the left indicating that navigation in the             fixed header or footer sections is             permitted.                               Right             The              SynchronizedScrollViewer is             scrolled to the right indicating that navigation in the             fixed header or footer sections is             permitted.                               None             The              SynchronizedScrollViewer is not             scrolled to one of its extremities indicating that             navigation in the fixed header or footer sections is             not permitted.              </remarks>
            <param name="obj">The dependency object from which the property value is read. By default, SynchronizedScrollViewerPosition.None.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.DataGridScrollViewer.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.DataGridScrollViewer.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>Called when a change in scrolling state is detected, such as a change in scroll position,  extent, or  viewport size.</summary>
            <param name="e">A ScrollChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.DataGridScrollViewer.SetSynchronizedScrollViewerPosition(System.Windows.DependencyObject,Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewerPosition)">
            <summary>Sets the value of the SynchronizedScrollViewerPosition attached property to the specified dependency object (see Remarks).</summary>
            <remarks>                          Member             Description                               Top             The              SynchronizedScrollViewer is             scrolled to the top indicating that navigation in the             fixed header or footer sections is             permitted.                               Bottom             The              SynchronizedScrollViewer is             scrolled to the bottom indicating that navigation in             the fixed header or footer sections is             permitted.                               Left             The              SynchronizedScrollViewer is             scrolled to the left indicating that navigation in the             fixed header or footer sections is             permitted.                               Right             The              SynchronizedScrollViewer is             scrolled to the right indicating that navigation in the             fixed header or footer sections is             permitted.                               None             The              SynchronizedScrollViewer is not             scrolled to one of its extremities indicating that             navigation in the fixed header or footer sections is             not permitted.              </remarks>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">    The needed      SynchronizedScrollViewerPosition value.                                            Member                 Description                                           Top                 The                  SynchronizedScrollViewer is                 scrolled to the top indicating that navigation in                 the fixed header or footer sections is                 permitted.                                           Bottom                 The                  SynchronizedScrollViewer is                 scrolled to the bottom indicating that navigation                 in the fixed header or footer sections is                 permitted.                                           Left                 The                  SynchronizedScrollViewer is                 scrolled to the left indicating that navigation in                 the fixed header or footer sections is                 permitted.                                           Right                 The                  SynchronizedScrollViewer is                 scrolled to the right indicating that navigation in                 the fixed header or footer sections is                 permitted.                                           None                 The                  SynchronizedScrollViewer is                 not scrolled to one of its extremities indicating                 that navigation in the fixed header or footer                 sections is not permitted.                           </param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridScrollViewer.HorizontalScrollBar">
            <summary>Gets the scroll viewer's horizontal scroll bar.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.DataGridScrollViewer.VerticalScrollBar">
            <summary>Gets the scroll viewer's vertical scroll bar.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.DataGridScrollViewer.SynchronizedScrollViewerPositionProperty">
            <summary>Identifies the SynchronizedScrollViewerPosition attached property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.FixedCellPanel">
            <summary> Panel used as the PART_CellsHost template part when a grid is in a table-view layout.</summary>
            <remarks>    Fixed Columns vs. Templates      In order to support fixed columns when creating a new row     template for a table-view layout, the following criteria must     be met:                       The PART_CellsHost template part         must be a         FixedCellPanel.         The          FixedCellCount property of the         FixedCellPanel must be bound to the table         view's          FixedColumnCount property using a         TwoWay          ViewBinding.          The fixed-cell-panel properties listed below are also     usually bound when provided a new row template for a table-view     layout:                                SplitterStyle         (TemplateBinding         xcdg:TableView.FixedColumnSplitterStyle)                  SplitterWidth (xcdg:ViewBinding         FixedColumnSplitterWidth)                  ShowSplitter         (xcdg:ViewBinding ShowFixedColumnSplitter)                  FixedColumnDropMarkPen         (xcdg:ViewBinding FixedColumnDropMarkPen)          If a new template is provided for a DataGridControl     and fixed columns are to be supported, it is essential that a          TableViewScrollViewer be used. This scroll viewer is     responsible for preserving the     TranslateTransforms that fix and scroll     elements, as well as executing the PageLeft and PageRight     actions according to the reduced viewport. It is also     recommended that an AdornerDecorator be     located above the TableViewScrollViewer of the     templated DataGridControl to support drag and     dropping of the fixed-column splitter correctly.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.FixedCellPanel.#ctor">
            <summary>Initializes a new instance of the FixedCellPanel class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.FixedCellPanel.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the child elements of this panel.</summary>
            <returns>The Size that represents the arranged size of the panel.</returns>
            <param name="finalSize">The Size this element uses to arrange its child elements.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.FixedCellPanel.CreateUIElementCollection(System.Windows.FrameworkElement)">
            <summary>Creates a new UIElementCollection.</summary>
            <returns>An ordered collection of elements that have the specified logical parent.</returns>
            <remarks>Use the generated UIElementCollection to cache information about child elements or to perform incremental layout updates.</remarks>
            <param name="logicalParent">The logical parent element of the collection to be created.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.FixedCellPanel.GetVisualChild(System.Int32)">
            <summary>Gets a Visual child of this panel at the specified index.</summary>
            <returns>A Visual child of the parent Panel element.</returns>
            <param name="index">The zero-based index position of the Visual child.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.FixedCellPanel.MeasureOverride(System.Windows.Size)">
            <summary>Measures the child elements in anticipation of arranging them during the  ArrangeOverride pass.</summary>
            <returns>The Size that represents the desired size of the element.</returns>
            <param name="availableSize">An upper limit Size that should not be exceeded.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.FixedCellPanel.ColumnStretchMinWidth">
            <summary>    Gets or sets the minimum width that a column in stretch     mode can have.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.FixedCellPanel.ColumnStretchMode">
            <summary>    Gets or sets a value that indicates which columns are in     stretch mode.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.FixedCellPanel.FixedCellCount">
            <summary>Gets or sets the number of cells that are fixed.</summary>
            <remarks>    Modifying this property will automatically modify the          FixedColumnCount property on TableView and     vice-versa.     The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.FixedCellPanel.FixedColumnDropMarkPen">
            <summary>Gets or sets the Pen used to draw the fixed-column drop-mark.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.FixedCellPanel.LogicalChildren">
            <summary>Gets an enumerator that can iterate the logical child elements of this panel.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.FixedCellPanel.ShowSplitter">
            <summary>Gets or sets a value indicating whether the fixed-column splitter is shown when a grid is in a table-view layout.</summary>
            <remarks>If set to false the fixed-column splitter will not be shown even if a grid contains fixed columns.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.FixedCellPanel.SplitterStyle">
            <summary>Gets or sets the style to apply to the fixed-column splitter.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.FixedCellPanel.SplitterWidth">
            <summary>Gets or sets the width of the fixed-column splitter.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.FixedCellPanel.VisualChildrenCount">
            <summary>Gets the number of child Visual objects in this panel instance.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.FixedCellPanel.ColumnStretchMinWidthProperty">
            <summary>Identifies the  ColumnStretchMinWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.FixedCellPanel.ColumnStretchModeProperty">
            <summary>Identifies the  ColumnStretchMode dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.FixedCellPanel.FixedCellCountProperty">
            <summary>Identifies the  FixedCellCount dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.FixedCellPanel.FixedColumnDropMarkPenProperty">
            <summary>Identifies the  FixedColumnDropMarkPen dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.FixedCellPanel.ShowSplitterProperty">
            <summary>Identifies the  ShowSplitter dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.FixedCellPanel.SplitterStyleProperty">
            <summary>Identifies the  SplitterStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.FixedCellPanel.SplitterWidthProperty">
            <summary>Identifies the  SplitterWidth dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.FixedColumnSplitter">
            <summary>    Represents the fixed-column splitter, which delimits the     fixed columns from the scrolling ones and allows new columns to     be fixed or unfixed. </summary>
            <remarks>    The fixed-column splitter is displayed when a grid is in     a table-view     layout to delimit the fixed columns from the scrolling     ones.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.FixedColumnSplitter.#ctor">
            <summary>Initializes a new instance of the  FixedColumnSplitter class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.GenericPrintTheme">
            <summary>Represents the classic gray-scale theme that will be used when a grid is printed or exported. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.GenericPrintTheme.#ctor">
            <summary>Initializes a new instance of the GenericPrintTheme class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.LunaHomesteadTheme">
            <summary>Represents the Luna Homestead theme.</summary>
            <remarks>    Views and themes can be set through attribute syntax (see     Example 1) or property element syntax (see Example 2). To     change the default view and/or theme using attribute syntax,     the name of the view to use (e.g., CardView) must be provided,     optionally followed by the name of the theme class (e.g.,     NormalColorTheme), or the name of the class without the "Theme"     portion. Using property element syntax, the name of the class     (e.g., AeroNormalColorTheme) must be used.     When using themes provided in external Theme Packs (e.g.,     Windows Media Player 11), property element syntax     must be used.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.LunaHomesteadTheme.#ctor">
            <summary>Initializes a new instance of the  LunaHomesteadTheme class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.LunaMetallicTheme">
            <summary>Represents the Luna Metallic theme.</summary>
            <remarks>    Views and themes can be set through attribute syntax (see     Example 1) or property element syntax (see Example 2). To     change the default view and/or theme using attribute syntax,     the name of the view to use (e.g., CardView) must be provided,     optionally followed by the name of the theme class (e.g.,     NormalColorTheme), or the name of the class without the "Theme"     portion. Using property element syntax, the name of the class     (e.g., AeroNormalColorTheme) must be used.     When using themes provided in external Theme Packs (e.g.,     Windows Media Player 11), property element syntax     must be used.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.LunaMetallicTheme.#ctor">
            <summary>Initializes a new instance of the  LunaMetallicTheme class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.LunaNormalColorTheme">
            <summary>Represents the Luna normal-color theme.</summary>
            <remarks>    Views and themes can be set through attribute syntax (see     Example 1) or property element syntax (see Example 2). To     change the default view and/or theme using attribute syntax,     the name of the view to use (e.g., CardView) must be provided,     optionally followed by the name of the theme class (e.g.,     NormalColorTheme), or the name of the class without the "Theme"     portion. Using property element syntax, the name of the class     (e.g., AeroNormalColorTheme) must be used.     When using themes provided in external Theme Packs (e.g.,     Windows Media Player 11), property element syntax     must be used.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.LunaNormalColorTheme.#ctor">
            <summary>Initializes a new instance of the  LunaNormalColorTheme class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.PassiveLayoutDecorator">
            <summary>    Represents a decorator that, for the specified axis, does     not have a desired size but still lays out its child according     to the size provided by its parent.</summary>
            <remarks>    For example, if the content of a      GroupHeaderControl, whose template root is a     PassiveLayoutDecorator with an      Axis property set to Horizontal, is larger     than the combined width of the columns, its width will be     restrained and not exceed the total column width.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PassiveLayoutDecorator.#ctor">
            <summary>Initializes a new instance of the PassiveLayoutDecorator class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PassiveLayoutDecorator.MeasureOverride(System.Windows.Size)">
            <summary>Measures the child element in anticipation of arranging it during the ArrangeOverride pass.</summary>
            <param name="availableSize">An upper limit Size that should not be exceeded.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PassiveLayoutDecorator.Axis">
            <summary>Gets or sets a value that determines the axis on which the PassiveLayoutDecorator will be passive (see Remarks).</summary>
            <remarks>                          Member             Description                               Vertical             The height of a              PassiveLayoutDecorator             will be determined by its parent.                               Horizontal             The width of a              PassiveLayoutDecorator             will be determined by its parent.                               Both             The height and width of a              PassiveLayoutDecorator             will be determined by its parent.              </remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PassiveLayoutDecorator.AxisProperty">
            <summary>Identifies the  Axis dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.PrintTableView">
            <summary>Represents a printable and exportable table-view layout in which rows are laid out horizontally in a traditional grid-like style. </summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetCanSpanHorizontally(System.Windows.DependencyObject)">
            <summary>    Gets the value of the     CanSpanHorizontally attached property for the     specified dependency object.     " --></summary>
            <returns>The boolean property value for the dependency object.</returns>
            <param name="obj">The dependency object from which the property value is read. By default, when a grid is in a table-view layout, the value of the CanSpanHorizontally property will correspond to the table-view's  CanScrollHorizontally property " -->" --></param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetDetailIndicatorWidth(System.Windows.DependencyObject)">
            <summary>    Gets the width of the      DetailIndicators when a grid is in     table-view.</summary>
            <returns>    A value indicating the width of the      DetailIndicators when a grid is in table-view. By     default, double.NaN.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetFixedColumnCount(System.Windows.DependencyObject)">
            <summary>Gets the number of columns that are to be repeated on each page when a grid is printed or exported.</summary>
            <returns>A value representing the number of columns that are to be repeated on each page when a grid is printed or exported. By default, 0.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetFixedColumnSplitterStyle(System.Windows.DependencyObject)">
            <summary>Gets the style to apply to the fixed-column splitter for the item to which the property is attached.</summary>
            <returns>A Style representing the style to apply to the fixed-column splitter for the item to which the property is attached.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetFixedColumnSplitterWidth(System.Windows.DependencyObject)">
            <summary>Gets the width of the fixed-column splitter.</summary>
            <returns>A value representing the width of the fixed-column splitter.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetGroupLevelIndicatorWidth(System.Windows.DependencyObject)">
            <summary>Gets the width of the group-level indicators when a grid is in a printable or exportable table-view layout.</summary>
            <returns>A value indicating the width of the  group-level indicators when a grid is in a printable or exportable table-view layout</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetHorizontalGridLineBrush(System.Windows.DependencyObject)">
            <summary>Gets the Brush used to paint the horizontal grid lines when a grid is in a printable or exportable table-view layout.</summary>
            <returns>The Brush used to paint the horizontal grid lines when a grid is in a printable or exportable table-view layout.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetHorizontalGridLineThickness(System.Windows.DependencyObject)">
            <summary>Gets a value indicating the thickness of the horizontal grid lines when a grid is in a printable or exportable table-view layout. Overload List!UNRECOGNISED ELEMENT TYPE 'filtereditemlist'!" -->Syntax!UNRECOGNISED ELEMENT TYPE 'FilteredItemList'!" --></summary>
            <returns>A value indicating the thickness of the horizontal grid lines when a grid is in a printable or exportable table-view layout.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetShowFixedColumnSplitter(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether the fixed-column splitter is shown when a grid is printed or exported.</summary>
            <returns>true if the fixed-column splitter is shown when a grid is printed or exported; false otherwise. By default, false.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetVerticalGridLineBrush(System.Windows.DependencyObject)">
            <summary>Gets the Brush used to paint the vertical grid lines when a grid is in a printable or exportable table-view layout.  Overload List!UNRECOGNISED ELEMENT TYPE 'filtereditemlist'!" -->Syntax!UNRECOGNISED ELEMENT TYPE 'FilteredItemList'!" --></summary>
            <returns>The Brush used to paint the vertical grid lines when a grid is in a printable or exportable table-view layout.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.GetVerticalGridLineThickness(System.Windows.DependencyObject)">
            <summary>Gets a value indicating the thickness of the vertical grid lines when a grid is in a printable or exportable table-view layout.</summary>
            <returns>A value indicating the thickness of the vertical grid lines when a grid is in a printable or exportable table-view layout.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetCanSpanHorizontally(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets the value of the CanSpanHorizontally attached property to the specified dependency object.</summary>
            <param name="obj">             The dependency object to which the attached property is         written.     </param>
            <param name="value">The needed boolean value. By default, when a grid is in a table-view layout, the value of the CanSpanHorizontally property will correspond to the table-view's  CanScrollHorizontally property</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetDetailIndicatorWidth(System.Windows.DependencyObject,System.Double)">
            <summary>    Sets the width of the      DetailIndicators when a grid is in     table-view.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">    A value indicating the width of the      DetailIndicators when a grid is in table-view. By     default, double.NaN.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetFixedColumnCount(System.Windows.DependencyObject,System.Int32)">
            <summary>Sets the number of columns that are to be repeated on each page when a grid is printed or exported.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">    A value representing the number of columns that are to be     repeated on each page when a grid is printed or exported. By     default, 0.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetFixedColumnSplitterStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>Sets the style to apply to the fixed-column splitter for the item to which the property is attached.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">A Style representing the style to apply to the fixed-column splitter for the item to which the property is attached.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetFixedColumnSplitterWidth(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the width of the fixed-column splitter.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">A value representing the width of the fixed-column splitter.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetGroupLevelIndicatorWidth(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the width of the group-level indicators when a grid is in a printable or exportable table-view layout.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">A value indicating the width of the  group-level indicators when a grid is in a printable or exportable table-view layout.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetHorizontalGridLineBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the Brush used to paint the horizontal grid lines when a grid is in a printable or exportable table-view layout.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">The Brush used to paint the horizontal grid lines when a grid is in a printable or exportable table-view layout.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetHorizontalGridLineThickness(System.Windows.DependencyObject,System.Double)">
            <summary>Sets a value indicating the thickness of the horizontal grid lines when a grid is in a printable or exportable table-view layout. Overload List!UNRECOGNISED ELEMENT TYPE 'filtereditemlist'!" -->Syntax!UNRECOGNISED ELEMENT TYPE 'FilteredItemList'!" --></summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">A value indicating the thickness of the horizontal grid lines when a grid is in a printable or exportable table-view layout.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetShowFixedColumnSplitter(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether the fixed-column splitter is shown when a grid is printed or exported.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">true if the fixed-column splitter is shown when a grid is printed or exported; false otherwise. By default, false.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetVerticalGridLineBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the Brush used to paint the vertical grid lines when a grid is in a printable or exportable table-view layout.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">The Brush used to paint the vertical grid lines when a grid is in a printable or exportable table-view layout.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.PrintTableView.SetVerticalGridLineThickness(System.Windows.DependencyObject,System.Double)">
            <summary>Sets a value indicating the thickness of the vertical grid lines when a grid is in a printable or exportable table-view layout.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">A value indicating the thickness of the vertical grid lines when a grid is in a printable or exportable table-view layout.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintTableView.DetailIndicatorWidth">
            <summary>    Gets or sets the width of the DetailIndicators     when a grid is in table-view.</summary>
            <remarks>             This property represents the local CLR property of the         DetailIndicatorWidth attached property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintTableView.FixedColumnCount">
            <summary>Gets or sets the number of columns that are to be repeated on each page when a grid is printed or exported.</summary>
            <remarks>This property represents the local CLR property of the FixedColumnCount attached property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintTableView.FixedColumnSplitterWidth">
            <summary>Gets or sets the width of the fixed-column splitter.</summary>
            <remarks>This property represents the local CLR property of the FixedColumnSplitterWidth attached property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintTableView.GroupLevelIndicatorWidth">
            <summary>Gets or sets the width of the group-level indicators when a grid is in a printable or exportable table-view layout.</summary>
            <remarks>This property represents the local CLR property of the GroupLevelIndicatorWidth attached property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintTableView.HorizontalGridLineBrush">
            <summary>Gets or sets the Brush used to paint the horizontal grid lines when a grid is in a printable or exportable table-view layout.  " --></summary>
            <remarks>This property represents the local CLR property of the HorizontalGridLineBrush attached property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintTableView.HorizontalGridLineThickness">
            <summary>Gets or sets a value indicating the thickness of the horizontal grid lines when a grid is in a printable or exportable table-view layout. " --></summary>
            <remarks>This property represents the local CLR property of the HorizontalGridLineThickness attached property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintTableView.ShowFixedColumnSplitter">
            <summary>Gets or sets a value indicating whether the fixed-column splitter is shown when a grid is printed or exported.</summary>
            <remarks>This property represents the local CLR property of the ShowFixedColumnSplitter attached property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintTableView.VerticalGridLineBrush">
            <summary>Gets or sets the Brush used to paint the vertical grid lines when a grid is in a printable or exportable table-view layout.  " --></summary>
            <remarks>This property represents the local CLR property of the VerticallGridLineBrush attached property.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintTableView.VerticalGridLineThickness">
            <summary>Gets or sets a value indicating the thickness of the vertical grid lines when a grid is in a printable or exportable table-view layout.</summary>
            <remarks>This property represents the local CLR property of the VerticalGridLineThickness attached property.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.CanSpanHorizontallyProperty">
            <summary>Identifies the CanSpanHorizontally attached property</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.DetailIndicatorWidthProperty">
            <summary>Identifies the  DetailIndicatorWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.FixedColumnCountProperty">
            <summary>Identifies the  FixedColumnCount dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.FixedColumnSplitterStyleProperty">
            <summary>Identifies the FixedColumnSplitterStyle attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.FixedColumnSplitterWidthProperty">
            <summary>Identifies the  FixedColumnSplitterWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.GroupLevelIndicatorWidthProperty">
            <summary>Identifies the  GroupLevelIndicatorWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.HorizontalGridLineBrushProperty">
            <summary>Identifies the  HorizontalGridLineBrush dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.HorizontalGridLineThicknessProperty">
            <summary>Identifies the  HorizontalGridLineThickness dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.ShowFixedColumnSplitterProperty">
            <summary>Identifies the  ShowFixedColumnSplitter dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.VerticalGridLineBrushProperty">
            <summary>Identifies the  VerticalGridLineBrush dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintTableView.VerticalGridLineThicknessProperty">
            <summary>Identifies the  VerticalGridLineThickness dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.PrintViewBase">
            <summary>Base class that provides various layout information that applies to printable and exportable views. </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.CurrentPageNumber">
            <summary>Gets the current page number.</summary>
            <remarks>In XAML, the CurrentPageNumber property can be bound to an element's property (e.g., TextBlock.Text ) using a  ViewBinding.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.IsPrintingFirstPage">
            <summary>Gets a value indicating whether the first page is being printed.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.IsPrintingLastPage">
            <summary>Gets a value indicating whether the last page is being printed.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.PageFooters">
            <summary>Gets a collection of DataTemplates that represents the elements that will be printed in the footers of each page.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.PageHeaders">
            <summary>Gets a collection of DataTemplates that represents the elements that will be printed in the headers of each page.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.PagePrintOrder">
            <summary>Gets or sets a value representing the order in which the pages are printed (see Remarks).</summary>
            <remarks>When PagePrintOrder is set to Horizontal, the columns of the rows fitting on a given page will be printed on subsequent pages until all columns of those rows have been completely printed. When PagePrintOrder is set to Vertical, the same columns will be printed on subsequent pages to the end of the columns being printed. So for example, given a grid with 10 columns, where only five columns can fit on a printed page, when PagePrintOrder is set to Horizontal, the first page will contain the first five columns, whereas the second page will contain the remaining five columns of those rows. In other words, all of the columns of the first group of rows being printed will be completed before moving on to the next group of rows. On the other hand, when PagePrintOrder is set to Vertical, the first page will contain the first five columns of the first group of rows, the second page will contain the first five columns of the second group of rows, and so on until the first five columns of a grid are printed in their entirety.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.PageStyle">
            <summary>Gets or sets the style that defines the appearance of each page.</summary>
            <remarks>The style's TargetType must be set to  DataGridPageControl.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.ProgressWindowContentTemplate">
            <summary>Gets or sets the template that will be used to display the progress window's content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.ProgressWindowDescription">
            <summary>Gets or sets the progress description displayed in the progress window.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.ProgressWindowStyle">
            <summary>Gets or sets the style that will be used by the progress window.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.PrintViewBase.ProgressWindowTitle">
            <summary>    Gets or sets the text displayed in the progress window's     title.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.CurrentPageNumberProperty">
            <summary>Identifies the  CurrentPageNumber dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.IsPrintingFirstPageProperty">
            <summary>Identifies the  IsPrintingFirstPage dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.IsPrintingLastPageProperty">
            <summary>Identifies the  IsPrintingLastPage dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.PageFootersProperty">
            <summary>Identifies the  PageFooters dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.PageHeadersProperty">
            <summary>Identifies the  PageHeaders dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.PagePrintOrderProperty">
            <summary>Identifies the  PagePrintOrder dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.PageStyleProperty">
            <summary>Identifies the  PageStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.ProgressWindowContentTemplateProperty">
            <summary>Identifies the  ProgressWindowContentTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.ProgressWindowDescriptionProperty">
            <summary>Identifies the  ProgressWindowDescription dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.ProgressWindowStyleProperty">
            <summary>Identifies the  ProgressWindowStyle dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.PrintViewBase.ProgressWindowTitleProperty">
            <summary>Identifies the  ProgressWindowTitle dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.RoyaleNormalColorTheme">
            <summary>Represents the Royale normal-color theme.</summary>
            <remarks>    Views and themes can be set through attribute syntax (see     Example 1) or property element syntax (see Example 2). To     change the default view and/or theme using attribute syntax,     the name of the view to use (e.g., CardView) must be provided,     optionally followed by the name of the theme class (e.g.,     NormalColorTheme), or the name of the class without the "Theme"     portion. Using property element syntax, the name of the class     (e.g., AeroNormalColorTheme) must be used.     When using themes provided in external Theme Packs (e.g.,     Windows Media Player 11), property element syntax     must be used.          Figure 1: Compact-card view in Royale     system theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.RoyaleNormalColorTheme.#ctor">
            <summary>Initializes a new instance of the  RoyaleNormalColorTheme class.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewer">
            <summary>Represents a synchronized, scrollable area that can contain other visible elements.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewer.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewer.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>Called when a change in scrolling state is detected, such as a change in scroll position,  extent, or  viewport size.</summary>
            <param name="e">A ScrollChangedEventArgs that contains the event data.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewer.ScrollOrientation">
            <summary>Gets or sets the scroll orientation of the SynchronizedScrollViewer.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.SynchronizedScrollViewer.ScrollOrientationProperty">
            <summary>Identifies the  ScrollOrientation dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.TableView">
            <summary>Represents a table-view layout in which rows are laid out horizontally in a traditional grid-like style.</summary>
            <remarks>    The      View property of the DataGridControl     class determines which view is applied to a grid. If the     View property is left to its default value,     null (Nothing in Visual     Basic), or explicitly set to null, the default     table-view layout will be used with the system color scheme.     The      Theme property of the View class can be     set to change the color scheme applied to a grid's elements. If     left to its default value, null, the system     color scheme will be used. In either case, if the system-color     theme is not recognized (e.g., a third-party color scheme is     being used), the Aero normal-color theme will be used.              Views and themes can be set through attribute syntax or         property element syntax. To change the default view and/or         theme using attribute syntax, the name of the view to use         (e.g., CardView) must be provided, optionally followed by         the name of the theme class (e.g., NormalColorTheme), or         the name of the class without the "Theme" portion. If the         theme is omitted, the default Aero normal-color theme will         be used.                   Fixed Columns vs. Templates          In order to support fixed columns when creating a new         row template for a table-view layout, the following         criteria must be met:                                   The PART_CellsHost template             part must be a             FixedCellPanel.             The              FixedCellCount property of the             FixedCellPanel must be bound to the             table view's              FixedColumnCount property using a             TwoWay              ViewBinding.                  The fixed-cell-panel properties listed below are also         usually bound when provided a new row template for a         table-view layout:                                                SplitterStyle             (TemplateBinding             xcdg:TableView.FixedColumnSplitterStyle)                          SplitterWidth (xcdg:ViewBinding             FixedColumnSplitterWidth)                          ShowSplitter             (xcdg:ViewBinding ShowFixedColumnSplitter)                          FixedColumnDropMarkPen             (xcdg:ViewBinding FixedColumnDropMarkPen)                  If a new template is provided for a          DataGridControl and fixed columns are to be supported,         it is essential that a          TableViewScrollViewer be used. This scroll viewer is         responsible for preserving the         TranslateTransforms that fix and scroll         elements, as well as executing the PageLeft and PageRight         actions according to the reduced viewport. It is also         recommended that an AdornerDecorator be         located above the TableViewScrollViewer of         the templated DataGridControl to support         drag and dropping of the fixed-column splitter         correctly.     </remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.#ctor">
            <summary>Initializes a new instance of the TableView class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.AddDefaultHeadersFooters">
            <summary>Adds the default items to the  header,  footer,  fixed headers, and  fixed footer sections of a grid when it is in a table-view layout.</summary>
            <remarks>    By default, a grid contains a GroupByControl     and a ColumnManagerRow     in its      FixedHeaders that are added before any other elements that     are explicitly added to the section.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetCanScrollHorizontally(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether the item to which the property is attached can scroll with the content of a grid.</summary>
            <remarks>    The CanScrollHorizontally attached     property can be set on elements (e.g., GroupByControl     and      GroupHeaderControl) to prevent them from being scrolled     horizontally. If set on a row, it will be ignored. The     CanScrollHorizontally attached property should     not be set on the panel (FixedCellPanel)     used to manage the data rows in table view since this panel     will automatically handle fixing the appropriate elements     (cells).     Using this property will result in the     RenderTransform property being modified. In     the case where the RenderTransform property is     required, two solutions are available:     1- Place the element on which the     CanScrollHorizontally property has been set in     a panel, which will have the desired     RenderTransform.     2- Place the element which has the desired     RenderTransform in a simple     Decorator that will set the     CanScrollHorizontally property to     false.</remarks>
            <returns>true if the item can scroll with the content of a grid; false otherwise (the item will stay fix).</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetColumnStretchMinWidth(System.Windows.DependencyObject)">
            <summary>Gets the minimum width that a column in stretch mode can have.</summary>
            <returns>A value representing the minimum width that a column in stretch mode can have. By default, 50d.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetColumnStretchMode(System.Windows.DependencyObject)">
            <summary>    Gets a value that indicates which columns are in stretch     mode.</summary>
            <returns>    A      ColumnStretchMode value indicating which columns are     in stretch mode. By default, None.                                            Member                 Description                                           None                 The widths of the columns are not                 stretched.                                           First                 Only the width of the first column is                 stretched.                                           Last                 Only the width of the last column is                 stretched.                                           All                 The widths of all the columns are                 stretched so that they evenly occupy the available                 space.                           </returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetDetailIndicatorWidth(System.Windows.DependencyObject)">
            <summary>    Gets the width of the      DetailIndicators when a grid is in     table-view.</summary>
            <returns>    A value indicating the width of the      DetailIndicators when a grid is in table-view. By     default, double.NaN.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetFixedColumnCount(System.Windows.DependencyObject)">
            <summary>Gets the number of columns that are fixed.</summary>
            <returns>A value representing the number of columns that are fixed. By default, 0.</returns>
            <remarks>             Modifying this property will automatically modify the                  FixedCellCount property on         the          FixedCellPanel.          The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetFixedColumnDropMarkPen(System.Windows.DependencyObject)">
            <summary>Gets the Pen used to draw the fixed-column drop-mark.</summary>
            <returns>The Pen used to draw the fixed-column drop-mark.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetFixedColumnSplitterStyle(System.Windows.DependencyObject)">
            <summary>Gets the style to apply to the fixed-column splitter for the item to which the property is attached.</summary>
            <returns>A Style representing the style to apply to the fixed-column splitter for the item to which the property is attached.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetFixedColumnSplitterWidth(System.Windows.DependencyObject)">
            <summary>Gets the width of the fixed-column splitter</summary>
            <returns>A value representing the width of the fixed-column splitter, for all splitters created by a  fixed-cell panel.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetGroupLevelIndicatorWidth(System.Windows.DependencyObject)">
            <summary>Gets the width of the  GroupLevelIndicators when a grid is in table-view.</summary>
            <returns>A value indicating the width of the  GroupLevelIndicators when a grid is in table-view. By default, double.NaN.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetHorizontalGridLineBrush(System.Windows.DependencyObject)">
            <summary>Gets the Brush used to paint the horizontal grid lines.</summary>
            <returns>The Brush used to paint the horizontal grid lines. By default, $$NULL$$.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetHorizontalGridLineThickness(System.Windows.DependencyObject)">
            <summary>Gets a value indicating the thickness of the horizontal grid lines.</summary>
            <returns>A value indicating the thickness of the horizontal grid lines. By default, double.NaN.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetIsColumnVirtualizationEnabled(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether column virtualization is enabled.</summary>
            <returns>true if column virtualization is enabled; false otherwise. By default, true.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetShowFixedColumnSplitter(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether the fixed-column splitter is shown when a grid is in a table-view layout.</summary>
            <returns>true if the fixed-column splitter is shown; false otherwise. By default, true.</returns>
            <remarks>If set to false the fixed-column splitter will not be shown even if a grid contains fixed columns.</remarks>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetVerticalGridLineBrush(System.Windows.DependencyObject)">
            <summary>Gets the Brush used to paint the vertical grid lines.</summary>
            <returns>The Brush used to paint the vertical grid lines. By default, $$NULL$$.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.GetVerticalGridLineThickness(System.Windows.DependencyObject)">
            <summary>Gets a value indicating the thickness of the vertical grid lines.</summary>
            <returns>A value indicating the thickness of the vertical grid lines. By default, double.NaN.</returns>
            <param name="obj">    The dependency object from which the property value is     read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetCanScrollHorizontally(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether the item to which the property is attached can scroll with the content of a grid.</summary>
            <remarks>    The CanScrollHorizontally attached     property can be set on elements (e.g., GroupByControl     and      GroupHeaderControl) to prevent them from being scrolled     horizontally. If set on a row, it will be ignored. The     CanScrollHorizontally attached property should     not be set on the panel (FixedCellPanel)     used to manage the data rows in table view since this panel     will automatically handle fixing the appropriate elements     (cells).     Using this property will result in the     RenderTransform property being modified. In     order to use RenderTransform, two solutions     are available:     1- Place the element on which the     CanScrollHorizontally property has been set in     a panel, which will have the desired     RenderTransform.          2- Place the element which has the desired     RenderTransform in a simple     Decorator that will set the     CanScrollHorizontally property to     false.</remarks>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">true if the item can scroll with the content of a grid; false otherwise (the item will stay fix).</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetColumnStretchMinWidth(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the minimum width that a column in stretch mode can have.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">    A value representing the minimum width that a column in     stretch mode can have. By default, 50d.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetColumnStretchMode(System.Windows.DependencyObject,Xceed.Wpf.DataGrid.Views.ColumnStretchMode)">
            <summary>    Sets a value that indicates which columns are in stretch     mode.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">    A      ColumnStretchMode value indicating which columns are     in stretch mode. By default, None.                                            Member                 Description                                           None                 The widths of the columns are not                 stretched.                                           First                 Only the width of the first column is                 stretched.                                           Last                 Only the width of the last column is                 stretched.                                           All                 The widths of all the columns are                 stretched so that they evenly occupy the available                 space.                           </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetDetailIndicatorWidth(System.Windows.DependencyObject,System.Double)">
            <summary>    Sets the width of the      DetailIndicators when a grid is in     table-view.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">    A value indicating the width of the      DetailIndicators when a grid is in table-view. By     default, double.NaN.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetFixedColumnCount(System.Windows.DependencyObject,System.Int32)">
            <summary>Sets a value indicating the thickness of the vertical grid lines.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">A value indicating the thickness of the vertical grid lines. By default, double.NaN.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetFixedColumnDropMarkPen(System.Windows.DependencyObject,System.Windows.Media.Pen)">
            <summary>Sets the Pen used to draw the fixed-column drop-mark.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">The Pen used to draw the fixed-column drop-mark.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetFixedColumnSplitterStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>Sets the style to apply to the fixed-column splitter for the item to which the property is attached.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">A Style representing the style to apply to the fixed-column splitter for the item to which the property is attached.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetFixedColumnSplitterWidth(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the width of the fixed-column splitter.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">A value representing the width of the fixed-column splitter, for all splitters created by a  fixed-cell panel.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetGroupLevelIndicatorWidth(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the width of the  GroupLevelIndicators when a grid is in table-view.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">A value indicating the width of the  GroupLevelIndicators when a grid is in table-view. By default, double.NaN.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetHorizontalGridLineBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the Brush used to paint the horizontal grid lines.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">The Brush used to paint the horizontal grid lines. By default, $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetHorizontalGridLineThickness(System.Windows.DependencyObject,System.Double)">
            <summary>Sets a value indicating the thickness of the horizontal grid lines.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">A value indicating the thickness of the horizontal grid lines. By default, double.NaN.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetIsColumnVirtualizationEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether column virtualization is enabled.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">true if column virtualization is enabled; false otherwise. By default, true.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetShowFixedColumnSplitter(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether the fixed-column splitter is shown when a grid is in a table-view layout.</summary>
            <remarks>If set to false the fixed-column splitter will not be shown even if a grid contains fixed columns.</remarks>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">true if the fixed-column splitter is shown; false otherwise. By default, true.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetVerticalGridLineBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the Brush used to paint the vertical grid lines.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">The Brush used to paint the vertical grid lines. By default, $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableView.SetVerticalGridLineThickness(System.Windows.DependencyObject,System.Double)">
            <summary>Sets a value indicating the thickness of the vertical grid lines.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">A value indicating the thickness of the vertical grid lines. By default, double.NaN.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.ColumnStretchMinWidth">
            <summary>    Gets or sets the minimum width that a column in stretch     mode can have.</summary>
            <remarks>             This property represents the local CLR property of the         ColumnStretchMinWidth attached property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.ColumnStretchMode">
            <summary>    Gets or sets a value that indicates which columns are in     stretch mode.</summary>
            <remarks>             This property represents the local CLR property of the         ColumnStretchMode attached property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.DetailIndicatorWidth">
            <summary>Gets or sets the width of the DetailIndicators when a grid is in table-view.</summary>
            <remarks>             This property represents the local CLR property of the         DetailIndicatorWidth attached property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.FixedColumnCount">
            <summary>Gets or sets the number of columns that are fixed. </summary>
            <remarks>    Modifying this property will automatically modify the          FixedCellCount property on the      FixedCellPanel.              This property represents the local CLR property of the         FixedColumnCount attached property.          The VisiblePosition property represents     the visible position of the column in a grid and may, or may     not, correspond to the Index     property. A column's visible position can be regarded as the     position the column will take when it is visible. Changing a     column's visibility will not affect its visible position,     allowing the visibility of columns to be changed without them     being reordered. To retrieve the effective visible position of     a column, the IndexOf method of the     VisibleColumns collection can be used.     When fixing columns in a table-view layout, columns will     be fixed in the order represented by their      VisiblePosition properties. For example, if the      FixedColumnCount property is set to 2, then the columns     whose VisiblePosition properties are 0 and 1     will be fixed.     If a grid contains hidden columns, they will be ignored.     For example, if the second and third columns are hidden and a     fixed-column count of 2 is provided, the first and fourth     columns will be fixed but their visible positions will     not be modified to reflect their new     positions. </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.FixedColumnDropMarkPen">
            <summary>Gets or sets the Pen used to draw the fixed-column drop-mark. </summary>
            <remarks>             This property represents the local CLR property of the         FixedColumnDropMarkPen attached property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.FixedColumnSplitterWidth">
            <summary>Gets or sets the width of the fixed-column splitter. </summary>
            <remarks>             This property represents the local CLR property of the         FixedColumnSplitterWidth attached         property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.GroupLevelIndicatorWidth">
            <summary>Gets or sets the width of the GroupLevelIndicators when a grid is in table-view.</summary>
            <remarks>             This property represents the local CLR property of the         GroupLevelIndicatorWidth attached         property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.HorizontalGridLineBrush">
            <summary>Gets or sets the Brush used to paint the horizontal grid lines.</summary>
            <remarks>             This property represents the local CLR property of the         HorizontalGridLineBrush attached property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.HorizontalGridLineThickness">
            <summary>Gets or sets a value indicating the thickness of the horizontal grid lines.</summary>
            <remarks>             This property represents the local CLR property of the         HorizontalGridLineThickness attached         property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.IsColumnVirtualizationEnabled">
            <summary>Gets or sets a value indicating whether column virtualization is enabled.</summary>
            <remarks>             This property represents the local CLR property of the         IsColumnVirtualizationEnabled attached         property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.RowSelectorPaneWidth">
            <summary>Gets or sets the width of the row-selector pane.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.ShowFixedColumnSplitter">
            <summary>Gets or sets a value indicating whether the fixed-column splitter is shown when a grid is in a table-view layout. </summary>
            <remarks>    If set to false the fixed-column     splitter will not be shown even if a grid contains fixed     columns.              This property represents the local CLR property of the         ShowFixedColumnSplitter attached property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.ShowRowSelectorPane">
            <summary>Gets or sets a value indicating whether the RowSelectorPane is visible.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.VerticalGridLineBrush">
            <summary>Gets or sets the Brush used to paint the vertical grid lines.</summary>
            <remarks>             This property represents the local CLR property of the         VerticalGridLineBrush attached property.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableView.VerticalGridLineThickness">
            <summary>Gets or sets a value indicating the thickness of the vertical grid lines.</summary>
            <remarks>             This property represents the local CLR property of the         VerticalGridLineThickness attached         property.     </remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.CanScrollHorizontallyProperty">
            <summary>Identifies the CanScrollHorizontally attached property</summary>
            <remarks>The CanScrollHorizontally attached property has been explicitly set to false for the GroupByControl, GroupHeaderControl, and RowSelectorPane in each table-view theme.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.ColumnStretchMinWidthProperty">
            <summary>Identifies the  ColumnStretchMinWidth attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.ColumnStretchModeProperty">
            <summary>Identifies the  ColumnStretchMode attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.DetailIndicatorWidthProperty">
            <summary>Identifies the DetailIndicatorWidth attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.FixedColumnCountProperty">
            <summary>Identifies the  FixedColumnCount attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.FixedColumnDropMarkPenProperty">
            <summary>Identifies the  FixedColumnDropMarkPen attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.FixedColumnSplitterStyleProperty">
            <summary>Identifies the FixedColumnSplitterStyle attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.FixedColumnSplitterWidthProperty">
            <summary>Identifies the  FixedColumnSplitterWidth attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.GroupLevelIndicatorWidthProperty">
            <summary>Identifies the  GroupLevelIndicatorWidth attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.HorizontalGridLineBrushProperty">
            <summary>Identifies the  HorizontalGridLineBrush attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.HorizontalGridLineThicknessProperty">
            <summary>Identifies the  HorizontalGridLineThickness attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.IsColumnVirtualizationEnabledProperty">
            <summary>Identifies the  IsColumnVirutalizationEnabled dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.RowSelectorPaneWidthProperty">
            <summary>Identifies the  RowSelectorPaneWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.ShowFixedColumnSplitterProperty">
            <summary>Identifies the  ShowFixedColumnSplitter attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.ShowRowSelectorPaneProperty">
            <summary>Identifies the  ShowRowSelectorPane dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.VerticalGridLineBrushProperty">
            <summary>Identifies the  VerticalGridLineBrush attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableView.VerticalGridLineThicknessProperty">
            <summary>Identifies the  VerticalGridLineThickness attached property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.TableViewHeaderFooterPanel">
            <summary>Represents a panel that contains the items located in the header and/or footer sections of a grid.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewHeaderFooterPanel.#ctor">
            <summary>Initializes a new instance of the TableViewHeaderFooterPanel class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewHeaderFooterPanel.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the child elements of this panel.</summary>
            <returns>The Size that represents the arranged size of the panel.</returns>
            <param name="arrangeSize">    The final area within the parent that this element should     use to arrange itself and its children.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewHeaderFooterPanel.MeasureOverride(System.Windows.Size)">
            <summary>    Measures the child element in anticipation of arranging     it during the ArrangeOverride pass.</summary>
            <param name="availableSize">    An upper limit Size that should not be     exceeded.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.TableViewItemsHost">
            <summary>    Class used in DataGridControl     templates as a replacement for the     ItemsPresenter when a grid is in a table-view     layout and that will contain the data items as well as the     items contained in non-fixed header and footer     sections and whose containers are created from the associated          CustomItemContainerGenerator.</summary>
            <remarks>This class should be used rather than providing a panel through the DataGridControl.ItemsPanel property when creating a table view</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.#ctor">
            <summary>Initializes a new instance of the TableViewItemsHost class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the content of the items.</summary>
            <param name="finalSize">    The final area within the parent that this element should     use to arrange itself and its children.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.LineDown">
            <summary>Scrolls down within content by one logical unit.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.LineLeft">
            <summary>Scrolls left within content by one logical unit.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.LineRight">
            <summary>Scrolls right within content by one logical unit.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.LineUp">
            <summary>Scrolls up within content by one logical unit.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>    Forces content to scroll until the coordinate space of a     Visual object is visible</summary>
            <param name="visual">A Visual that becomes visible.</param>
            <param name="rectangle">                                           A bounding rectangle that identifies the coordinate                 space to make visible.                                            </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.MeasureOverride(System.Windows.Size)">
            <summary>    Measures the child elements in anticipation of arranging     them during the      ArrangeOverride pass</summary>
            <returns>    The Size that represents the desired     size of the element.</returns>
            <param name="availableSize">    An upper limit Size that should not be     exceeded.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.MouseWheelDown">
            <summary>    Scrolls down within content after a user clicks the wheel     button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.MouseWheelLeft">
            <summary>    Scrolls left within content after a user clicks the wheel     button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.MouseWheelRight">
            <summary>    Scrolls right within content after a user clicks the     wheel button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.MouseWheelUp">
            <summary>    Scrolls up within content after a user clicks the wheel     button on a mouse.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.OnContainersRemoved(System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>    Indicates that containers in the      CustomItemContainerGenerator will no longer be     used/recycled and can be removed from the items host.</summary>
            <param name="removedContainers">    A list of the containers that will no longer be     used/recycled and that can be removed from the items     host.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.OnItemsAdded(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32)">
            <summary>    Indicates that items have been added to the data source     or through the expansion of groups or details and need to be     added to the items host.</summary>
            <param name="position">    The GeneratorPosition at which the items     were added.</param>
            <param name="index">The zero-based index at which the item was added.</param>
            <param name="itemCount">The number of items that were added.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.OnItemsMoved(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>    Indicates that items have been moved in the data source     and need to be repositioned in the items host.</summary>
            <param name="position">    The GeneratorPosition to which the items     were moved.</param>
            <param name="index">The zero-based index to which the item was moved.</param>
            <param name="oldPosition">    The old GeneratorPosition from which the     items were moved.</param>
            <param name="oldIndex">The old index.</param>
            <param name="itemCount">The number of items that were moved.</param>
            <param name="itemUICount">The number of containers that were moved.</param>
            <param name="affectedContainers">    A list of the containers that were affected by the     move.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.OnItemsRemoved(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>    Indicates that items have been removed from the data     source or through the collapse of groups or details and need to     be removed to the items host.</summary>
            <param name="position">The new GeneratorPosition.</param>
            <param name="index">    The zero-based index at which the item was     removed.</param>
            <param name="oldPosition">    The GeneratorPosition at which the items     were removed.</param>
            <param name="oldIndex">The old index.</param>
            <param name="itemCount">The number of items that were removed.</param>
            <param name="itemUICount">The number of containers that were removed.</param>
            <param name="affectedContainers">    A list of the containers that were affected by the     removal of items.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.OnItemsReplaced(System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Windows.Controls.Primitives.GeneratorPosition,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IList`1{System.Windows.DependencyObject})">
            <summary>    Indicates that items have been replaced in the data     source and need to be removed from the items host.</summary>
            <param name="position">The new GeneratorPosition.</param>
            <param name="index">    The zero-based index of the item that was     replaced.</param>
            <param name="oldPosition">    The GeneratorPosition at which the items     were remplaced.</param>
            <param name="oldIndex">The old index.</param>
            <param name="itemCount">The number of items that were remplaced.</param>
            <param name="itemUICount">The number of containers that were replaced.</param>
            <param name="affectedContainers">    A list of the containers that were affected by the     replacement of the items.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.OnItemsReset">
            <summary>    Indicates that the data source was reset and that the     items host should clear its children.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.PageDown">
            <summary>Scrolls down within content by one page.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.PageLeft">
            <summary>Scrolls left within content by one page.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.PageRight">
            <summary>Scrolls right within content by one page.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.PageUp">
            <summary>Scrolls up within content by one page.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.SetHorizontalOffset(System.Double)">
            <summary>Sets the amount of horizontal offset.</summary>
            <param name="offset">    The degree to which content is horizontally      offset     from the containing      viewport.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.SetVerticalOffset(System.Double)">
            <summary>Sets the amount of vertical offset.</summary>
            <param name="offset">    The degree to which content is vertically      offset     from the containing      viewport.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.CanHorizontallyScroll">
            <summary>    Gets or sets a value that indicates whether scrolling on     the horizontal axis is possible.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.CanVerticallyScroll">
            <summary>    Gets or sets a value that indicates whether scrolling on     the vertical axis is possible.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.ExtentHeight">
            <summary>    Gets the vertical size of the extent.     </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.ExtentWidth">
            <summary>    Gets the horizontal size of the extent.     </summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.HorizontalOffset">
            <summary>    Gets the horizontal      offset     of the scrolled content.</summary>
            <remarks>The value assigned to this property must be greater than or equal to zero, and less than  ExtentWidth minus  ViewportWidth</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.Orientation">
            <summary>    Gets or sets a value that describes the horizontal or     vertical content orientation.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.ScrollOwner">
            <summary>    Gets or sets a ScrollViewer element that     controls the scrolling behavior of the items host.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.StableScrollingEnabled">
            <summary>Gets or sets a value indicating whether, when an element is brought into view, the items host should scroll to make the top-left corner of the element visible in the viewport, or if the items host should minimize the scrolling required and make any portion of the element visible.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.StableScrollingProportion">
            <summary>Gets or sets a value representing the proportion of the element to bring into view if  stable scrolling is enabled.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.VerticalOffset">
            <summary>    Gets the vertical offset of     the scrolled content.</summary>
            <remarks>             The value assigned to this property must be greater than or         equal to zero, and less than          ExtentHeight minus          ViewportHeight.          Requirements</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.ViewportHeight">
            <summary>    Gets the vertical size of the viewport for this     content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.ViewportWidth">
            <summary>    Gets the horizontal size of the viewport for this     content.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.OrientationProperty">
            <summary>Identifies the  Orientation dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.StableScrollingEnabledProperty">
            <summary>Identifies the  StableScrollingEnabled dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableViewItemsHost.StableScrollingProportionProperty">
            <summary>Identifies the  StableScrollingProportion dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.TableViewScrollViewer">
            <summary>Represents a scrollable area that can contain other visible elements laid out in a tableview.</summary>
            <remarks>    Fixed Columns vs. Templates      In order to support fixed columns when creating a new row     template for a table-view layout, the following criteria must     be met:                       The PART_CellsHost template part         must be a         FixedCellPanel.         The          FixedCellCount property of the         FixedCellPanel must be bound to the table         view's          FixedColumnCount property using a         TwoWay          ViewBinding.          The fixed-cell-panel properties listed below are also     usually bound when provided a new row template for a table-view     layout:                                SplitterStyle         (TemplateBinding         xcdg:TableView.FixedColumnSplitterStyle)                  SplitterWidth (xcdg:ViewBinding         FixedColumnSplitterWidth)                  ShowSplitter         (xcdg:ViewBinding ShowFixedColumnSplitter)                  FixedColumnDropMarkPen         (xcdg:ViewBinding FixedColumnDropMarkPen)          If a new template is provided for a DataGridControl     and fixed columns are to be supported, it is essential that a          TableViewScrollViewer be used. This scroll viewer is     responsible for preserving the     TranslateTransforms that fix and scroll     elements, as well as executing the PageLeft and PageRight     actions according to the reduced viewport. It is also     recommended that an AdornerDecorator be     located above the TableViewScrollViewer of the     templated DataGridControl to support drag and     dropping of the fixed-column splitter correctly.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TableViewScrollViewer.OnApplyTemplate">
            <summary>Builds the visual tree for the element.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewScrollViewer.RowSelectorPaneWidth">
            <summary>    Gets or sets the width of the row-selector     pane.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TableViewScrollViewer.ShowRowSelectorPane">
            <summary>Gets or sets a value indicating whether the RowSelectorPane should be shown.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableViewScrollViewer.RowSelectorPaneWidthProperty">
            <summary>Identifies the  RowSelectorPaneWidth dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.TableViewScrollViewer.ShowRowSelectorPaneProperty">
            <summary>Identifies the  ShowRowSelectorPane dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.TargetViewAttribute">
            <summary>Represents an attribute that is set on a theme to identify the views to which it can be applied.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.TargetViewAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the  TargetViewAttribute class.</summary>
            <remarks>The TargetView attribute must be used when creating a custom theme in order to identify the views for which the theme applies.</remarks>
            <param name="viewType">The type of the view for which the theme applies.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.TargetViewAttribute.ViewType">
            <summary>Gets the view for which the theme applies.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Theme">
            <summary>Base class that represents a theme that can be applied to one or more views.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Theme.IsViewSupported">
            <summary>Retrieves a value indicating whether the specified view type is supported by the theme.</summary>
            <returns>true if the view is supported; false otherwise.</returns>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Theme.IsViewSupported(System.Type)">
            <summary>Retrieves a value indicating whether the specified view type is supported by the theme.</summary>
            <returns>true if the view type is supported; false otherwise.</returns>
            <param name="viewType">The type of the view to query</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Theme.IsViewSupported(System.Type,System.Type)">
            <summary>Retrieves a value indicating whether the specified view type is supported by the theme.</summary>
            <returns>    true if the view type is     supported; false otherwise.</returns>
            <param name="viewType">The type of the view to query</param>
            <param name="themeType">    The type of the theme that will be used when the view is     queried.</param>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.UIViewBase">
            <summary>Base class that provides various layout information that applies to all views, excluding views that are used when printing.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.UIViewBase.GetDropMarkOrientation(System.Windows.DependencyObject)">
            <summary>Gets the value of the DropMarkOrientation attached property for the specified dependency object.</summary>
            <returns>The DropMarkOrientation value for the dependency object.</returns>
            <remarks>    The drop-mark is displayed when a      ColumnManagerCell or      GroupByItem is moved.     If left at its default value, the drop-mark will have a     horizontal orientation when a grid is in      TableView, and a vertical orientation when a grid is in     CardView     or      CompactCardView.</remarks>
            <param name="obj">    The dependency object from which the property value is     read. By default,     DropMarkOrientation.Default.                                            Member                 Description                                           Default                 The orientation of the drop-mark will                 be the default orientation depending on a grid's                                  view.                                           Vertical                 The drop-mark will have a vertical                 orientation.                                           Horizontal                 The drop-mark will have a horizontal                 orientation.                           </param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.UIViewBase.GetDropMarkPen(System.Windows.DependencyObject)">
            <summary>Gets the value of the DropMarkPen attached property for the specified dependency object.</summary>
            <returns>The Pen property value for the dependency object.</returns>
            <param name="obj">The dependency object from which the property value is read. By default, $$NULL$$.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.UIViewBase.SetDropMarkOrientation(System.Windows.DependencyObject,Xceed.Wpf.DataGrid.Views.DropMarkOrientation)">
            <summary>Sets the value of the DropMarkOrientation attached property to the specified dependency object.</summary>
            <remarks>    The drop-mark is displayed when a      ColumnManagerCell or      GroupByItem is moved.     If left at its default value, the drop-mark will have a     horizontal orientation when a grid is in      TableView, and a vertical orientation when a grid is in     CardView     or      CompactCardView.</remarks>
            <param name="obj">    The dependency object to which the attached property is     written.                                            Member                 Description                                           Default                 The orientation of the drop-mark will                 be the default orientation depending on a grid's                                  view.                                           Vertical                 The drop-mark will have a vertical                 orientation.                                           Horizontal                 The drop-mark will have a horizontal                 orientation.                           </param>
            <param name="value">The needed DropMarkOrientation value.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.UIViewBase.SetDropMarkPen(System.Windows.DependencyObject,System.Windows.Media.Pen)">
            <summary>Sets the value of the DropMarkPen attached property to the specified dependency object.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">The needed Pen value.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.AutoFilterDropDownGlyph">
            <summary>Gets or sets the glyph to display in a column-manager cell allows the auto-filter drop down to be opened.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.CurrentItemGlyph">
            <summary>Gets or sets the glyph to display when an item is current.</summary>
            <remarks>Typically, the CurrentItemGlyph is displayed in the selected item's RowSelector.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.DefaultDropMarkOrientation">
            <summary>Gets or sets the default orientation of the drop-mark.</summary>
            <remarks>    The drop-mark is displayed when a      ColumnManagerCell or      GroupByItem is moved.     If left at its default value, the drop-mark will have a     horizontal orientation when a grid is in      TableView, and a vertical orientation when a grid is in     CardView     or      CompactCardView.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.DefaultDropMarkPen">
            <summary>Gets or sets the default Pen used to draw the drop-mark.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.EditingRowGlyph">
            <summary>Gets or sets the glyph to display when a row is being edited.</summary>
            <remarks>Typically, the EditingRowGlyph is displayed in the RowSelector of the row that is being edited.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.InsertionRowGlyph">
            <summary>Gets or sets the glyph to display when an InsertionRow is active.</summary>
            <remarks>Typically, the InsertionRowGlyph is displayed in the RowSelector of the active InsertionRow.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.ScrollTipContentTemplate">
            <summary>Gets or sets the DataTemplate used to display the scroll tip's content.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.ScrollTipContentTemplateSelector">
            <summary>Gets or sets a DataTemplateSelector that provides a way to apply a different scroll-tip content template based on custom logic.</summary>
            <remarks>To provide a custom DataTemplateSelector, a class that derives from the DataTemplateSelector class and overrides the SelectTemplate method to return the appropriate DataTemplate, must be created.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.ShowScrollTip">
            <summary>Gets or sets a value indicating whether the scroll tip is visible when a grid is scrolled.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.UIViewBase.ValidationErrorGlyph">
            <summary>Gets or sets the glyph that is displayed when a validation error occurs.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.AutoFilterDropDownGlyphProperty">
            <summary>Identifies the  AutoFilterDropDownGlyph dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.CurrentItemGlyphProperty">
            <summary>Identifies the  CurrentItemGlyph dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.DefaultDropMarkOrientationProperty">
            <summary>Identifies the  DefaultDropMarkOrientation dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.DefaultDropMarkPenProperty">
            <summary>Identifies the  DefaultDropMarkPen dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.DropMarkOrientationProperty">
            <summary>Identifies the DropMarkOrientation attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.DropMarkPenProperty">
            <summary>Identifies the DropMarkPen attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.EditingRowGlyphProperty">
            <summary>Identifies the  EditingRowGlyph dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.InsertionRowGlyphProperty">
            <summary>Identifies the  InsertionRowGlyph dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.ScrollTipContentTemplateProperty">
            <summary>Identifies the  ScrollTipTemplate dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.ScrollTipContentTemplateSelectorProperty">
            <summary>Identifies the  ScrollTipTemplateSelector dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.ShowScrollTipProperty">
            <summary>Identifies the  ShowScrollTip dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.UIViewBase.ValidationErrorGlyphProperty">
            <summary>Identifies the  ValidationErrorGlyph dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.ViewBase">
            <summary>Base class that provides various layout information that applies to all views, including views that are used when printing.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.ViewBase.AddDefaultHeadersFooters">
            <summary>Adds the default items to the  header,  footer,  fixed headers, and  fixed footer sections of a grid.</summary>
            <remarks>    By default, a grid contains a GroupByControl     and a ColumnManagerRow     in its      FixedHeaders that are added before any other elements that     are explicitly added to the section.</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.ViewBase.GetIsLastItem(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether the item to which the property is attached is the last element in a grid.</summary>
            <returns>true if the item is the last item in a grid; false otherwise.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.ViewBase.SetIsLastItem(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether the item to which the property is attached is the last item in a grid.</summary>
            <param name="obj">    The dependency object to which the attached property is     written.</param>
            <param name="value">true if the item is the last item in a grid; false otherwise.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.AscendingSortGlyph">
            <summary>Gets or sets the glyph to display when a column is sorted in an ascending direction.</summary>
            <remarks>    Typically, the AscendingSortGlyph is     displayed in the corresponding ColumnManagerCell     and GroupByItem     of the columns that are sorted in an ascending     direction.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.AutoFilterGlyph">
            <summary>Gets or sets the glyph to display in a column-manager cell when a column is automatically filtered.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.CollapseGroupGlyph">
            <summary>Gets or sets the glyph to display when a group is expanded to allow it to be collapsed.</summary>
            <remarks>Typically, the GroupCollapseGlyph is displayed in the GroupHeaderControls.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.DescendingSortGlyph">
            <summary>Gets or sets the glyph to display when a column is sorted in an descending direction.</summary>
            <remarks>    Typically, the DescendingSortGlyph is     displayed in the corresponding ColumnManagerCell     and GroupByItem     of the columns that are sorted in an descending     direction.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.ExpandGroupGlyph">
            <summary>Gets or sets the glyph to display when a group is collapsed to allow it to be expanded.</summary>
            <remarks>Typically, the GroupExpandGlyph is displayed in the GroupHeaderControls.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.FixedFooters">
            <summary>Gets a collection that contains the items that are located in the fixed, non-scrollable footer section of a grid.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.FixedHeaders">
            <summary>Gets a collection that contains the items that are located in the fixed, non-scrollable header section of a grid.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.Footers">
            <summary>Gets a collection that contains the items that are located in the footer section of a grid.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.Headers">
            <summary>Gets a collection that contains the items that are located in the header section of a grid.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.Theme">
            <summary>Gets or sets the theme that determines which styles are applied to the elements in a grid for this specific view.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewBase.UseDefaultHeadersFooters">
            <summary>Gets or sets a value indicating whether the default header and footer items are automatically added to a grid's fixed, and non-fixed, header and footer sections.</summary>
            <remarks>    Default items will be added before any     other items that are explicitly added to the      FixedHeaders,      FixedFooters,      Headers, or      Footers sections.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.AscendingSortGlyphProperty">
            <summary>    Identifies the      AscendingSortGlyph dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.AutoFilterGlyphProperty">
            <summary>Identifies the  AutoFilterGlyph dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.CollapseGroupGlyphProperty">
            <summary>Identifies the  GroupCollapseGlyph dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.DescendingSortGlyphProperty">
            <summary>Identifies the  DescendingSortGlyph dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.ExpandGroupGlyphProperty">
            <summary>Identifies the  GroupExpandGlyph dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.FixedFootersProperty">
            <summary>Identifies the  FixedFooters dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.FixedHeadersProperty">
            <summary>Identifies the  FixedHeaders dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.FootersProperty">
            <summary>Identifies the  Footers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.HeadersProperty">
            <summary>Identifies the  Headers dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.IsLastItemProperty">
            <summary>Identifies the IsLastItem attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.ThemeProperty">
            <summary>    Identifies the      Theme dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.ViewBase.UseDefaultHeadersFootersProperty">
            <summary>Identifies the  UseDefaultHeadersFooters dependency property.</summary>
        </member>
        <member name="E:Xceed.Wpf.DataGrid.Views.ViewBase.ThemeChanged">
            <summary>Raised when the value of the Theme property is changed.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.ViewPropertyAttribute">
            <summary>Identifies how and if a property in a view can be accessed using a  ViewBinding (see Remarks).</summary>
            <remarks>                                           Member                 Description                                           None                 The property on which the                  ViewPropertyAttribute is set                 cannot be accessed through a                  ViewBinding.                                           ViewOnly                 The property on which the                  ViewPropertyAttribute is set                 will be accessible through a                  ViewBinding. If                 defined on a table-view property, it will not be                 possible to provide an alternate value for                  DetailConfigurations.                                           Routed                 The attached property                 on which the                  ViewPropertyAttribute is set                 will be accessible through a                  ViewBinding. If                 defined on a table-view property, the binding will                 redirect to the appropriate                  DetailConfigurations for its                 value.                           </remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.ViewPropertyAttribute.#ctor(Xceed.Wpf.DataGrid.Views.ViewPropertyMode)">
            <summary>Initializes a new instance of the ViewPropertyAttribute class specifying the  ViewPropertyMode that determines how or if the property on which the attribute is set can be accessed through a  ViewBinding.</summary>
            <param name="viewPropertyMode">A  ViewPropertyMode value that determines how or if the property on which the attribute is set can be accessed through a  ViewBinding.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.ViewPropertyAttribute.ViewPropertyMode">
            <summary>Gets a value that determines how or if the property on which the attribute is set can be accessed through a  ViewBinding.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.ZuneNormalColorTheme">
            <summary>Represents the Zune normal-color theme.</summary>
            <remarks>    Views and themes can be set through attribute syntax (see     Example 1) or property element syntax (see Example 2). To     change the default view and/or theme using attribute syntax,     the name of the view to use (e.g., CardView) must be provided,     optionally followed by the name of the theme class (e.g.,     ZuneNormalColorTheme), or the name of the class without the     "Theme" portion. Using property element syntax, the name of the     class (e.g., AeroNormalColorTheme) must be used.     When using themes provided in external Theme Packs (e.g.,     Windows Media Player 11), property element syntax     must be used.          Figure 1: Card view in Zune system     theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.ZuneNormalColorTheme.#ctor">
            <summary>Initializes a new instance of the ZuneNormalColorTheme class.</summary>
        </member>
        <member name="N:Xceed.Wpf.DataGrid.Views.Surfaces">
            <summary>The Xceed.Wpf.DataGrid.Views.Surfaces namespace regroups all the classes which are required to apply multi-surface views and themes to a DataGridControl.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.CompleteSurfaceConfiguration">
            <summary>Represents a surface configuration that consists of an image, title, and data region­.</summary>
            <remarks>    The data region configuration is applied to the region on     a surface that, by default, displays information from the     fields that have not been explicitly assigned to another     region.          Figure 1: Complete surface     configuration in Elemental Black theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.CompleteSurfaceConfiguration.#ctor">
            <summary>Initializes a new instance of the CompleteSurfaceConfiguration class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.CompleteSurfaceConfiguration.DataRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that, by default, displays information     from the fields that have not been explicitly assigned to     another region.</summary>
            <remarks>    In most themes, the data region is—and should be—designed     in such a way as to contain the majority of the fields in a     data item. Therefore, the      region presenter that corresponds to this region     configuration usually marks it as the      default region.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.CompleteSurfaceConfiguration.ImageRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that displays an image.</summary>
            <remarks/>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.CompleteSurfaceConfiguration.TitleRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that displays a title.</summary>
            <remarks/>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.CompleteSurfaceConfiguration.DataRegionConfigurationProperty">
            <summary>Identifies the  DataRegionConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.CompleteSurfaceConfiguration.ImageRegionConfigurationProperty">
            <summary>Identifies the  ImageRegionConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.CompleteSurfaceConfiguration.TitleRegionConfigurationProperty">
            <summary>Identifies the  TitleRegionConfiguration dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.DataSurfaceConfiguration">
            <summary>Represents a surface configuration that consists of only a data region.</summary>
            <remarks>         Figure 1: Data surface configuration     in Elemental Black theme     The data region configuration is applied to the region on     a surface that, by default, displays information from the     fields that have not been explicitly assigned to another     region.          Figure 1: Complete surface     configuration in Elemental Black theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.DataSurfaceConfiguration.#ctor">
            <summary>Initializes a new instance of the DataSurfaceConfiguration class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.DataSurfaceConfiguration.DataRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that, by default, displays information     from the fields that have not been explicitly assigned to     another region.</summary>
            <remarks>    In most themes, the data region is—and should be—designed     in such a way as to contain the majority of the fields in a     data item. Therefore, the      region presenter that corresponds to this region     configuration usually marks it as the      default region.     </remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.DataSurfaceConfiguration.DataRegionConfigurationProperty">
            <summary>Identifies the  DataRegionConfiguration dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndDataSurfaceConfiguration">
            <summary>Represents a surface configuration that consists of an image and data region­.</summary>
            <remarks>         Figure 1: Image and data surface     configuration in Elemental Black theme     The data region configuration is applied to the region on     a surface that, by default, displays information from the     fields that have not been explicitly assigned to another     region.          Figure 1: Complete surface     configuration in Elemental Black theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndDataSurfaceConfiguration.#ctor">
            <summary>Intializes a new instance of the ImageAndDataSurfaceConfiguration class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndDataSurfaceConfiguration.DataRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that, by default, displays information     from the fields that have not been explicitly assigned to     another region.</summary>
            <remarks>    In most themes, the data region is—and should be—designed     in such a way as to contain the majority of the fields in a     data item. Therefore, the      region presenter that corresponds to this region     configuration usually marks it as the      default region.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndDataSurfaceConfiguration.ImageRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that displays an image.</summary>
            <remarks/>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndDataSurfaceConfiguration.DataRegionConfigurationProperty">
            <summary>Identifies the  DataRegionConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndDataSurfaceConfiguration.ImageRegionConfigurationProperty">
            <summary>Identifies the  ImageRegionConfiguration dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndTitleSurfaceConfiguration">
            <summary>Represents a surface configuration that consists of an image and title region­.</summary>
            <remarks>         Figure 1: Image and title surface     configuration in Elemental Black theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndTitleSurfaceConfiguration.#ctor">
            <summary>Initializes a new instance of the ImageAndTitleSurfaceConfiguration class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndTitleSurfaceConfiguration.ImageRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that displays an image.</summary>
            <remarks/>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndTitleSurfaceConfiguration.TitleRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that displays a title.</summary>
            <remarks/>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndTitleSurfaceConfiguration.ImageRegionConfigurationProperty">
            <summary>Identifies the  ImageRegionConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.ImageAndTitleSurfaceConfiguration.TitleRegionConfigurationProperty">
            <summary>Identifies the  TitleRegionConfiguration dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.ImageSurfaceConfiguration">
            <summary>Represents a surface configuration that consists of only an image region.</summary>
            <remarks>         Figure 1: Image surface     configuration in Elemental Black theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.ImageSurfaceConfiguration.#ctor">
            <summary>Initializes a new instance of the ImageSurfaceConfiguration class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.ImageSurfaceConfiguration.ImageRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that displays an image.</summary>
            <remarks/>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.ImageSurfaceConfiguration.ImageRegionConfigurationProperty">
            <summary>Identifies the  ImageRegionConfiguration dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceTheme">
            <summary>Base class that represents a theme that can be applied to one or more  multi-surface views.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceTheme.DefaultSurfaceConfigurations">
            <summary>Gets the default surface configurations that will be applied to a multi-surface view's surfaces.</summary>
            <remarks> The default configurations can also be overridden by adding surface configurations to a theme's  SurfaceConfigurations collection and specifying the surfaces to which they will be applied using the  Surfaces attached property defined on the multi-surface view.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceTheme.SurfaceConfigurations">
            <summary>Gets the surface configurations that will be applied to a multi-surface view's surfaces.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceViewBase">
            <summary>Base class that provides various layout information that applies to all multi-surface views.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceViewBase.GetCoercedSurfaceConfiguration(System.Windows.DependencyObject)">
            <summary>Gets the surface configuration that is applied to a card (i.e., row).</summary>
            <returns>A reference to the the  SurfaceConfiguration that is applied to a card (i.e., row).</returns>
            <remarks>Setting the CoercedSurfaceConfiguration property to $$NULL$$, will result in an empty surface being displayed.</remarks>
            <param name="obj"> The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceViewBase.GetCoercedSurfaceConfigurationType(System.Windows.DependencyObject)">
            <summary>Gets the type of the surface configuration that is applied to a card (i.e., row).</summary>
            <returns>A Type representing the type of the surface configuration that is applied to a card (i.e., row).</returns>
            <param name="obj"> The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceViewBase.GetSurfaceConfigurationContext(System.Windows.DependencyObject)">
            <summary>Gets the context through which  the properties exposed by a surface configuration and multi-surface can be accessed.</summary>
            <returns>The context through which  the properties exposed by a surface configuration and multi-surface theme (e.g.,TitleRegionPosition and  GradientLightColor) can be accessed in order to bind elements in the theme-defined ControlTemplates to their values or use them in triggers (see CardflowView3D.Elemental.Pink resource dictionary).</returns>
            <param name="obj"> The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceViewBase.SetCoercedSurfaceConfiguration(System.Windows.DependencyObject,Xceed.Wpf.DataGrid.Views.Surfaces.SurfaceConfiguration)">
            <summary>Sets the surface configuration that is applied to a card (i.e., row).</summary>
            <remarks>Setting the CoercedSurfaceConfiguration property to $$NULL$$, will result in an empty surface being displayed.</remarks>
            <param name="obj"> The dependency object to which the attached property is written.</param>
            <param name="value">    A reference to the the      SurfaceConfiguration that is     applied to a card (i.e., row).</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceViewBase.SetSurfaceConfigurationContext(System.Windows.DependencyObject,Xceed.Wpf.DataGrid.Views.Surfaces.SurfaceConfigurationContext)">
            <summary>Sets the context through which  the properties exposed by a surface configuration and multi-surface can be accessed.</summary>
            <param name="obj"> The dependency object to which the attached property is written.</param>
            <param name="value">The context through which  the properties exposed by a surface configuration and multi-surface theme (e.g.,TitleRegionPosition and  GradientLightColor) can be accessed in order to bind elements in the theme-defined ControlTemplates to their values or use them in triggers (see CardflowView3D.Elemental.Pink resource dictionary).</param>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceViewBase.CoercedSurfaceConfigurationProperty">
            <summary>Identifies the  CoercedSurfaceConfiguration attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceViewBase.CoercedSurfaceConfigurationTypeProperty">
            <summary>Identifies the  CoercedSurfaceConfigurationType attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.MultiSurfaceViewBase.SurfaceConfigurationContextProperty">
            <summary>Identifies the  SurfaceConfigurationContext attached property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration">
            <summary>Class that determines how the content of a  region presenter is displayed (see Remarks).</summary>
            <remarks>    Each base surface configuration (see Table 1 in Surface Configurations)     supports various regions (title, image, and/or data) that     display information from the fields in a data item and that can     be configured through their corresponding region-configuration     properties. The "complete" surface configuration displays all 3     three regions (see Figure 1), while the title, image, and data     surface configurations display only their respective regions.     The other surface configurations display combinations of these     regions.          Figure 1: CompleteSurfaceConfiguration     regions in Elemental Black theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.#ctor">
            <summary>Initializes a new instance of the RegionConfiguration class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.GetShowCellTitles(System.Windows.DependencyObject)">
            <summary>Gets a value indicating whether cell titles are shown.</summary>
            <returns>true if cell titles are shown; false otherwise.</returns>
            <param name="obj">The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.SetShowCellTitles(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value indicating whether cell titles are shown.</summary>
            <param name="obj">The dependency object to which the attached property is written.</param>
            <param name="value">true if cell titles are shown; false otherwise.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.FieldNames">
            <summary>Gets or sets the names of the fields that will be displayed in the region.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.ImageStretch">
            <summary>Gets or sets a value indicating how images displayed in the region should be stretched</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.ImageStretchDirection">
            <summary>Gets or sets a value indicating how images displayed in the region are scaled.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.ReadOnly">
            <summary>Gets or sets a value indicating whether DataCells contained in the region can be edited.</summary>
            <remarks>Usually, image and title-region configurations are read-only.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.ShowCellTitles">
            <summary>Identifies the  ShowCellTitles attached property.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.Template">
            <summary>Gets or sets the DataTemplate that can be used to change the layout of the fields in the region.</summary>
            <remarks>If the fields in the region are to be edited, then DataCells must be used in the template. If no editing is required, then any other element (e.g., TextBlock) can be used or the ReadOnly property set to true.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.FieldNamesProperty">
            <summary>Identifies the  FieldNames dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.ImageStretchDirectionProperty">
            <summary>Identifies the  ImageStretchDirection dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.ImageStretchProperty">
            <summary>Identifies the  ImageStretch dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.ReadOnlyProperty">
            <summary>Identifies the  ReadOnly dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.ShowCellTitlesProperty">
            <summary>Identifies the  ShowCellTitles attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionConfiguration.TemplateProperty">
            <summary>Identifies the  Template dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter">
            <summary>Represents an element in a ControlTemplate that indicates a location where content is to be displayed.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.#ctor">
            <summary>Initializes a new instance of the RegionPresenter class.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the contents of a region presenter.</summary>
            <returns>The size of the RegionPresenter.</returns>
            <param name="finalSize">The Size this element uses to arrange its child elements.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.GetImageStretch(System.Windows.DependencyObject)">
            <summary>Gets a value indicating how images displayed in the region presenter should be stretched</summary>
            <returns>A Stretch value indicating how images displayed in the region are stretched to fill their destination rectangles. By default, UniformToFill.</returns>
            <param name="obj"> The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.GetImageStretchDirection(System.Windows.DependencyObject)">
            <summary>Gets a value indicating how images displayed in the region presenter are scaled.</summary>
            <returns>A StretchDirection value indicating how images displayed in the region are scaled. By default, UniformToFill.</returns>
            <param name="obj"> The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.GetIsCellsHost(System.Windows.DependencyObject)">
            <summary>Gets a value that indicates whether the Panel to which it is attached can contain cells.</summary>
            <returns>true if the Panel can contain cells; false otherwise.</returns>
            <remarks> Within a region presenter, a Panel must be identified as the element in which the cells displayed in the region will be contained by setting the presenter'sIsCellsHost attached property to true. If a corresponding region configuration defines a new template but does not include a Panel identified as being a cell host, the names of the fields that were provided through the  FieldNames property but were not explicitly positioned in the template will not be displayed in the region.</remarks>
            <param name="obj"> The dependency object from which the property value is read.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.GetVisualChild(System.Int32)">
            <summary>Gets the visual child at the specified index.</summary>
            <returns>The visual child at index.</returns>
            <param name="index">The zero-based index of the visual child to retrieve.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.MeasureOverride(System.Windows.Size)">
            <summary>Measures the child elements of the region presenter before they are arranged during the  ArrangeOverride pass.</summary>
            <returns>A Size representing the upper size limit of the RegionPresenter.</returns>
            <param name="availableSize">An upper limit Size that should not be exceeded.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.SetImageStretch(System.Windows.DependencyObject,System.Windows.Media.Stretch)">
            <summary>Sets a value indicating how images displayed in the region presenter should be stretched to fill their destination rectangles.</summary>
            <param name="obj"> The dependency object to which the attached property is written.</param>
            <param name="value">A Stretch value indicating how images displayed in the region are stretched. By default, UniformToFill.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.SetImageStretchDirection(System.Windows.DependencyObject,System.Windows.Controls.StretchDirection)">
            <summary>Sets a value indicating how images displayed in the region presenter are scaled.</summary>
            <param name="obj"> The dependency object to which the attached property is written.</param>
            <param name="value">A StretchDirection value indicating how images displayed in the region are scaled. By default, UniformToFill.</param>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.SetIsCellsHost(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets a value that indicates whether the Panel to which it is attached can contain cells.</summary>
            <remarks> Within a region presenter, a Panel must be identified as the element in which the cells displayed in the region will be contained by setting the presenter'sIsCellsHost attached property to true. If a corresponding region configuration defines a new template but does not include a Panel identified as being a cell host, the names of the fields that were provided through the  FieldNames property but were not explicitly positioned in the template will not be displayed in the region.</remarks>
            <param name="obj"> The dependency object to which the attached property is written.</param>
            <param name="value">true if the Panel can contain cells; false otherwise.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.Content">
            <summary>Gets or sets the visual tree used to display the region presenter's data.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.ImageStretch">
            <summary>Gets or sets a value indicating how images displayed in the region presenter should be stretched</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.ImageStretchDirection">
            <summary>Gets or sets a value indicating how images displayed in the region presenter are scaled.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.IsDefaultRegion">
            <summary>Gets or sets a value that indicates whether a region presenter is the default region.</summary>
            <remarks> If theIsDefaultRegion property is set on more than one region presenter, the last presenter on which it was set will be used as the default region.</remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.LogicalChildren">
            <summary>Gets an enumerator to the region presenter's logical child elements.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.ReadOnly">
            <summary>Gets or sets a value indicating whether the region presenter is read-only.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.VisualChildrenCount">
            <summary>Gets the number of visible child elements.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.ImageStretchDirectionProperty">
            <summary>Identifies the  ImageStretchDirection attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.ImageStretchProperty">
            <summary>Identifies the  ImageStretch attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.IsCellsHostProperty">
            <summary>Identifies the  IsCellsHost attached property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.IsDefaultRegionProperty">
            <summary>Identifies the  IsDefaultRegion dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.RegionPresenter.ReadOnlyProperty">
            <summary>Identifies the  ReadOnly dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.SurfaceConfiguration">
            <summary>Represents configurations that can be applied to any surface exposed by a multi-surface view and supports various regions in which data can be displayed.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.SurfaceConfiguration.AutoFillDefaultRegion">
            <summary>Gets or sets a value indicating whether information from the  fields that have not been explicitly assigned to another region is displayed.</summary>
            <remarks> Setting a surface configuration's  AutoFillDefaultRegion property to false will prevent this behavior; however, unless field names are explicitly assigned to the default region, it will remain empty. If the AutoFillDefaultRegion property is set to true (default) and field names are assigned, the specified fields will appear first in the region followed by the ones that were omitted.</remarks>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.SurfaceConfiguration.AutoFillDefaultRegionProperty">
            <summary>Identifies the  AutoFillDefaultRegion dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.SurfaceConfigurationContext">
            <summary>Class that represents the context through which  the properties exposed by a surface configuration and multi-surface theme (e.g.,TitleRegionPosition and  GradientLightColor) can be accessed in order to bind elements in the theme-defined ControlTemplates to their values or use them in triggers (see CardflowView3D.Elemental.Pink resource dictionary).</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.TargetRegionPresenterNameAttribute">
            <summary>Represents an attribute that is set on a  region-configuration property to identify its corresponding  region presenter­.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.TargetRegionPresenterNameAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the TargetRegionPresenterNameAttribute class specifying the name of a  RegionConfiguration's corresponding  RegionPresenter.</summary>
            <param name="regionPresenterName">A case-sensitive string representing the name of a  RegionConfiguration's corresponding  RegionPresenter.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.TargetRegionPresenterNameAttribute.RegionPresenterName">
            <summary>Gets the case-sensitive string representing the name of a  RegionConfiguration's corresponding  RegionPresenter.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.TargetSurfaceConfigurationAttribute">
            <summary>Represents an attribute that is set on a multi-surface theme to identify the target surface configurations it supports.</summary>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.TargetSurfaceConfigurationAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the TargetSurfaceConfigurationAttribute class specifying the target  surface configuration type.</summary>
            <param name="surfaceConfigurationType">The type of the targeted  SurfaceConfiguration.</param>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.TargetSurfaceConfigurationAttribute.SurfaceConfigurationType">
            <summary>Gets the type of the targeted  SurfaceConfiguration.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.TitleAndDataSurfaceConfiguration">
            <summary>Represents a surface configuration that consists of a title and data region.</summary>
            <remarks>         Figure 1: Title and data surface     configuration in Elemental Black theme     The data region configuration is applied to the region on     a surface that, by default, displays information from the     fields that have not been explicitly assigned to another     region.          Figure 1: Complete surface     configuration in Elemental Black theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.TitleAndDataSurfaceConfiguration.#ctor">
            <summary>Initializes a new instance of the TitleAndDataSurfaceConfiguration class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.TitleAndDataSurfaceConfiguration.DataRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that, by default, displays information     from the fields that have not been explicitly assigned to     another region.</summary>
            <remarks>    In most themes, the data region is—and should be—designed     in such a way as to contain the majority of the fields in a     data item. Therefore, the      region presenter that corresponds to this region     configuration usually marks it as the      default region.     </remarks>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.TitleAndDataSurfaceConfiguration.TitleRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that displays a title.</summary>
            <remarks/>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.TitleAndDataSurfaceConfiguration.DataRegionConfigurationProperty">
            <summary>Identifies the  DataRegionConfiguration dependency property.</summary>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.TitleAndDataSurfaceConfiguration.TitleRegionConfigurationProperty">
            <summary>Identifies the  TitleRegionConfiguration dependency property.</summary>
        </member>
        <member name="T:Xceed.Wpf.DataGrid.Views.Surfaces.TitleSurfaceConfiguration">
            <summary>Represents a surface configuration that consists of only a title region.</summary>
            <remarks>         Figure 1: Title surface     configuration in Elemental Black theme</remarks>
        </member>
        <member name="M:Xceed.Wpf.DataGrid.Views.Surfaces.TitleSurfaceConfiguration.#ctor">
            <summary>Initializes a new instance of the TitleSurfaceConfiguration class.</summary>
        </member>
        <member name="P:Xceed.Wpf.DataGrid.Views.Surfaces.TitleSurfaceConfiguration.TitleRegionConfiguration">
            <summary>    Gets or sets a region configuration that is applied to     the region on a surface that displays a title.</summary>
            <remarks/>
        </member>
        <member name="F:Xceed.Wpf.DataGrid.Views.Surfaces.TitleSurfaceConfiguration.TitleRegionConfigurationProperty">
            <summary>Identifies the  TitleRegionConfiguration dependency property.</summary>
        </member>
    </members>
</doc>
